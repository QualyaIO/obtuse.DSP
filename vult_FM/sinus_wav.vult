
// note that wavetable should be big enough to avoid fixed float limits upon later computations (let say at least 100)
external sin_wave(channel:int, index:int) : real @[wave(channels=1, file="sinus_8k.wav")];

fun index() {
   mem i = (i + 1) % sin_wave_samples();
   return i;
}

fun process() {
   // audio sampling rate
   mem fs: real;
   // sinus frequency
   mem freq: real;
   // [0..8k[ in the wavetable
   mem phase: int;
   // going that much through wavetable at each call
   mem step: int;

   // advance time
   phase = phase + step;
   // loop in sample
   return sin_wave(0, phase);
}
// size of wavetable (int)
and getSize() {
    return sin_wave_samples();
}
// manually setting the step between each call, overriding frequency and samplerate for for effiency at times
// for outside, expect step between 0 and size
and setStep(newStep:real) {
    // do not check, modulo will be applied later
    step = int(newStep);
}
// called internally when Samplerate or frequency is altered
and updateStep() {
    // we don't want any line to be outside [1/32767 .. 32767] to avoid fixed float limits
    val stepRatio = real(getSize()) / 44.1;
   _ = setStep(stepRatio*freq);
}
// seter for parameters. expect values of desired frequency and current sampring rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setFrequency(newFreq:real) {
   freq = newFreq;
   _ = updateStep();
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = updateStep();
}
and default() @[init] {
   // default frequency (in kHz)
   _ = setFrequency(0.440);
   // default sampling rate (in kHz)
   _ = setSamplerate(44.1);
}