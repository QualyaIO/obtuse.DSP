
// oscillator, using waveables

// note that wavetable should be big enough to avoid fixed float limits upon later computations (let say at least 100)

// 0 -> sine
external sin_wave(channel:int, index:int) : real @[wave(channels=1, file="sinus_8k.wav")];


// return value for current wavetable (first channel hard-coded), between [0..sample size[
fun get_sample(index: int) {
    // index of wavetable
    mem wavetable;
    // modulo will be taken care of by the generated code 
    val sample = 0.0;
    if (wavetable == 0) {
       sample = sin_wave(0, index);
    }
    return sample;
}
// size of selected wavetable (int)
and getSize() {
    val size = 0;
    if (wavetable == 0) {
       size = sin_wave_samples();
    }
    return size;
}
// buffered version, specify number of elements of the buffer to proceed (will be caped to acual max). 0: all elements
// update the buffer, to be fetch afterward
and process_buffer(nb: int) {
   mem buffer;
   nb = clip(nb, 0, size(buffer));
   if (nb == 0) {
      nb = 56;
   }

   // audio sampling rate
   mem fs: real;
   // sinus frequency
   mem freq: real;
   // starting point for phase, [0..8k[ in the wavetable
   mem phase_base: real;
   // current phase
   mem phase: real;
   // going that much through wavetable at each call
   mem step: real;

   // slightly more efficient than the more robust modulo
   val size = real(getSize());

   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      if (phase > size) {
         phase = phase - size;
      }
      // loop in sample
      buffer[i] = sin_wave(0, int(phase_base + phase));
      i = i + 1;
   }
}
// --> main function actually here, call default() first <--
and process() {
   mem buffer;
   //process_buffer(1);
   return 0.0;
}
// called internally when Samplerate or frequency is altered
and updateStep() {
    // base for computing step
    mem stepRatio;
    // both for efficiency and because we don't want any result to be outside [1/32767 .. 32767] to avoid fixed float limits we compute step in two... steps
    step = stepRatio*freq;
}
// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
      // update ratio when we update sampling rate
      stepRatio = real(getSize()) / fs;
   }
   _ = updateStep();
}
and setFrequency(newFreq:real) {
   freq = newFreq;
   _ = updateStep();
}
// setting *base* phase [0..size[ -- we won't check here, beware!
and setPhase(newPhase: real) {
   phase_base = newPhase;
}
// reset both base phase and current phase, typically used upon new note
and resetPhase() {
   phase = 0.0;
   phase_base = 0.0;
}
// see options at the top of the wive
and setWavetable(index: int) {
   wavetable = index; 
}
and default() @[init] {
   // will copy a new array
   buffer = Util.buffer();
   // default sampling rate (in kHz)
   _ = setSamplerate(44.1);
   // default sine
   _ = setWavetable(0);
   // default frequency (in kHz)
   _ = setFrequency(0.440);
}