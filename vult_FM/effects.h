
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef EFFECTS_H
#define EFFECTS_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "effects.tables.h"

static_inline fix16_t effects_Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

typedef struct effects_Util__ctx_type_1 {
   uint8_t pre;
} effects_Util__ctx_type_1;

typedef effects_Util__ctx_type_1 effects_Util_edge_type;

static_inline void effects_Util__ctx_type_1_init(effects_Util__ctx_type_1 &_output_){
   effects_Util__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void effects_Util_edge_init(effects_Util__ctx_type_1 &_output_){
   effects_Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t effects_Util_edge(effects_Util__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline void effects_Util_buffer(fix16_t (&_output_)[256]){
   fix16_t buff[256];
   fix_copy_array(256,_output_,buff);
   return ;
}

static_inline void effects_Util_buffer_large(fix16_t (&_output_)[2048]){
   fix16_t buff[2048];
   fix_copy_array(2048,_output_,buff);
   return ;
}

typedef struct effects_CombFB__ctx_type_0 {
   fix16_t scale;
   int pos;
   fix16_t fs;
   int delay;
   fix16_t decay;
   fix16_t buffer_o[256];
   fix16_t buffer[2048];
} effects_CombFB__ctx_type_0;

typedef effects_CombFB__ctx_type_0 effects_CombFB_process_type;

void effects_CombFB__ctx_type_0_init(effects_CombFB__ctx_type_0 &_output_);

static_inline void effects_CombFB_process_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

fix16_t effects_CombFB_process(effects_CombFB__ctx_type_0 &_ctx, fix16_t sample);

typedef effects_CombFB__ctx_type_0 effects_CombFB_process_bufferTo_type;

static_inline void effects_CombFB_process_bufferTo_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

void effects_CombFB_process_bufferTo(effects_CombFB__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]);

typedef effects_CombFB__ctx_type_0 effects_CombFB_process_buffer_type;

static_inline void effects_CombFB_process_buffer_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_process_buffer(effects_CombFB__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256]){
   effects_CombFB_process_bufferTo(_ctx,nb,input,_ctx.buffer_o);
};

typedef effects_CombFB__ctx_type_0 effects_CombFB_getBuffer_type;

static_inline void effects_CombFB_getBuffer_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_getBuffer(effects_CombFB__ctx_type_0 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef effects_CombFB__ctx_type_0 effects_CombFB_copyTo_type;

static_inline void effects_CombFB_copyTo_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

void effects_CombFB_copyTo(effects_CombFB__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef effects_CombFB__ctx_type_0 effects_CombFB_setDecay_type;

static_inline void effects_CombFB_setDecay_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_setDecay(effects_CombFB__ctx_type_0 &_ctx, fix16_t newDecay){
   _ctx.decay = fix_clip(newDecay,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.scale = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + _ctx.decay));
}

typedef effects_CombFB__ctx_type_0 effects_CombFB_getMaxDelay_type;

static_inline void effects_CombFB_getMaxDelay_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline int effects_CombFB_getMaxDelay(effects_CombFB__ctx_type_0 &_ctx){
   return 2048;
};

typedef effects_CombFB__ctx_type_0 effects_CombFB_getMaxDelayms_type;

static_inline void effects_CombFB_getMaxDelayms_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t effects_CombFB_getMaxDelayms(effects_CombFB__ctx_type_0 &_ctx){
   if(_ctx.fs <= 0x0 /* 0.000000 */){
      return 0x0 /* 0.000000 */;
   }
   return fix_div(0x8000000 /* 2048.000000 */,_ctx.fs);
}

typedef effects_CombFB__ctx_type_0 effects_CombFB_setDelay_type;

static_inline void effects_CombFB_setDelay_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_setDelay(effects_CombFB__ctx_type_0 &_ctx, int newDelay){
   _ctx.delay = int_clip(newDelay,0,effects_CombFB_getMaxDelay(_ctx));
   _ctx.pos = 0;
}

typedef effects_CombFB__ctx_type_0 effects_CombFB_setDelayms_type;

static_inline void effects_CombFB_setDelayms_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_setDelayms(effects_CombFB__ctx_type_0 &_ctx, fix16_t delayms){
   effects_CombFB_setDelay(_ctx,fix_to_int(fix_mul(_ctx.fs,delayms)));
};

typedef effects_CombFB__ctx_type_0 effects_CombFB_setSamplerate_type;

static_inline void effects_CombFB_setSamplerate_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_CombFB_setSamplerate(effects_CombFB__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
};

typedef effects_CombFB__ctx_type_0 effects_CombFB_default_type;

static_inline void effects_CombFB_default_init(effects_CombFB__ctx_type_0 &_output_){
   effects_CombFB__ctx_type_0_init(_output_);
   return ;
}

void effects_CombFB_default(effects_CombFB__ctx_type_0 &_ctx);

typedef struct effects_Allpass__ctx_type_0 {
   fix16_t scale;
   int pos;
   fix16_t fs;
   int delay;
   fix16_t decay;
   fix16_t buffer_o[256];
   fix16_t buffer_allpassed[2048];
   fix16_t buffer[2048];
} effects_Allpass__ctx_type_0;

typedef effects_Allpass__ctx_type_0 effects_Allpass_process_type;

void effects_Allpass__ctx_type_0_init(effects_Allpass__ctx_type_0 &_output_);

static_inline void effects_Allpass_process_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

fix16_t effects_Allpass_process(effects_Allpass__ctx_type_0 &_ctx, fix16_t sample);

typedef effects_Allpass__ctx_type_0 effects_Allpass_process_bufferTo_type;

static_inline void effects_Allpass_process_bufferTo_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

void effects_Allpass_process_bufferTo(effects_Allpass__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]);

typedef effects_Allpass__ctx_type_0 effects_Allpass_process_buffer_type;

static_inline void effects_Allpass_process_buffer_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_process_buffer(effects_Allpass__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256]){
   effects_Allpass_process_bufferTo(_ctx,nb,input,_ctx.buffer_o);
};

typedef effects_Allpass__ctx_type_0 effects_Allpass_getBuffer_type;

static_inline void effects_Allpass_getBuffer_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_getBuffer(effects_Allpass__ctx_type_0 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef effects_Allpass__ctx_type_0 effects_Allpass_copyTo_type;

static_inline void effects_Allpass_copyTo_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

void effects_Allpass_copyTo(effects_Allpass__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef effects_Allpass__ctx_type_0 effects_Allpass_setDecay_type;

static_inline void effects_Allpass_setDecay_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_setDecay(effects_Allpass__ctx_type_0 &_ctx, fix16_t newDecay){
   _ctx.decay = fix_clip(newDecay,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.scale = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + (_ctx.decay << 1)));
}

typedef effects_Allpass__ctx_type_0 effects_Allpass_getMaxDelay_type;

static_inline void effects_Allpass_getMaxDelay_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline int effects_Allpass_getMaxDelay(effects_Allpass__ctx_type_0 &_ctx){
   return 2048;
};

typedef effects_Allpass__ctx_type_0 effects_Allpass_getMaxDelayms_type;

static_inline void effects_Allpass_getMaxDelayms_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t effects_Allpass_getMaxDelayms(effects_Allpass__ctx_type_0 &_ctx){
   if(_ctx.fs <= 0x0 /* 0.000000 */){
      return 0x0 /* 0.000000 */;
   }
   return fix_div(0x8000000 /* 2048.000000 */,_ctx.fs);
}

typedef effects_Allpass__ctx_type_0 effects_Allpass_setDelay_type;

static_inline void effects_Allpass_setDelay_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_setDelay(effects_Allpass__ctx_type_0 &_ctx, int newDelay){
   _ctx.delay = int_clip(newDelay,0,effects_Allpass_getMaxDelay(_ctx));
   _ctx.pos = 0;
}

typedef effects_Allpass__ctx_type_0 effects_Allpass_setDelayms_type;

static_inline void effects_Allpass_setDelayms_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_setDelayms(effects_Allpass__ctx_type_0 &_ctx, fix16_t delayms){
   effects_Allpass_setDelay(_ctx,fix_to_int(fix_mul(_ctx.fs,delayms)));
};

typedef effects_Allpass__ctx_type_0 effects_Allpass_setSamplerate_type;

static_inline void effects_Allpass_setSamplerate_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Allpass_setSamplerate(effects_Allpass__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
};

typedef effects_Allpass__ctx_type_0 effects_Allpass_default_type;

static_inline void effects_Allpass_default_init(effects_Allpass__ctx_type_0 &_output_){
   effects_Allpass__ctx_type_0_init(_output_);
   return ;
}

void effects_Allpass_default(effects_Allpass__ctx_type_0 &_ctx);

typedef struct effects_Reverb__ctx_type_0 {
   fix16_t reverbtime;
   fix16_t fs;
   int comb3delay;
   effects_CombFB__ctx_type_0 comb3;
   int comb2delay;
   effects_CombFB__ctx_type_0 comb2;
   int comb1delay;
   effects_CombFB__ctx_type_0 comb1;
   int comb0delay;
   effects_CombFB__ctx_type_0 comb0;
   fix16_t buffer_o[256];
   fix16_t buffer_c3[256];
   fix16_t buffer_c2[256];
   fix16_t buffer_c1[256];
   fix16_t buffer_c0[256];
   fix16_t buffer_a1[256];
   fix16_t buffer_a0[256];
   effects_Allpass__ctx_type_0 allpass1;
   effects_Allpass__ctx_type_0 allpass0;
} effects_Reverb__ctx_type_0;

typedef effects_Reverb__ctx_type_0 effects_Reverb_process_type;

void effects_Reverb__ctx_type_0_init(effects_Reverb__ctx_type_0 &_output_);

static_inline void effects_Reverb_process_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t effects_Reverb_process(effects_Reverb__ctx_type_0 &_ctx, fix16_t sample){
   fix16_t combs_filter;
   combs_filter = ((effects_CombFB_process(_ctx.comb0,sample) + effects_CombFB_process(_ctx.comb1,sample) + effects_CombFB_process(_ctx.comb2,sample) + effects_CombFB_process(_ctx.comb3,sample)) >> 2);
   return effects_Allpass_process(_ctx.allpass1,effects_Allpass_process(_ctx.allpass0,combs_filter));
}

typedef effects_Reverb__ctx_type_0 effects_Reverb_process_bufferTo_type;

static_inline void effects_Reverb_process_bufferTo_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_process_bufferTo(effects_Reverb__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256], fix16_t (&oBuffer)[256]);

typedef effects_Reverb__ctx_type_0 effects_Reverb_process_buffer_type;

static_inline void effects_Reverb_process_buffer_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Reverb_process_buffer(effects_Reverb__ctx_type_0 &_ctx, int nb, fix16_t (&input)[256]){
   effects_Reverb_process_bufferTo(_ctx,nb,input,_ctx.buffer_o);
};

typedef effects_Reverb__ctx_type_0 effects_Reverb_setSamplerate_type;

static_inline void effects_Reverb_setSamplerate_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_setSamplerate(effects_Reverb__ctx_type_0 &_ctx, fix16_t newFs);

typedef effects_Reverb__ctx_type_0 effects_Reverb_setReverbTime_type;

static_inline void effects_Reverb_setReverbTime_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_setReverbTime(effects_Reverb__ctx_type_0 &_ctx, fix16_t newReverbtime);

typedef effects_Reverb__ctx_type_0 effects_Reverb_setDelayms_type;

static_inline void effects_Reverb_setDelayms_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_setDelayms(effects_Reverb__ctx_type_0 &_ctx, fix16_t delayms);

typedef effects_Reverb__ctx_type_0 effects_Reverb_getBuffer_type;

static_inline void effects_Reverb_getBuffer_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

static_inline void effects_Reverb_getBuffer(effects_Reverb__ctx_type_0 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef effects_Reverb__ctx_type_0 effects_Reverb_copyTo_type;

static_inline void effects_Reverb_copyTo_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_copyTo(effects_Reverb__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef effects_Reverb__ctx_type_0 effects_Reverb_default_type;

static_inline void effects_Reverb_default_init(effects_Reverb__ctx_type_0 &_output_){
   effects_Reverb__ctx_type_0_init(_output_);
   return ;
}

void effects_Reverb_default(effects_Reverb__ctx_type_0 &_ctx);



#endif // EFFECTS_H
