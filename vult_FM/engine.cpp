
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine.h"

void ADSR__ctx_type_0_init(ADSR__ctx_type_0 &_output_){
   ADSR__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.s = 0x0 /* 0.000000 */;
   _ctx.r_step = 0x0 /* 0.000000 */;
   _ctx.r = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.d_step = 0x0 /* 0.000000 */;
   _ctx.d = 0x0 /* 0.000000 */;
   _ctx.a_target = 0x0 /* 0.000000 */;
   _ctx.a_step = 0x0 /* 0.000000 */;
   _ctx.a = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst151);
   ADSR_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t ADSR_process(ADSR__ctx_type_0 &_ctx, fix16_t gate){
   fix16_t scale;
   scale = 0x3e80000 /* 1000.000000 */;
   fix16_t scale_i;
   scale_i = 0x41 /* 0.001000 */;
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.state = 1;
      _ctx.target = fix_mul(_ctx.a_target,scale);
      _ctx.step = _ctx.a_step;
   }
   if(_ctx.state == 0){
      _ctx.out = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.out = (_ctx.out + _ctx.step);
   }
   if(_ctx.state == 1){
      if(_ctx.out >= _ctx.target){
         _ctx.step = _ctx.d_step;
         _ctx.out = _ctx.target;
         _ctx.target = fix_mul(_ctx.s,scale);
         _ctx.state = 2;
      }
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
      if(_ctx.out <= _ctx.target){
         _ctx.out = _ctx.target;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.state = 3;
      }
   }
   if(_ctx.state == 3){
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 4){
      if(_ctx.out <= 0x0 /* 0.000000 */){
         _ctx.out = 0x0 /* 0.000000 */;
         _ctx.state = 0;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.target = 0x0 /* 0.000000 */;
      }
   }
   return fix_clip(fix_mul(_ctx.out,scale_i),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
}

void ADSR_updateSteps(ADSR__ctx_type_0 &_ctx){
   fix16_t min_t;
   min_t = 0x28f /* 0.010000 */;
   _ctx.a_step = fix_div(_ctx.a_target,fix_mul(_ctx.fs,(_ctx.a + min_t)));
   _ctx.d_step = fix_div((_ctx.s + (- _ctx.a_target)),fix_mul(_ctx.fs,(_ctx.d + min_t)));
   _ctx.r_step = fix_div((- _ctx.s),fix_mul(_ctx.fs,(_ctx.r + min_t)));
}

void ADSR_config(ADSR__ctx_type_0 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR){
   fix16_t max_t;
   max_t = 0x3c0000 /* 60.000000 */;
   _ctx.a = fix_clip(newA,0x0 /* 0.000000 */,max_t);
   _ctx.d = fix_clip(newD,0x0 /* 0.000000 */,max_t);
   _ctx.s = fix_clip(newS,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.r = fix_clip(newR,0x0 /* 0.000000 */,max_t);
   ADSR_updateSteps(_ctx);
}

void OSC__ctx_type_2_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2 _ctx;
   _ctx.wavetable = 0;
   _ctx.stepRatio = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   OSC_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t OSC_get_sample(OSC__ctx_type_2 &_ctx, int index){
   fix16_t sample;
   sample = 0x0 /* 0.000000 */;
   if(_ctx.wavetable == 0){
      sample = OSC_sin_wave(0,index);
   }
   return sample;
}

int OSC_getSize(OSC__ctx_type_2 &_ctx){
   int size;
   size = 0;
   if(_ctx.wavetable == 0){
      size = OSC_sin_wave_samples();
   }
   return size;
}

fix16_t OSC_process(OSC__ctx_type_2 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   fix16_t size;
   size = int_to_fix(OSC_getSize(_ctx));
   if(_ctx.phase > size){
      _ctx.phase = (_ctx.phase + (- size));
   }
   return OSC_sin_wave(0,fix_to_int((_ctx.phase + _ctx.phase_base)));
}

void OSC_setSamplerate(OSC__ctx_type_2 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
      _ctx.stepRatio = fix_div(int_to_fix(OSC_getSize(_ctx)),_ctx.fs);
   }
   OSC_updateStep(_ctx);
}

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0 _ctx;
   bool_init_array(128,false,_ctx.notes);
   _ctx.nb_notes = 0;
   _ctx.n = 0;
   ADSR__ctx_type_0_init(_ctx.modulatoradsr);
   _ctx.modulator_env = 0x0 /* 0.000000 */;
   _ctx.modulatorRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.modulator);
   int_init_array(128,0,_ctx.last_notes);
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.env_decimation_factor = 0;
   ADSR__ctx_type_0_init(_ctx.carrieradsr);
   _ctx.carrier_half_phase = 0x0 /* 0.000000 */;
   _ctx.carrier_env = 0x0 /* 0.000000 */;
   _ctx.carrierRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.carrier);
   Engine_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Engine_process(Engine__ctx_type_0 &_ctx){
   fix16_t gate;
   if(_ctx.nb_notes > 0){
      gate = 0x10000 /* 1.000000 */;
   }
   else
   {
      gate = 0x0 /* 0.000000 */;
   }
   _ctx.n = (1 + _ctx.n);
   uint8_t update_env;
   update_env = true;
   if(_ctx.env_decimation_factor > 0){
      update_env = ((_ctx.n % _ctx.env_decimation_factor) == 0);
   }
   fix16_t carrier_val;
   carrier_val = 0x0 /* 0.000000 */;
   if(update_env){
      _ctx.carrier_env = ADSR_process(_ctx.carrieradsr,gate);
   }
   if(_ctx.carrier_env > 0x0 /* 0.000000 */){
      if(update_env){
         _ctx.modulator_env = ADSR_process(_ctx.modulatoradsr,gate);
      }
      fix16_t carrier_phase;
      carrier_phase = 0x0 /* 0.000000 */;
      if(_ctx.modulator_env > 0x0 /* 0.000000 */){
         fix16_t modulator_val;
         modulator_val = fix_mul(_ctx.modulator_env,(0x10000 /* 1.000000 */ + OSC_process(_ctx.modulator)));
         carrier_phase = fix_mul(_ctx.carrier_half_phase,modulator_val);
      }
      OSC_setPhase(_ctx.carrier,carrier_phase);
      carrier_val = fix_mul(_ctx.carrier_env,OSC_process(_ctx.carrier));
   }
   return carrier_val;
}

void Engine_setSamplerate(Engine__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   OSC_setSamplerate(_ctx.carrier,_ctx.fs);
   OSC_setSamplerate(_ctx.modulator,_ctx.fs);
   fix16_t ADSR_fs;
   ADSR_fs = _ctx.fs;
   if(_ctx.env_decimation_factor > 0){
      ADSR_fs = fix_div(_ctx.fs,int_to_fix(_ctx.env_decimation_factor));
   }
   ADSR_setSamplerate(_ctx.carrieradsr,ADSR_fs);
   ADSR_setSamplerate(_ctx.modulatoradsr,ADSR_fs);
}

void Engine_noteOn(Engine__ctx_type_0 &_ctx, int note, int velocity, int channel){
   note = int_clip(note,0,127);
   Engine_setFrequency(_ctx,Util_noteToFrequency(note));
   if(bool_not(_ctx.notes[note])){
      _ctx.notes[note] = true;
      _ctx.nb_notes = (1 + _ctx.nb_notes);
      if(_ctx.nb_notes > 128){
         _ctx.nb_notes = 128;
      }
      _ctx.last_notes[((-1) + _ctx.nb_notes)] = (1 + note);
   }
}

void Engine_noteOff(Engine__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   if(_ctx.notes[note]){
      _ctx.notes[note] = false;
      _ctx.last_notes[((-1) + _ctx.nb_notes)] = 0;
      _ctx.nb_notes = ((-1) + _ctx.nb_notes);
      if(_ctx.nb_notes < 0){
         _ctx.nb_notes = 0;
      }
      else
      {
         if(_ctx.nb_notes > 0){
            int last_played;
            last_played = _ctx.last_notes[((-1) + _ctx.nb_notes)];
            if(last_played > 0){
               Engine_setFrequency(_ctx,Util_noteToFrequency(((-1) + last_played)));
            }
         }
      }
   }
}

void Engine_default(Engine__ctx_type_0 &_ctx){
   _ctx.env_decimation_factor = 3;
   OSC_default(_ctx.carrier);
   OSC_default(_ctx.modulator);
   ADSR_default(_ctx.carrieradsr);
   ADSR_default(_ctx.modulatoradsr);
   Engine_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Engine_setCarrierRatio(_ctx,0x10000 /* 1.000000 */);
   Engine_setModulatorRatio(_ctx,0x20000 /* 2.000000 */);
   Engine_setModulatorLevel(_ctx,0x1999 /* 0.100000 */);
   Engine_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}


