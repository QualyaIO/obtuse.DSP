
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine.h"

void OSC__ctx_type_2_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2 _ctx;
   _ctx.wavetable = 0;
   _ctx.stepRatio = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   OSC_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t OSC_process(OSC__ctx_type_2 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   fix16_t size;
   size = int_to_fix(OSC_getSize(_ctx));
   if(_ctx.phase > size){
      _ctx.phase = (_ctx.phase + (- size));
   }
   return OSC_sin_wave(0,fix_to_int((_ctx.phase + _ctx.phase_base)));
}

void OSC_setSamplerate(OSC__ctx_type_2 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
      _ctx.stepRatio = fix_div(int_to_fix(OSC_getSize(_ctx)),_ctx.fs);
   }
   OSC_updateStep(_ctx);
}

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0 _ctx;
   _ctx.modulatorRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.modulator);
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.carrier_half_phase = 0x0 /* 0.000000 */;
   _ctx.carrierRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.carrier);
   Engine_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Engine_process(Engine__ctx_type_0 &_ctx){
   fix16_t carrier_phase;
   carrier_phase = fix_mul(_ctx.carrier_half_phase,(0x10000 /* 1.000000 */ + OSC_process(_ctx.modulator)));
   OSC_setPhase(_ctx.carrier,carrier_phase);
   fix16_t c;
   c = OSC_process(_ctx.carrier);
   return c;
}

void Engine_default(Engine__ctx_type_0 &_ctx){
   Engine_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Engine_setCarrierRatio(_ctx,0x10000 /* 1.000000 */);
   Engine_setModulatorRatio(_ctx,0x20000 /* 2.000000 */);
   Engine_setModulatorLevel(_ctx,0x1999 /* 0.100000 */);
   Engine_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}


