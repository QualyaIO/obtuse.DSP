
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine.h"

void Reverb__ctx_type_0_init(Reverb__ctx_type_0 &_output_){
   Reverb__ctx_type_0 _ctx;
   _ctx.pos = 0;
   _ctx.decay = 0x0 /* 0.000000 */;
   ;
   _output_ = _ctx;
   return ;
}

fix16_t Reverb_process(Reverb__ctx_type_0 &_ctx, fix16_t sample){
   _ctx.decay = 0x6666 /* 0.400000 */;
   int next_pos;
   next_pos = ((_ctx.pos + (40000 / 2)) % 40000);
   _ctx.buffer[next_pos] = (fix_mul(_ctx.decay,_ctx.buffer[_ctx.pos]) + fix_mul(sample,(0x10000 /* 1.000000 */ + (- _ctx.decay))));
   fix16_t ret;
   ret = _ctx.buffer[_ctx.pos];
   _ctx.pos = (1 + _ctx.pos);
   _ctx.pos = (_ctx.pos % 40000);
   return ret;
}

void Notes__ctx_type_0_init(Notes__ctx_type_0 &_output_){
   Notes__ctx_type_0 _ctx;
   int_init_array(128,0,_ctx.notes);
   _ctx.nb_notes = 0;
   int_init_array(128,0,_ctx.last_notes);
   Notes_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Notes_noteOn(Notes__ctx_type_0 &_ctx, int note, int velocity, int channel){
   note = int_clip(note,0,127);
   if(_ctx.notes[note] <= 0){
      _ctx.nb_notes = (1 + _ctx.nb_notes);
      if(_ctx.nb_notes > 128){
         _ctx.nb_notes = 128;
      }
      _ctx.notes[note] = _ctx.nb_notes;
      _ctx.last_notes[((-1) + _ctx.nb_notes)] = (1 + note);
   }
}

void Notes_noteOff(Notes__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   if(_ctx.notes[note] > 0){
      int i;
      i = ((-1) + _ctx.notes[note]);
      while(i < _ctx.nb_notes){
         _ctx.last_notes[i] = _ctx.last_notes[(1 + i)];
         _ctx.notes[((-1) + _ctx.last_notes[i])] = (1 + i);
         i = (1 + i);
      }
      _ctx.notes[note] = 0;
      _ctx.nb_notes = ((-1) + _ctx.nb_notes);
      if(_ctx.nb_notes < 0){
         _ctx.nb_notes = 0;
      }
   }
}

int Notes_lastNote(Notes__ctx_type_0 &_ctx){
   int last_played;
   last_played = 0;
   if(_ctx.nb_notes > 0){
      last_played = _ctx.last_notes[((-1) + _ctx.nb_notes)];
   }
   return last_played;
}

void ADSR__ctx_type_0_init(ADSR__ctx_type_0 &_output_){
   ADSR__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.s = 0x0 /* 0.000000 */;
   _ctx.r_step = 0x0 /* 0.000000 */;
   _ctx.r = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.d_step = 0x0 /* 0.000000 */;
   _ctx.d = 0x0 /* 0.000000 */;
   _ctx.a_target = 0x0 /* 0.000000 */;
   _ctx.a_step = 0x0 /* 0.000000 */;
   _ctx.a = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst151);
   ADSR_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t ADSR_process(ADSR__ctx_type_0 &_ctx, uint8_t bgate){
   fix16_t scale;
   scale = 0x3e80000 /* 1000.000000 */;
   fix16_t scale_i;
   scale_i = 0x41 /* 0.001000 */;
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.state = 1;
      _ctx.target = fix_mul(_ctx.a_target,scale);
      _ctx.step = _ctx.a_step;
   }
   if(_ctx.state == 0){
      _ctx.out = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.out = (_ctx.out + _ctx.step);
   }
   if(_ctx.state == 1){
      if(_ctx.out >= _ctx.target){
         _ctx.step = _ctx.d_step;
         _ctx.out = _ctx.target;
         _ctx.target = fix_mul(_ctx.s,scale);
         _ctx.state = 2;
      }
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
      if(_ctx.out <= _ctx.target){
         _ctx.out = _ctx.target;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.state = 3;
      }
   }
   if(_ctx.state == 3){
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 4){
      if(_ctx.out <= 0x0 /* 0.000000 */){
         _ctx.out = 0x0 /* 0.000000 */;
         _ctx.state = 0;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.target = 0x0 /* 0.000000 */;
      }
   }
   return fix_clip(fix_mul(_ctx.out,scale_i),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
}

void ADSR_updateSteps(ADSR__ctx_type_0 &_ctx){
   fix16_t min_t;
   min_t = 0x28f /* 0.010000 */;
   _ctx.a_step = fix_div(_ctx.a_target,fix_mul(_ctx.fs,(_ctx.a + min_t)));
   _ctx.d_step = fix_div((_ctx.s + (- _ctx.a_target)),fix_mul(_ctx.fs,(_ctx.d + min_t)));
   _ctx.r_step = fix_div((- _ctx.s),fix_mul(_ctx.fs,(_ctx.r + min_t)));
}

void ADSR_config(ADSR__ctx_type_0 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR){
   fix16_t max_t;
   max_t = 0x3c0000 /* 60.000000 */;
   _ctx.a = fix_clip(newA,0x0 /* 0.000000 */,max_t);
   _ctx.d = fix_clip(newD,0x0 /* 0.000000 */,max_t);
   _ctx.s = fix_clip(newS,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.r = fix_clip(newR,0x0 /* 0.000000 */,max_t);
   ADSR_updateSteps(_ctx);
}

void OSC__ctx_type_2_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2 _ctx;
   _ctx.wavetable = 0;
   _ctx.stepRatio = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   fix_init_array(256,0x0 /* 0.000000 */,_ctx.buffer);
   OSC_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t OSC_get_sample(OSC__ctx_type_2 &_ctx, int index){
   fix16_t sample;
   sample = 0x0 /* 0.000000 */;
   if(_ctx.wavetable == 0){
      sample = OSC_sin_wave(0,index);
   }
   return sample;
}

int OSC_getSize(OSC__ctx_type_2 &_ctx){
   int size;
   size = 0;
   if(_ctx.wavetable == 0){
      size = OSC_sin_wave_samples();
   }
   return size;
}

void OSC_process_buffer(OSC__ctx_type_2 &_ctx, int nb){
   nb = int_clip(nb,0,256);
   if(nb == 0){
      nb = 256;
   }
   fix16_t size;
   size = int_to_fix(OSC_getSize(_ctx));
   int i;
   i = 0;
   while(i < nb){
      _ctx.phase = (_ctx.phase + _ctx.step);
      if(_ctx.phase > size){
         _ctx.phase = (_ctx.phase + (- size));
      }
      _ctx.buffer[i] = OSC_sin_wave(0,fix_to_int((_ctx.phase + _ctx.phase_base)));
      i = (1 + i);
   }
}

void OSC_setSamplerate(OSC__ctx_type_2 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
      _ctx.stepRatio = fix_div(int_to_fix(OSC_getSize(_ctx)),_ctx.fs);
   }
   OSC_updateStep(_ctx);
}

void OSC_default(OSC__ctx_type_2 &_ctx){
   {
      _ctx.buffer[0] = 0x0 /* 0.000000 */;
      _ctx.buffer[1] = 0x0 /* 0.000000 */;
      _ctx.buffer[2] = 0x0 /* 0.000000 */;
      _ctx.buffer[3] = 0x0 /* 0.000000 */;
      _ctx.buffer[4] = 0x0 /* 0.000000 */;
      _ctx.buffer[5] = 0x0 /* 0.000000 */;
      _ctx.buffer[6] = 0x0 /* 0.000000 */;
      _ctx.buffer[7] = 0x0 /* 0.000000 */;
      _ctx.buffer[8] = 0x0 /* 0.000000 */;
      _ctx.buffer[9] = 0x0 /* 0.000000 */;
      _ctx.buffer[10] = 0x0 /* 0.000000 */;
      _ctx.buffer[11] = 0x0 /* 0.000000 */;
      _ctx.buffer[12] = 0x0 /* 0.000000 */;
      _ctx.buffer[13] = 0x0 /* 0.000000 */;
      _ctx.buffer[14] = 0x0 /* 0.000000 */;
      _ctx.buffer[15] = 0x0 /* 0.000000 */;
      _ctx.buffer[16] = 0x0 /* 0.000000 */;
      _ctx.buffer[17] = 0x0 /* 0.000000 */;
      _ctx.buffer[18] = 0x0 /* 0.000000 */;
      _ctx.buffer[19] = 0x0 /* 0.000000 */;
      _ctx.buffer[20] = 0x0 /* 0.000000 */;
      _ctx.buffer[21] = 0x0 /* 0.000000 */;
      _ctx.buffer[22] = 0x0 /* 0.000000 */;
      _ctx.buffer[23] = 0x0 /* 0.000000 */;
      _ctx.buffer[24] = 0x0 /* 0.000000 */;
      _ctx.buffer[25] = 0x0 /* 0.000000 */;
      _ctx.buffer[26] = 0x0 /* 0.000000 */;
      _ctx.buffer[27] = 0x0 /* 0.000000 */;
      _ctx.buffer[28] = 0x0 /* 0.000000 */;
      _ctx.buffer[29] = 0x0 /* 0.000000 */;
      _ctx.buffer[30] = 0x0 /* 0.000000 */;
      _ctx.buffer[31] = 0x0 /* 0.000000 */;
      _ctx.buffer[32] = 0x0 /* 0.000000 */;
      _ctx.buffer[33] = 0x0 /* 0.000000 */;
      _ctx.buffer[34] = 0x0 /* 0.000000 */;
      _ctx.buffer[35] = 0x0 /* 0.000000 */;
      _ctx.buffer[36] = 0x0 /* 0.000000 */;
      _ctx.buffer[37] = 0x0 /* 0.000000 */;
      _ctx.buffer[38] = 0x0 /* 0.000000 */;
      _ctx.buffer[39] = 0x0 /* 0.000000 */;
      _ctx.buffer[40] = 0x0 /* 0.000000 */;
      _ctx.buffer[41] = 0x0 /* 0.000000 */;
      _ctx.buffer[42] = 0x0 /* 0.000000 */;
      _ctx.buffer[43] = 0x0 /* 0.000000 */;
      _ctx.buffer[44] = 0x0 /* 0.000000 */;
      _ctx.buffer[45] = 0x0 /* 0.000000 */;
      _ctx.buffer[46] = 0x0 /* 0.000000 */;
      _ctx.buffer[47] = 0x0 /* 0.000000 */;
      _ctx.buffer[48] = 0x0 /* 0.000000 */;
      _ctx.buffer[49] = 0x0 /* 0.000000 */;
      _ctx.buffer[50] = 0x0 /* 0.000000 */;
      _ctx.buffer[51] = 0x0 /* 0.000000 */;
      _ctx.buffer[52] = 0x0 /* 0.000000 */;
      _ctx.buffer[53] = 0x0 /* 0.000000 */;
      _ctx.buffer[54] = 0x0 /* 0.000000 */;
      _ctx.buffer[55] = 0x0 /* 0.000000 */;
      _ctx.buffer[56] = 0x0 /* 0.000000 */;
      _ctx.buffer[57] = 0x0 /* 0.000000 */;
      _ctx.buffer[58] = 0x0 /* 0.000000 */;
      _ctx.buffer[59] = 0x0 /* 0.000000 */;
      _ctx.buffer[60] = 0x0 /* 0.000000 */;
      _ctx.buffer[61] = 0x0 /* 0.000000 */;
      _ctx.buffer[62] = 0x0 /* 0.000000 */;
      _ctx.buffer[63] = 0x0 /* 0.000000 */;
      _ctx.buffer[64] = 0x0 /* 0.000000 */;
      _ctx.buffer[65] = 0x0 /* 0.000000 */;
      _ctx.buffer[66] = 0x0 /* 0.000000 */;
      _ctx.buffer[67] = 0x0 /* 0.000000 */;
      _ctx.buffer[68] = 0x0 /* 0.000000 */;
      _ctx.buffer[69] = 0x0 /* 0.000000 */;
      _ctx.buffer[70] = 0x0 /* 0.000000 */;
      _ctx.buffer[71] = 0x0 /* 0.000000 */;
      _ctx.buffer[72] = 0x0 /* 0.000000 */;
      _ctx.buffer[73] = 0x0 /* 0.000000 */;
      _ctx.buffer[74] = 0x0 /* 0.000000 */;
      _ctx.buffer[75] = 0x0 /* 0.000000 */;
      _ctx.buffer[76] = 0x0 /* 0.000000 */;
      _ctx.buffer[77] = 0x0 /* 0.000000 */;
      _ctx.buffer[78] = 0x0 /* 0.000000 */;
      _ctx.buffer[79] = 0x0 /* 0.000000 */;
      _ctx.buffer[80] = 0x0 /* 0.000000 */;
      _ctx.buffer[81] = 0x0 /* 0.000000 */;
      _ctx.buffer[82] = 0x0 /* 0.000000 */;
      _ctx.buffer[83] = 0x0 /* 0.000000 */;
      _ctx.buffer[84] = 0x0 /* 0.000000 */;
      _ctx.buffer[85] = 0x0 /* 0.000000 */;
      _ctx.buffer[86] = 0x0 /* 0.000000 */;
      _ctx.buffer[87] = 0x0 /* 0.000000 */;
      _ctx.buffer[88] = 0x0 /* 0.000000 */;
      _ctx.buffer[89] = 0x0 /* 0.000000 */;
      _ctx.buffer[90] = 0x0 /* 0.000000 */;
      _ctx.buffer[91] = 0x0 /* 0.000000 */;
      _ctx.buffer[92] = 0x0 /* 0.000000 */;
      _ctx.buffer[93] = 0x0 /* 0.000000 */;
      _ctx.buffer[94] = 0x0 /* 0.000000 */;
      _ctx.buffer[95] = 0x0 /* 0.000000 */;
      _ctx.buffer[96] = 0x0 /* 0.000000 */;
      _ctx.buffer[97] = 0x0 /* 0.000000 */;
      _ctx.buffer[98] = 0x0 /* 0.000000 */;
      _ctx.buffer[99] = 0x0 /* 0.000000 */;
      _ctx.buffer[100] = 0x0 /* 0.000000 */;
      _ctx.buffer[101] = 0x0 /* 0.000000 */;
      _ctx.buffer[102] = 0x0 /* 0.000000 */;
      _ctx.buffer[103] = 0x0 /* 0.000000 */;
      _ctx.buffer[104] = 0x0 /* 0.000000 */;
      _ctx.buffer[105] = 0x0 /* 0.000000 */;
      _ctx.buffer[106] = 0x0 /* 0.000000 */;
      _ctx.buffer[107] = 0x0 /* 0.000000 */;
      _ctx.buffer[108] = 0x0 /* 0.000000 */;
      _ctx.buffer[109] = 0x0 /* 0.000000 */;
      _ctx.buffer[110] = 0x0 /* 0.000000 */;
      _ctx.buffer[111] = 0x0 /* 0.000000 */;
      _ctx.buffer[112] = 0x0 /* 0.000000 */;
      _ctx.buffer[113] = 0x0 /* 0.000000 */;
      _ctx.buffer[114] = 0x0 /* 0.000000 */;
      _ctx.buffer[115] = 0x0 /* 0.000000 */;
      _ctx.buffer[116] = 0x0 /* 0.000000 */;
      _ctx.buffer[117] = 0x0 /* 0.000000 */;
      _ctx.buffer[118] = 0x0 /* 0.000000 */;
      _ctx.buffer[119] = 0x0 /* 0.000000 */;
      _ctx.buffer[120] = 0x0 /* 0.000000 */;
      _ctx.buffer[121] = 0x0 /* 0.000000 */;
      _ctx.buffer[122] = 0x0 /* 0.000000 */;
      _ctx.buffer[123] = 0x0 /* 0.000000 */;
      _ctx.buffer[124] = 0x0 /* 0.000000 */;
      _ctx.buffer[125] = 0x0 /* 0.000000 */;
      _ctx.buffer[126] = 0x0 /* 0.000000 */;
      _ctx.buffer[127] = 0x0 /* 0.000000 */;
      _ctx.buffer[128] = 0x0 /* 0.000000 */;
      _ctx.buffer[129] = 0x0 /* 0.000000 */;
      _ctx.buffer[130] = 0x0 /* 0.000000 */;
      _ctx.buffer[131] = 0x0 /* 0.000000 */;
      _ctx.buffer[132] = 0x0 /* 0.000000 */;
      _ctx.buffer[133] = 0x0 /* 0.000000 */;
      _ctx.buffer[134] = 0x0 /* 0.000000 */;
      _ctx.buffer[135] = 0x0 /* 0.000000 */;
      _ctx.buffer[136] = 0x0 /* 0.000000 */;
      _ctx.buffer[137] = 0x0 /* 0.000000 */;
      _ctx.buffer[138] = 0x0 /* 0.000000 */;
      _ctx.buffer[139] = 0x0 /* 0.000000 */;
      _ctx.buffer[140] = 0x0 /* 0.000000 */;
      _ctx.buffer[141] = 0x0 /* 0.000000 */;
      _ctx.buffer[142] = 0x0 /* 0.000000 */;
      _ctx.buffer[143] = 0x0 /* 0.000000 */;
      _ctx.buffer[144] = 0x0 /* 0.000000 */;
      _ctx.buffer[145] = 0x0 /* 0.000000 */;
      _ctx.buffer[146] = 0x0 /* 0.000000 */;
      _ctx.buffer[147] = 0x0 /* 0.000000 */;
      _ctx.buffer[148] = 0x0 /* 0.000000 */;
      _ctx.buffer[149] = 0x0 /* 0.000000 */;
      _ctx.buffer[150] = 0x0 /* 0.000000 */;
      _ctx.buffer[151] = 0x0 /* 0.000000 */;
      _ctx.buffer[152] = 0x0 /* 0.000000 */;
      _ctx.buffer[153] = 0x0 /* 0.000000 */;
      _ctx.buffer[154] = 0x0 /* 0.000000 */;
      _ctx.buffer[155] = 0x0 /* 0.000000 */;
      _ctx.buffer[156] = 0x0 /* 0.000000 */;
      _ctx.buffer[157] = 0x0 /* 0.000000 */;
      _ctx.buffer[158] = 0x0 /* 0.000000 */;
      _ctx.buffer[159] = 0x0 /* 0.000000 */;
      _ctx.buffer[160] = 0x0 /* 0.000000 */;
      _ctx.buffer[161] = 0x0 /* 0.000000 */;
      _ctx.buffer[162] = 0x0 /* 0.000000 */;
      _ctx.buffer[163] = 0x0 /* 0.000000 */;
      _ctx.buffer[164] = 0x0 /* 0.000000 */;
      _ctx.buffer[165] = 0x0 /* 0.000000 */;
      _ctx.buffer[166] = 0x0 /* 0.000000 */;
      _ctx.buffer[167] = 0x0 /* 0.000000 */;
      _ctx.buffer[168] = 0x0 /* 0.000000 */;
      _ctx.buffer[169] = 0x0 /* 0.000000 */;
      _ctx.buffer[170] = 0x0 /* 0.000000 */;
      _ctx.buffer[171] = 0x0 /* 0.000000 */;
      _ctx.buffer[172] = 0x0 /* 0.000000 */;
      _ctx.buffer[173] = 0x0 /* 0.000000 */;
      _ctx.buffer[174] = 0x0 /* 0.000000 */;
      _ctx.buffer[175] = 0x0 /* 0.000000 */;
      _ctx.buffer[176] = 0x0 /* 0.000000 */;
      _ctx.buffer[177] = 0x0 /* 0.000000 */;
      _ctx.buffer[178] = 0x0 /* 0.000000 */;
      _ctx.buffer[179] = 0x0 /* 0.000000 */;
      _ctx.buffer[180] = 0x0 /* 0.000000 */;
      _ctx.buffer[181] = 0x0 /* 0.000000 */;
      _ctx.buffer[182] = 0x0 /* 0.000000 */;
      _ctx.buffer[183] = 0x0 /* 0.000000 */;
      _ctx.buffer[184] = 0x0 /* 0.000000 */;
      _ctx.buffer[185] = 0x0 /* 0.000000 */;
      _ctx.buffer[186] = 0x0 /* 0.000000 */;
      _ctx.buffer[187] = 0x0 /* 0.000000 */;
      _ctx.buffer[188] = 0x0 /* 0.000000 */;
      _ctx.buffer[189] = 0x0 /* 0.000000 */;
      _ctx.buffer[190] = 0x0 /* 0.000000 */;
      _ctx.buffer[191] = 0x0 /* 0.000000 */;
      _ctx.buffer[192] = 0x0 /* 0.000000 */;
      _ctx.buffer[193] = 0x0 /* 0.000000 */;
      _ctx.buffer[194] = 0x0 /* 0.000000 */;
      _ctx.buffer[195] = 0x0 /* 0.000000 */;
      _ctx.buffer[196] = 0x0 /* 0.000000 */;
      _ctx.buffer[197] = 0x0 /* 0.000000 */;
      _ctx.buffer[198] = 0x0 /* 0.000000 */;
      _ctx.buffer[199] = 0x0 /* 0.000000 */;
      _ctx.buffer[200] = 0x0 /* 0.000000 */;
      _ctx.buffer[201] = 0x0 /* 0.000000 */;
      _ctx.buffer[202] = 0x0 /* 0.000000 */;
      _ctx.buffer[203] = 0x0 /* 0.000000 */;
      _ctx.buffer[204] = 0x0 /* 0.000000 */;
      _ctx.buffer[205] = 0x0 /* 0.000000 */;
      _ctx.buffer[206] = 0x0 /* 0.000000 */;
      _ctx.buffer[207] = 0x0 /* 0.000000 */;
      _ctx.buffer[208] = 0x0 /* 0.000000 */;
      _ctx.buffer[209] = 0x0 /* 0.000000 */;
      _ctx.buffer[210] = 0x0 /* 0.000000 */;
      _ctx.buffer[211] = 0x0 /* 0.000000 */;
      _ctx.buffer[212] = 0x0 /* 0.000000 */;
      _ctx.buffer[213] = 0x0 /* 0.000000 */;
      _ctx.buffer[214] = 0x0 /* 0.000000 */;
      _ctx.buffer[215] = 0x0 /* 0.000000 */;
      _ctx.buffer[216] = 0x0 /* 0.000000 */;
      _ctx.buffer[217] = 0x0 /* 0.000000 */;
      _ctx.buffer[218] = 0x0 /* 0.000000 */;
      _ctx.buffer[219] = 0x0 /* 0.000000 */;
      _ctx.buffer[220] = 0x0 /* 0.000000 */;
      _ctx.buffer[221] = 0x0 /* 0.000000 */;
      _ctx.buffer[222] = 0x0 /* 0.000000 */;
      _ctx.buffer[223] = 0x0 /* 0.000000 */;
      _ctx.buffer[224] = 0x0 /* 0.000000 */;
      _ctx.buffer[225] = 0x0 /* 0.000000 */;
      _ctx.buffer[226] = 0x0 /* 0.000000 */;
      _ctx.buffer[227] = 0x0 /* 0.000000 */;
      _ctx.buffer[228] = 0x0 /* 0.000000 */;
      _ctx.buffer[229] = 0x0 /* 0.000000 */;
      _ctx.buffer[230] = 0x0 /* 0.000000 */;
      _ctx.buffer[231] = 0x0 /* 0.000000 */;
      _ctx.buffer[232] = 0x0 /* 0.000000 */;
      _ctx.buffer[233] = 0x0 /* 0.000000 */;
      _ctx.buffer[234] = 0x0 /* 0.000000 */;
      _ctx.buffer[235] = 0x0 /* 0.000000 */;
      _ctx.buffer[236] = 0x0 /* 0.000000 */;
      _ctx.buffer[237] = 0x0 /* 0.000000 */;
      _ctx.buffer[238] = 0x0 /* 0.000000 */;
      _ctx.buffer[239] = 0x0 /* 0.000000 */;
      _ctx.buffer[240] = 0x0 /* 0.000000 */;
      _ctx.buffer[241] = 0x0 /* 0.000000 */;
      _ctx.buffer[242] = 0x0 /* 0.000000 */;
      _ctx.buffer[243] = 0x0 /* 0.000000 */;
      _ctx.buffer[244] = 0x0 /* 0.000000 */;
      _ctx.buffer[245] = 0x0 /* 0.000000 */;
      _ctx.buffer[246] = 0x0 /* 0.000000 */;
      _ctx.buffer[247] = 0x0 /* 0.000000 */;
      _ctx.buffer[248] = 0x0 /* 0.000000 */;
      _ctx.buffer[249] = 0x0 /* 0.000000 */;
      _ctx.buffer[250] = 0x0 /* 0.000000 */;
      _ctx.buffer[251] = 0x0 /* 0.000000 */;
      _ctx.buffer[252] = 0x0 /* 0.000000 */;
      _ctx.buffer[253] = 0x0 /* 0.000000 */;
      _ctx.buffer[254] = 0x0 /* 0.000000 */;
      _ctx.buffer[255] = 0x0 /* 0.000000 */;
   }
   OSC_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   OSC_setWavetable(_ctx,0);
   OSC_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0 _ctx;
   Notes__ctx_type_0_init(_ctx.playingnotes);
   _ctx.n = 0;
   ADSR__ctx_type_0_init(_ctx.modulatoradsr);
   _ctx.modulator_env = 0x0 /* 0.000000 */;
   _ctx.modulatorRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.modulator);
   _ctx.gate = false;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.env_decimation_factor = 0;
   ADSR__ctx_type_0_init(_ctx.carrieradsr);
   _ctx.carrier_half_phase = 0x0 /* 0.000000 */;
   _ctx.carrier_env = 0x0 /* 0.000000 */;
   _ctx.carrierRatio = 0x0 /* 0.000000 */;
   OSC__ctx_type_2_init(_ctx.carrier);
   Engine_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Engine_process(Engine__ctx_type_0 &_ctx){
   _ctx.n = (1 + _ctx.n);
   uint8_t update_env;
   update_env = true;
   if(_ctx.env_decimation_factor > 0){
      update_env = ((_ctx.n % _ctx.env_decimation_factor) == 0);
   }
   fix16_t carrier_val;
   carrier_val = 0x0 /* 0.000000 */;
   if(update_env){
      _ctx.carrier_env = ADSR_process(_ctx.carrieradsr,_ctx.gate);
   }
   if(_ctx.carrier_env > 0x0 /* 0.000000 */){
      if(update_env){
         _ctx.modulator_env = ADSR_process(_ctx.modulatoradsr,_ctx.gate);
      }
      fix16_t carrier_phase;
      carrier_phase = 0x0 /* 0.000000 */;
      if(_ctx.modulator_env > 0x0 /* 0.000000 */){
         fix16_t modulator_val;
         modulator_val = fix_mul(_ctx.modulator_env,(0x10000 /* 1.000000 */ + OSC_process(_ctx.modulator)));
         carrier_phase = fix_mul(_ctx.carrier_half_phase,modulator_val);
      }
      OSC_setPhase(_ctx.carrier,carrier_phase);
      carrier_val = fix_mul(_ctx.carrier_env,OSC_process(_ctx.carrier));
   }
   return carrier_val;
}

void Engine_setSamplerate(Engine__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   OSC_setSamplerate(_ctx.carrier,_ctx.fs);
   OSC_setSamplerate(_ctx.modulator,_ctx.fs);
   fix16_t ADSR_fs;
   ADSR_fs = _ctx.fs;
   if(_ctx.env_decimation_factor > 0){
      ADSR_fs = fix_div(_ctx.fs,int_to_fix(_ctx.env_decimation_factor));
   }
   ADSR_setSamplerate(_ctx.carrieradsr,ADSR_fs);
   ADSR_setSamplerate(_ctx.modulatoradsr,ADSR_fs);
}

void Engine_noteOff(Engine__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   Notes_noteOff(_ctx.playingnotes,note,channel);
   if(Notes_nbNotes(_ctx.playingnotes) > 0){
      int last_played;
      last_played = Notes_lastNote(_ctx.playingnotes);
      if(last_played > 0){
         Engine_setFrequency(_ctx,Util_noteToFrequency(((-1) + last_played)));
      }
   }
   else
   {
      _ctx.gate = false;
   }
}

void Engine_default(Engine__ctx_type_0 &_ctx){
   _ctx.env_decimation_factor = 3;
   OSC_default(_ctx.carrier);
   OSC_default(_ctx.modulator);
   ADSR_default(_ctx.carrieradsr);
   ADSR_default(_ctx.modulatoradsr);
   Engine_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Engine_setCarrierRatio(_ctx,0x10000 /* 1.000000 */);
   Engine_setModulatorRatio(_ctx,0x20000 /* 2.000000 */);
   Engine_setModulatorLevel(_ctx,0x1999 /* 0.100000 */);
   Engine_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}


