
// FM with 2 operators, phase modulation

// TODO: should we reset phase on noteoff, keep processing with env 0?

fun process() {
    // HACK: note that using at least a temp variable force vult to put that in cpp and halves computation times (???)

    // audio sampling rate
    mem fs: real;
    // current gate
    mem gate;
    // to speedup computations
    mem carrier_half_phase;

    // retrieve both envelopes
    val modulator_env = modulatoradsr:ADSR.process(gate);
    val carrier_env = carrieradsr:ADSR.process(gate);
    // apply to wavetables
    val modulator_val;
    if (modulator_env > 0.0) {
       modulator_val = (modulator:OSC.process() + 1.0) * modulator_env;
    }


    val carrier_val;
    if (carrier_env > 0.0) {
       carrier_val = (carrier:OSC.process() + 1.0) * modulator_env;
    }

    val carrier_phase = modulator_val * carrier_half_phase;

    // modulate the (base) phase of the carrier
    _ = carrier:OSC.setPhase(carrier_phase);
    val c = carrier:OSC.process();
    return c;
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = carrier:OSC.setSamplerate(fs);
   _ = modulator:OSC.setSamplerate(fs);
}
// ratio for each operator. Keep in mind the max effective frequency, below samplingrate/2!
and setCarrierRatio(ratio: real) {
   mem carrierRatio = ratio;
}
and setModulatorRatio(ratio: real) {
   mem modulatorRatio = ratio;
}
// effect of modulator [0..1]
and setModulatorLevel(level: real) {
    // directly manipulating the phase amount
    carrier_half_phase = real(carrier:OSC.getSize()) / 2.0 * level;
}
// should be 0..niquist, in kHz
and setFrequency(freq: real) {
    _ = carrier:OSC.setFrequency(freq * carrierRatio);
    _ = modulator:OSC.setFrequency(freq * modulatorRatio);
}

// midi-like interface

// beginning of a note
// we don't check input values, yet
and noteOn(note:int, velocity:int, channel:int){
   // set frequency... should we reset phase somehow? artifacts upon first tests
   _ = setFrequency(Util.noteToFrequency(note));
   gate = 1.0;
}
// note off whatever the on
and noteOff(note:int, channel:int) {
   gate = 0.0;
}

// to be called on start
and default() @[init] {
    // default sampling rate (in kHz)
    _ = setSamplerate(44.100);
    // config for operators
    _ = setCarrierRatio(1.0);
    _ = setModulatorRatio(2.0);
    _ = setModulatorLevel(0.1);
    // sarting with LA
    _ = setFrequency(0.440);
}