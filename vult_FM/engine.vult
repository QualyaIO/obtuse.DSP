
// FM with 2 operators, phase modulation, monophonic

// TODO: should we reset phase on noteoff, keep processing with env 0?

fun process() {
    // HACK: note that using at least a temp variable force vult to put that in cpp and halves computation times (???)

    // audio sampling rate
    mem fs: real;
    
    // prec-computed to speedup computations
    mem carrier_half_phase;

    // reduce cost of envelopes, only computes once in a while
    mem env_decimation_factor;
    mem carrier_env;
    mem modulator_env;
    // number of iteration of this loop, for decimation
    mem n;

    //  current gate (can be > 1 if several notes are held)
    val gate = if playingnotes:Notes.nbNotes() > 0 then 1.0 else 0.0;

    n = n + 1;
    val update_env:bool = true;
    if (env_decimation_factor > 0) {
       update_env = n % env_decimation_factor == 0;
    }

    // output value -- need to be explicitely initialized otherwise migth be random (?) producing audible clicks
    val carrier_val = 0.0;
    // retrieve main envelope
    if (update_env) {
       carrier_env = carrieradsr:ADSR.process(gate);
    }

    // only going forward if we got sound on the output
    if (carrier_env > 0.0) {
       if (update_env) {
           modulator_env = modulatoradsr:ADSR.process(gate);
       }
       // apply to wavetables
       val carrier_phase = 0.0;
       // only modulate if we got level on modulator
       if (modulator_env > 0.0) {
          val modulator_val = (modulator:OSC.process() + 1.0) * modulator_env;
	  carrier_phase = modulator_val * carrier_half_phase;
       }
       // modulate the (base) phase of the carrier
       _ = carrier:OSC.setPhase(carrier_phase);
       carrier_val = carrier:OSC.process() * carrier_env ;
    }

    return carrier_val;
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = carrier:OSC.setSamplerate(fs);
   _ = modulator:OSC.setSamplerate(fs);

    // config for ADSR
    val ADSR_fs = fs;
    if (env_decimation_factor > 0) {
       ADSR_fs = fs / real(env_decimation_factor);
    }
    _ = carrieradsr:ADSR.setSamplerate(ADSR_fs);
    _ = modulatoradsr:ADSR.setSamplerate(ADSR_fs);
}
// ratio for each operator. Keep in mind the max effective frequency, below samplingrate/2!
and setCarrierRatio(ratio: real) {
   mem carrierRatio = ratio;
}
and setModulatorRatio(ratio: real) {
   mem modulatorRatio = ratio;
}
// effect of modulator [0..1]
and setModulatorLevel(level: real) {
    // directly manipulating the phase amount
    carrier_half_phase = real(carrier:OSC.getSize()) / 2.0 * level;
}
// should be 0..nquist, in kHz
and setFrequency(freq: real) {
    _ = carrier:OSC.setFrequency(freq * carrierRatio);
    _ = modulator:OSC.setFrequency(freq * modulatorRatio);
}

// midi-like interface

// beginning of a note
// we don't check velocity, yet
and noteOn(note:int, velocity:int, channel:int){
   // only 128 midi notes
   note = clip(note, 0, 127);
   _ = playingnotes:Notes.noteOn(note, velocity, channel);
   // set frequency... should we reset phase somehow? artifacts upon first tests
   _ = setFrequency(Util.noteToFrequency(note));
}
// note off whatever the channel, back to frequency of last still active note if any
and noteOff(note:int, channel:int) {
   // only 128 midi notes
   note = clip(note, 0, 127);
   _ = playingnotes:Notes.noteOff(note, channel);
   val last_played = playingnotes:Notes.lastNote();
   if (last_played > 0) {
      _ = setFrequency(Util.noteToFrequency(last_played - 1));
   }
}

// to be called on start
and default() @[init] {
    // should be a divisor of sample rate
    env_decimation_factor = 3;

    // init used items
    // FIXME: not sure why if @init is set
    _ = carrier:OSC.default();
    _ = modulator:OSC.default();
    _ = carrieradsr:ADSR.default();
    _ = modulatoradsr:ADSR.default();

    // default sampling rate (in kHz)
    _ = setSamplerate(44.100);
    
    // config for operators
    _ = setCarrierRatio(1.0);
    _ = setModulatorRatio(2.0);
    _ = setModulatorLevel(0.1);
    // sarting with LA
    _ = setFrequency(0.440);
}