

fun process() {
    // audio sampling rate
    mem fs: real;
    // carrier base frequency x samplee rate
    mem cbase: real;

    // computing change of thep for carrier
    val cstep : real =  modulator:Sinus_wav.process() * cbase;
    _ = carrier:Sinus_wav.setStep(cstep);
   val c = carrier:Sinus_wav.process();
   return c;
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   cbase = 0.440 / fs;
   _ = carrier:Sinus_wav.setSamplerate(newFs);
   _ = modulator:Sinus_wav.setSamplerate(newFs);
}
and default() @[init] {
    // default sampling rate (in kHz)
    _ = setSamplerate(44.100);
    _ = carrier:Sinus_wav.setFrequency(0.440);
    _ = modulator:Sinus_wav.setFrequency(0.001);
}