

fun process() {
    // audio sampling rate
    mem fs: real;
    // to speedup computations
    mem carrier_half_phase;
    // HACK: using a temp variable force vult to put that in cpp and halves computation times (???)
    val carrier_phase = (modulator:Sinus_wav.process() + 1.0) * carrier_half_phase;

    // modulate the (base) phase of the carrier
    _ = carrier:Sinus_wav.setPhase(carrier_phase);
    val c = carrier:Sinus_wav.process();
    return c;
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = carrier:Sinus_wav.setSamplerate(fs);
   _ = modulator:Sinus_wav.setSamplerate(fs);
}
and default() @[init] {
    // default sampling rate (in kHz)
    _ = setSamplerate(44.100);
    _ = carrier:Sinus_wav.setFrequency(0.440);
    _ = modulator:Sinus_wav.setFrequency(0.001);
    // keeping in cache coeff
    carrier_half_phase = real(carrier:Sinus_wav.getSize()) / 2.0;
}