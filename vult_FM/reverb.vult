
// Attempt at creating reverb using the heavily-used Schroeder reverb

// Note: 
// Numbers from Schroeder reverberator SATREV, see Figure 3.6 https://ccrma.stanford.edu/~jos/pasp/Example_Schroeder_Reverberators.html 
// comb0: 0.827 / 778 samples
// comb1: 0.805 / 901 samples
// comb2: 0.783 / 1011 samples
// comb3: 0.764 / 1123 sample
// allpass0: 0.7 / 125 samples
// allpass0: 0.7 / 42 samples

fun process(sample: real) {
  // average comb filters' output
  val combs_filter = (comb0:CombFB.process(sample) + comb1:CombFB.process(sample) + comb2:CombFB.process(sample) + comb3:CombFB.process(sample)) * 0.25;
  // apply allpass in series
  return allpass1:Allpass.process(allpass0:Allpass.process(combs_filter));
}

// Set base for reverb and delay times, in kHz
// WARNING: will *not* update delays in ms and reverb time in s when this is changed, hence to be called first
and setSamplerate(newFs:real) {
  mem fs;
  if (newFs > 0.0) {
     fs = newFs;
  } else {
     fs = 44.1;
  }
  _ = comb0:CombFB.setSamplerate(newFs);
  _ = comb1:CombFB.setSamplerate(newFs);
  _ = comb2:CombFB.setSamplerate(newFs);
  _ = comb3:CombFB.setSamplerate(newFs);
  _ = allpass0:Allpass.setSamplerate(newFs);
  _ = allpass1:Allpass.setSamplerate(newFs);
}

// how long it takes in *seconds* for reverb to reach -60db (i.e. T60 in the paper). Longer time: material of the room reflect more. Must be positive.
and setReverbTime(newReverbtime: real) {
  mem reverbtime: real;
  // delay in samples for each comb filter
  mem comb0delay: int;
  mem comb1delay: int;
  mem comb2delay: int;
  mem comb3delay: int;
  if (newReverbtime > 0.0) {
     reverbtime = newReverbtime;
     // pow is not handled properly, at least when transpiling fixed float, hence go with exp and set base 10 with ln(10)... which is not supported either through log(10).
     // completely stupid, just a way to let vult compute ln(10) instead of just writing "2.302585092994046"
     val log_base = log10(10.0)/log10(exp(1.0));
     // delay / 1000 to compensate for fs in kHz + avoid fixed point boundaries (will be transcompiled as -0.003 * delay, good enough)
     val comb0decay = exp(log_base * (-3.0 * (real(comb0delay) / 1000.0)) / (fs * reverbtime));
     val comb1decay = exp(log_base * (-3.0 * (real(comb1delay) / 1000.0)) / (fs * reverbtime));
     val comb2decay = exp(log_base * (-3.0 * (real(comb2delay) / 1000.0)) / (fs * reverbtime));
     val comb3decay = exp(log_base * (-3.0 * (real(comb3delay) / 1000.0)) / (fs * reverbtime));
     _ = comb0:CombFB.setDecay(comb0decay);
     _ = comb1:CombFB.setDecay(comb1decay);
     _ = comb2:CombFB.setDecay(comb2decay);
     _ = comb3:CombFB.setDecay(comb3decay);
  }
}

// How long in ms before first reflections occur. Longer time: bigger room. Note that reverb time is kept.
// In theory [0.. max buffer/fs] but will start to degenerate below a certain threshold as some delays will be zeroed (below ~ 7.83ms at 44100hz)
// In case of fixed float there will also be a hard upper bound, 32767/fs (as computations that will be performed in setReverbTime()
// Will also update comb filters decay, to maintain reverb time (T60)
// FIXME: this is actually wrong, should re-compute delay to be primed among them instead of keeping same spacing
and setDelayms(delayms: real) {
  // convert to delay in samples, used as ref for others filters
  val delay = int(fs * delayms);
  comb3delay = clip(delay, 0, comb3:CombFB.getMaxDelay());
  comb0delay = clip(comb3delay - 345, 0, comb0:CombFB.getMaxDelay());
  comb1delay = clip(comb3delay - 222, 0, comb1:CombFB.getMaxDelay());
  comb2delay = clip(comb3delay - 112, 0, comb2:CombFB.getMaxDelay());
  _ = comb0:CombFB.setDelay(comb0delay);
  _ = comb1:CombFB.setDelay(comb1delay);
  _ = comb2:CombFB.setDelay(comb2delay);
  _ = comb3:CombFB.setDelay(comb3delay);
  // update comb filter. decay is adjusted to maintain reverb time (T60)
  _ = setReverbTime(reverbtime);
}

and default() @[init] {
  _ = setSamplerate(44.100);
  // to approximate default parameters found in litteratures
  reverbtime = 0.65;
  // will also call setReverbTime()
  _ = setDelayms(1123.0/44.1);

  // fixed value for both all-pass
  _ = allpass0:Allpass.setDecay(0.7);
  _ = allpass1:Allpass.setDecay(0.7);
  _ = allpass0:Allpass.setDelay(125);
  _ = allpass1:Allpass.setDelay(42);

}
