
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_H
#define ENGINE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine.tables.h"

static_inline fix16_t Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

static_inline int OSC_sin_wave_samples(){
   return 8000;
};

static_inline fix16_t OSC_sin_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(OSC_sin_wave_chan_0)[(index % 8000)];
   }
   return 0x0 /* 0.000000 */;
}

typedef struct OSC__ctx_type_2 {
   int wavetable;
   fix16_t stepRatio;
   fix16_t step;
   fix16_t phase_base;
   fix16_t phase;
   fix16_t fs;
   fix16_t freq;
} OSC__ctx_type_2;

typedef OSC__ctx_type_2 OSC_get_sample_type;

void OSC__ctx_type_2_init(OSC__ctx_type_2 &_output_);

static_inline void OSC_get_sample_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t OSC_get_sample(OSC__ctx_type_2 &_ctx, int index){
   fix16_t sample;
   if(_ctx.wavetable == 0){
      sample = OSC_sin_wave(0,index);
   }
   return sample;
}

typedef OSC__ctx_type_2 OSC_getSize_type;

static_inline void OSC_getSize_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline int OSC_getSize(OSC__ctx_type_2 &_ctx){
   int size;
   if(_ctx.wavetable == 0){
      size = OSC_sin_wave_samples();
   }
   return size;
}

typedef OSC__ctx_type_2 OSC_process_type;

static_inline void OSC_process_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

fix16_t OSC_process(OSC__ctx_type_2 &_ctx);

typedef OSC__ctx_type_2 OSC_updateStep_type;

static_inline void OSC_updateStep_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void OSC_updateStep(OSC__ctx_type_2 &_ctx){
   _ctx.step = fix_mul(_ctx.freq,_ctx.stepRatio);
};

typedef OSC__ctx_type_2 OSC_setSamplerate_type;

static_inline void OSC_setSamplerate_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

void OSC_setSamplerate(OSC__ctx_type_2 &_ctx, fix16_t newFs);

typedef OSC__ctx_type_2 OSC_setFrequency_type;

static_inline void OSC_setFrequency_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void OSC_setFrequency(OSC__ctx_type_2 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   OSC_updateStep(_ctx);
}

typedef OSC__ctx_type_2 OSC_setPhase_type;

static_inline void OSC_setPhase_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void OSC_setPhase(OSC__ctx_type_2 &_ctx, fix16_t newPhase){
   _ctx.phase_base = newPhase;
};

typedef OSC__ctx_type_2 OSC_setWavetable_type;

static_inline void OSC_setWavetable_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void OSC_setWavetable(OSC__ctx_type_2 &_ctx, int index){
   _ctx.wavetable = index;
};

typedef OSC__ctx_type_2 OSC_default_type;

static_inline void OSC_default_init(OSC__ctx_type_2 &_output_){
   OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void OSC_default(OSC__ctx_type_2 &_ctx){
   OSC_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   OSC_setWavetable(_ctx,0);
   OSC_setFrequency(_ctx,0x70a3 /* 0.440000 */);
}

typedef struct Engine__ctx_type_0 {
   fix16_t modulatorRatio;
   OSC__ctx_type_2 modulator;
   fix16_t fs;
   fix16_t carrier_half_phase;
   fix16_t carrierRatio;
   OSC__ctx_type_2 carrier;
} Engine__ctx_type_0;

typedef Engine__ctx_type_0 Engine_process_type;

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_);

static_inline void Engine_process_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

fix16_t Engine_process(Engine__ctx_type_0 &_ctx);

typedef Engine__ctx_type_0 Engine_setSamplerate_type;

static_inline void Engine_setSamplerate_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setSamplerate(Engine__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   OSC_setSamplerate(_ctx.carrier,_ctx.fs);
   OSC_setSamplerate(_ctx.modulator,_ctx.fs);
}

typedef Engine__ctx_type_0 Engine_setCarrierRatio_type;

static_inline void Engine_setCarrierRatio_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setCarrierRatio(Engine__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.carrierRatio = ratio;
};

typedef Engine__ctx_type_0 Engine_setModulatorRatio_type;

static_inline void Engine_setModulatorRatio_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setModulatorRatio(Engine__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.modulatorRatio = ratio;
};

typedef Engine__ctx_type_0 Engine_setModulatorLevel_type;

static_inline void Engine_setModulatorLevel_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setModulatorLevel(Engine__ctx_type_0 &_ctx, fix16_t level){
   _ctx.carrier_half_phase = (fix_mul(level,int_to_fix(OSC_getSize(_ctx.carrier))) >> 1);
};

typedef Engine__ctx_type_0 Engine_setFrequency_type;

static_inline void Engine_setFrequency_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setFrequency(Engine__ctx_type_0 &_ctx, fix16_t freq){
   OSC_setFrequency(_ctx.carrier,fix_mul(_ctx.carrierRatio,freq));
   OSC_setFrequency(_ctx.modulator,fix_mul(_ctx.modulatorRatio,freq));
}

typedef Engine__ctx_type_0 Engine_noteOn_type;

static_inline void Engine_noteOn_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_noteOn(Engine__ctx_type_0 &_ctx, int note, int velocity, int channel){
   Engine_setFrequency(_ctx,Util_noteToFrequency(note));
};

typedef Engine__ctx_type_0 Engine_noteOff_type;

static_inline void Engine_noteOff_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_noteOff(Engine__ctx_type_0 &_ctx, int note, int channel){
}

typedef Engine__ctx_type_0 Engine_default_type;

static_inline void Engine_default_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

void Engine_default(Engine__ctx_type_0 &_ctx);



#endif // ENGINE_H
