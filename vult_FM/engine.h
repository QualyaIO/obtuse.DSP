
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_H
#define ENGINE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine.tables.h"

static_inline fix16_t Sinus_sine_table_raw_c0(int index){
   return pgm_read_word_near(Sinus_sine_table_c0 + index);
};

static_inline fix16_t Sinus_sine_table_raw_c1(int index){
   return pgm_read_word_near(Sinus_sine_table_c1 + index);
};

static_inline fix16_t Sinus_sine_table_raw_c2(int index){
   return pgm_read_word_near(Sinus_sine_table_c2 + index);
};

static_inline fix16_t Sinus_sine_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3ff0000 /* 1023.000000 */,x)),0,1023);
   return (pgm_read_word_near(fix_wrap_array(Sinus_sine_table_c0) + index) + fix_mul(x,(pgm_read_word_near(fix_wrap_array(Sinus_sine_table_c1) + index) + fix_mul(x,pgm_read_word_near(fix_wrap_array(Sinus_sine_table_c2) + index)))));
}

typedef struct Sinus__ctx_type_4 {
   fix16_t step;
   fix16_t phase;
   fix16_t fs;
   fix16_t freq;
} Sinus__ctx_type_4;

typedef Sinus__ctx_type_4 Sinus_process_type;

void Sinus__ctx_type_4_init(Sinus__ctx_type_4 &_output_);

static_inline void Sinus_process_init(Sinus__ctx_type_4 &_output_){
   Sinus__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Sinus_process(Sinus__ctx_type_4 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   _ctx.phase = (_ctx.phase % 0x10000 /* 1.000000 */);
   return Sinus_sine_table(_ctx.phase);
}

typedef Sinus__ctx_type_4 Sinus_setFrequency_type;

static_inline void Sinus_setFrequency_init(Sinus__ctx_type_4 &_output_){
   Sinus__ctx_type_4_init(_output_);
   return ;
}

static_inline void Sinus_setFrequency(Sinus__ctx_type_4 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   _ctx.step = fix_div(_ctx.freq,_ctx.fs);
}

typedef Sinus__ctx_type_4 Sinus_setSamplerate_type;

static_inline void Sinus_setSamplerate_init(Sinus__ctx_type_4 &_output_){
   Sinus__ctx_type_4_init(_output_);
   return ;
}

static_inline void Sinus_setSamplerate(Sinus__ctx_type_4 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   _ctx.step = fix_div(_ctx.freq,_ctx.fs);
}

typedef Sinus__ctx_type_4 Sinus_default_type;

static_inline void Sinus_default_init(Sinus__ctx_type_4 &_output_){
   Sinus__ctx_type_4_init(_output_);
   return ;
}

static_inline void Sinus_default(Sinus__ctx_type_4 &_ctx){
   Sinus_setFrequency(_ctx,0x70a3 /* 0.440000 */);
   Sinus_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}

typedef struct Engine__ctx_type_0 {
   Sinus__ctx_type_4 carrier;
} Engine__ctx_type_0;

typedef Engine__ctx_type_0 Engine_process_type;

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_);

static_inline void Engine_process_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Engine_process(Engine__ctx_type_0 &_ctx){
   fix16_t c;
   c = Sinus_process(_ctx.carrier);
   return c;
}

typedef Engine__ctx_type_0 Engine_setSamplerate_type;

static_inline void Engine_setSamplerate_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_setSamplerate(Engine__ctx_type_0 &_ctx, fix16_t newFs){
   Sinus_setSamplerate(_ctx.carrier,newFs);
};

typedef Engine__ctx_type_0 Engine_default_type;

static_inline void Engine_default_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_default(Engine__ctx_type_0 &_ctx){
   Engine_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Sinus_setFrequency(_ctx.carrier,0x70a3 /* 0.440000 */);
}



#endif // ENGINE_H
