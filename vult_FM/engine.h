
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_H
#define ENGINE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine.tables.h"

static_inline int Sinus_wav_sin_wave_samples(){
   return 8000;
};

static_inline fix16_t Sinus_wav_sin_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(Sinus_wav_sin_wave_chan_0)[(index % 8000)];
   }
   return 0x0 /* 0.000000 */;
}

typedef struct Sinus_wav__ctx_type_2 {
   int i;
} Sinus_wav__ctx_type_2;

typedef Sinus_wav__ctx_type_2 Sinus_wav_index_type;

static_inline void Sinus_wav__ctx_type_2_init(Sinus_wav__ctx_type_2 &_output_){
   Sinus_wav__ctx_type_2 _ctx;
   _ctx.i = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Sinus_wav_index_init(Sinus_wav__ctx_type_2 &_output_){
   Sinus_wav__ctx_type_2_init(_output_);
   return ;
}

static_inline int Sinus_wav_index(Sinus_wav__ctx_type_2 &_ctx){
   _ctx.i = ((1 + _ctx.i) % Sinus_wav_sin_wave_samples());
   return _ctx.i;
}

typedef struct Sinus_wav__ctx_type_3 {
   int step;
   int phase;
   fix16_t fs;
   fix16_t freq;
} Sinus_wav__ctx_type_3;

typedef Sinus_wav__ctx_type_3 Sinus_wav_process_type;

void Sinus_wav__ctx_type_3_init(Sinus_wav__ctx_type_3 &_output_);

static_inline void Sinus_wav_process_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline fix16_t Sinus_wav_process(Sinus_wav__ctx_type_3 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   return Sinus_wav_sin_wave(0,_ctx.phase);
}

typedef Sinus_wav__ctx_type_3 Sinus_wav_getSize_type;

static_inline void Sinus_wav_getSize_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline int Sinus_wav_getSize(Sinus_wav__ctx_type_3 &_ctx){
   return Sinus_wav_sin_wave_samples();
};

typedef Sinus_wav__ctx_type_3 Sinus_wav_setStep_type;

static_inline void Sinus_wav_setStep_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline void Sinus_wav_setStep(Sinus_wav__ctx_type_3 &_ctx, fix16_t newStep){
   _ctx.step = fix_to_int(newStep);
};

typedef Sinus_wav__ctx_type_3 Sinus_wav_updateStep_type;

static_inline void Sinus_wav_updateStep_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline void Sinus_wav_updateStep(Sinus_wav__ctx_type_3 &_ctx){
   fix16_t stepRatio;
   stepRatio = fix_mul(0x5ce /* 0.022676 */,int_to_fix(Sinus_wav_getSize(_ctx)));
   Sinus_wav_setStep(_ctx,fix_mul(_ctx.freq,stepRatio));
}

typedef Sinus_wav__ctx_type_3 Sinus_wav_setFrequency_type;

static_inline void Sinus_wav_setFrequency_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline void Sinus_wav_setFrequency(Sinus_wav__ctx_type_3 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   Sinus_wav_updateStep(_ctx);
}

typedef Sinus_wav__ctx_type_3 Sinus_wav_setSamplerate_type;

static_inline void Sinus_wav_setSamplerate_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline void Sinus_wav_setSamplerate(Sinus_wav__ctx_type_3 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   Sinus_wav_updateStep(_ctx);
}

typedef Sinus_wav__ctx_type_3 Sinus_wav_default_type;

static_inline void Sinus_wav_default_init(Sinus_wav__ctx_type_3 &_output_){
   Sinus_wav__ctx_type_3_init(_output_);
   return ;
}

static_inline void Sinus_wav_default(Sinus_wav__ctx_type_3 &_ctx){
   Sinus_wav_setFrequency(_ctx,0x70a3 /* 0.440000 */);
   Sinus_wav_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
}

typedef struct Engine__ctx_type_0 {
   Sinus_wav__ctx_type_3 modulator;
   fix16_t fs;
   fix16_t cbase;
   Sinus_wav__ctx_type_3 carrier;
} Engine__ctx_type_0;

typedef Engine__ctx_type_0 Engine_process_type;

void Engine__ctx_type_0_init(Engine__ctx_type_0 &_output_);

static_inline void Engine_process_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

fix16_t Engine_process(Engine__ctx_type_0 &_ctx);

typedef Engine__ctx_type_0 Engine_setSamplerate_type;

static_inline void Engine_setSamplerate_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

void Engine_setSamplerate(Engine__ctx_type_0 &_ctx, fix16_t newFs);

typedef Engine__ctx_type_0 Engine_default_type;

static_inline void Engine_default_init(Engine__ctx_type_0 &_output_){
   Engine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Engine_default(Engine__ctx_type_0 &_ctx){
   Engine_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   Sinus_wav_setFrequency(_ctx.carrier,0x70a3 /* 0.440000 */);
   Sinus_wav_setFrequency(_ctx.modulator,0x41 /* 0.001000 */);
}



#endif // ENGINE_H
