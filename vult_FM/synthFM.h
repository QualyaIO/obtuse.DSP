
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SYNTHFM_H
#define SYNTHFM_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "synthFM.tables.h"

static_inline fix16_t synthFM_Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

typedef struct synthFM_Util__ctx_type_1 {
   uint8_t pre;
} synthFM_Util__ctx_type_1;

typedef synthFM_Util__ctx_type_1 synthFM_Util_edge_type;

static_inline void synthFM_Util__ctx_type_1_init(synthFM_Util__ctx_type_1 &_output_){
   synthFM_Util__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void synthFM_Util_edge_init(synthFM_Util__ctx_type_1 &_output_){
   synthFM_Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t synthFM_Util_edge(synthFM_Util__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline void synthFM_Util_buffer(fix16_t (&_output_)[256]){
   fix16_t buff[256];
   fix_copy_array(256,_output_,buff);
   return ;
}

static_inline void synthFM_Util_buffer_large(fix16_t (&_output_)[2048]){
   fix16_t buff[2048];
   fix_copy_array(2048,_output_,buff);
   return ;
}

static_inline int synthFM_OSC_sin_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFM_OSC_sin_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFM_OSC_sin_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

typedef struct synthFM_OSC__ctx_type_2 {
   int wavetable;
   fix16_t stepRatio;
   fix16_t step;
   fix16_t rsize;
   fix16_t phase_base;
   fix16_t phase;
   fix16_t fs;
   fix16_t freq;
   fix16_t buffer_o[256];
} synthFM_OSC__ctx_type_2;

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_getSample_type;

void synthFM_OSC__ctx_type_2_init(synthFM_OSC__ctx_type_2 &_output_);

static_inline void synthFM_OSC_getSample_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

fix16_t synthFM_OSC_getSample(synthFM_OSC__ctx_type_2 &_ctx, int index);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_type;

static_inline void synthFM_OSC_process_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t synthFM_OSC_process(synthFM_OSC__ctx_type_2 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   while(_ctx.phase > _ctx.rsize){
      _ctx.phase = (_ctx.phase + (- _ctx.rsize));
   }
   return synthFM_OSC_getSample(_ctx,fix_to_int((_ctx.phase + _ctx.phase_base)));
}

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_bufferTo_type;

static_inline void synthFM_OSC_process_bufferTo_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo(synthFM_OSC__ctx_type_2 &_ctx, int nb, fix16_t (&env)[256], fix16_t (&phase_shift)[256], fix16_t phase_shift_level, fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_buffer_type;

static_inline void synthFM_OSC_process_buffer_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_process_buffer(synthFM_OSC__ctx_type_2 &_ctx, int nb, fix16_t (&env)[256], fix16_t (&phase_shift)[256], fix16_t phase_shift_level){
   synthFM_OSC_process_bufferTo(_ctx,nb,env,phase_shift,phase_shift_level,_ctx.buffer_o);
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_bufferTo_simple_type;

static_inline void synthFM_OSC_process_bufferTo_simple_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo_simple(synthFM_OSC__ctx_type_2 &_ctx, int nb, fix16_t (&env)[256], fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_buffer_simple_type;

static_inline void synthFM_OSC_process_buffer_simple_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_process_buffer_simple(synthFM_OSC__ctx_type_2 &_ctx, int nb, fix16_t (&env)[256]){
   synthFM_OSC_process_bufferTo_simple(_ctx,nb,env,_ctx.buffer_o);
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_bufferTo_simplest_type;

static_inline void synthFM_OSC_process_bufferTo_simplest_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_process_bufferTo_simplest(synthFM_OSC__ctx_type_2 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_process_buffer_simplest_type;

static_inline void synthFM_OSC_process_buffer_simplest_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_process_buffer_simplest(synthFM_OSC__ctx_type_2 &_ctx, int nb){
   synthFM_OSC_process_bufferTo_simplest(_ctx,nb,_ctx.buffer_o);
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_updateStep_type;

static_inline void synthFM_OSC_updateStep_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_updateStep(synthFM_OSC__ctx_type_2 &_ctx){
   _ctx.step = fix_mul(_ctx.freq,_ctx.stepRatio);
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_getBuffer_type;

static_inline void synthFM_OSC_getBuffer_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_getBuffer(synthFM_OSC__ctx_type_2 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_setSamplerate_type;

static_inline void synthFM_OSC_setSamplerate_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_setSamplerate(synthFM_OSC__ctx_type_2 &_ctx, fix16_t newFs);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_setFrequency_type;

static_inline void synthFM_OSC_setFrequency_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_setFrequency(synthFM_OSC__ctx_type_2 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   synthFM_OSC_updateStep(_ctx);
}

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_setPhase_type;

static_inline void synthFM_OSC_setPhase_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_setPhase(synthFM_OSC__ctx_type_2 &_ctx, fix16_t newPhase){
   _ctx.phase_base = newPhase;
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_resetPhase_type;

static_inline void synthFM_OSC_resetPhase_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_resetPhase(synthFM_OSC__ctx_type_2 &_ctx){
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
}

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_setWavetable_type;

static_inline void synthFM_OSC_setWavetable_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline void synthFM_OSC_setWavetable(synthFM_OSC__ctx_type_2 &_ctx, int index){
   if(_ctx.wavetable == 0){
      _ctx.rsize = int_to_fix(synthFM_OSC_sin_wave_samples());
   }
   else
   {
      synthFM_OSC_setWavetable(_ctx,0);
   }
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_getSize_type;

static_inline void synthFM_OSC_getSize_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

static_inline int synthFM_OSC_getSize(synthFM_OSC__ctx_type_2 &_ctx){
   return fix_to_int(_ctx.rsize);
};

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_copyTo_type;

static_inline void synthFM_OSC_copyTo_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_copyTo(synthFM_OSC__ctx_type_2 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef synthFM_OSC__ctx_type_2 synthFM_OSC_default_type;

static_inline void synthFM_OSC_default_init(synthFM_OSC__ctx_type_2 &_output_){
   synthFM_OSC__ctx_type_2_init(_output_);
   return ;
}

void synthFM_OSC_default(synthFM_OSC__ctx_type_2 &_ctx);

typedef struct synthFM_Notes__ctx_type_0 {
   uint8_t poly;
   int notes[128];
   int nb_notes;
   int last_notes[128];
} synthFM_Notes__ctx_type_0;

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_setPoly_type;

void synthFM_Notes__ctx_type_0_init(synthFM_Notes__ctx_type_0 &_output_);

static_inline void synthFM_Notes_setPoly_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Notes_setPoly(synthFM_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.poly = flag;
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_default_type;

static_inline void synthFM_Notes_default_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Notes_default(synthFM_Notes__ctx_type_0 &_ctx){
   synthFM_Notes_setPoly(_ctx,false);
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_nbNotes_type;

static_inline void synthFM_Notes_nbNotes_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Notes_nbNotes(synthFM_Notes__ctx_type_0 &_ctx){
   return _ctx.nb_notes;
};

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_firstNote_type;

static_inline void synthFM_Notes_firstNote_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFM_Notes_firstNote(synthFM_Notes__ctx_type_0 &_ctx);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_lastNote_type;

static_inline void synthFM_Notes_lastNote_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFM_Notes_lastNote(synthFM_Notes__ctx_type_0 &_ctx);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_noteOn_type;

static_inline void synthFM_Notes_noteOn_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_Notes_noteOn(synthFM_Notes__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_Notes__ctx_type_0 synthFM_Notes_noteOff_type;

static_inline void synthFM_Notes_noteOff_init(synthFM_Notes__ctx_type_0 &_output_){
   synthFM_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_Notes_noteOff(synthFM_Notes__ctx_type_0 &_ctx, int note, int channel);

typedef struct synthFM_ADSR__ctx_type_0 {
   fix16_t target;
   fix16_t step;
   int state;
   fix16_t s;
   fix16_t r_step;
   fix16_t r;
   fix16_t out;
   fix16_t fs;
   fix16_t d_step;
   fix16_t d;
   fix16_t buffer_o[256];
   fix16_t a_target;
   fix16_t a_step;
   fix16_t a;
   synthFM_Util__ctx_type_1 _inst351;
   synthFM_Util__ctx_type_1 _inst151;
} synthFM_ADSR__ctx_type_0;

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_process_type;

void synthFM_ADSR__ctx_type_0_init(synthFM_ADSR__ctx_type_0 &_output_);

static_inline void synthFM_ADSR_process_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_ADSR_process(synthFM_ADSR__ctx_type_0 &_ctx, uint8_t bgate);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_process_bufferTo_type;

static_inline void synthFM_ADSR_process_bufferTo_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFM_ADSR_process_bufferTo(synthFM_ADSR__ctx_type_0 &_ctx, uint8_t bgate, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_process_buffer_type;

static_inline void synthFM_ADSR_process_buffer_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthFM_ADSR_process_buffer(synthFM_ADSR__ctx_type_0 &_ctx, uint8_t bgate, int nb){
   return synthFM_ADSR_process_bufferTo(_ctx,bgate,nb,_ctx.buffer_o);
};

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_updateSteps_type;

static_inline void synthFM_ADSR_updateSteps_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFM_ADSR_updateSteps(synthFM_ADSR__ctx_type_0 &_ctx);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_setSamplerate_type;

static_inline void synthFM_ADSR_setSamplerate_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_ADSR_setSamplerate(synthFM_ADSR__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFM_ADSR_updateSteps(_ctx);
}

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_config_type;

static_inline void synthFM_ADSR_config_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFM_ADSR_config(synthFM_ADSR__ctx_type_0 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_copyTo_type;

static_inline void synthFM_ADSR_copyTo_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFM_ADSR_copyTo(synthFM_ADSR__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef synthFM_ADSR__ctx_type_0 synthFM_ADSR_default_type;

static_inline void synthFM_ADSR_default_init(synthFM_ADSR__ctx_type_0 &_output_){
   synthFM_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFM_ADSR_default(synthFM_ADSR__ctx_type_0 &_ctx);

typedef struct synthFM_FM__ctx_type_0 {
   synthFM_Notes__ctx_type_0 playingnotes;
   int n;
   synthFM_ADSR__ctx_type_0 modulatoradsr;
   fix16_t modulator_env;
   fix16_t modulatorRatio;
   synthFM_OSC__ctx_type_2 modulator;
   fix16_t level;
   uint8_t gate;
   fix16_t fs;
   int env_decimation_factor;
   synthFM_ADSR__ctx_type_0 carrieradsr;
   fix16_t carrier_half_phase;
   fix16_t carrier_env;
   fix16_t carrierRatio;
   synthFM_OSC__ctx_type_2 carrier;
   fix16_t buffer_o[256];
   fix16_t buffer_modulator_env_short[256];
   fix16_t buffer_modulator_env[256];
   fix16_t buffer_modulator[256];
   fix16_t buffer_carrier_env_short[256];
   fix16_t buffer_carrier_env[256];
} synthFM_FM__ctx_type_0;

typedef synthFM_FM__ctx_type_0 synthFM_FM_process_type;

void synthFM_FM__ctx_type_0_init(synthFM_FM__ctx_type_0 &_output_);

static_inline void synthFM_FM_process_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_FM_process(synthFM_FM__ctx_type_0 &_ctx);

typedef synthFM_FM__ctx_type_0 synthFM_FM_process_bufferTo_type;

static_inline void synthFM_FM_process_bufferTo_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_process_bufferTo(synthFM_FM__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_FM__ctx_type_0 synthFM_FM_process_buffer_type;

static_inline void synthFM_FM_process_buffer_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_process_buffer(synthFM_FM__ctx_type_0 &_ctx, int nb){
   synthFM_FM_process_bufferTo(_ctx,nb,_ctx.buffer_o);
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_getBuffer_type;

static_inline void synthFM_FM_getBuffer_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_getBuffer(synthFM_FM__ctx_type_0 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_copyTo_type;

static_inline void synthFM_FM_copyTo_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_copyTo(synthFM_FM__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef synthFM_FM__ctx_type_0 synthFM_FM_setSamplerate_type;

static_inline void synthFM_FM_setSamplerate_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_setSamplerate(synthFM_FM__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFM_FM__ctx_type_0 synthFM_FM_setCarrierRatio_type;

static_inline void synthFM_FM_setCarrierRatio_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setCarrierRatio(synthFM_FM__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.carrierRatio = ratio;
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_setModulatorRatio_type;

static_inline void synthFM_FM_setModulatorRatio_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setModulatorRatio(synthFM_FM__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.modulatorRatio = ratio;
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_setModulatorLevel_type;

static_inline void synthFM_FM_setModulatorLevel_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setModulatorLevel(synthFM_FM__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.level = newLevel;
   _ctx.carrier_half_phase = (fix_mul(_ctx.level,int_to_fix(synthFM_OSC_getSize(_ctx.carrier))) >> 1);
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setFrequency_type;

static_inline void synthFM_FM_setFrequency_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setFrequency(synthFM_FM__ctx_type_0 &_ctx, fix16_t freq){
   synthFM_OSC_setFrequency(_ctx.carrier,fix_mul(_ctx.carrierRatio,freq));
   synthFM_OSC_setFrequency(_ctx.modulator,fix_mul(_ctx.modulatorRatio,freq));
}

typedef synthFM_FM__ctx_type_0 synthFM_FM_setPoly_type;

static_inline void synthFM_FM_setPoly_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_FM_setPoly(synthFM_FM__ctx_type_0 &_ctx, uint8_t flag){
   synthFM_Notes_setPoly(_ctx.playingnotes,flag);
};

typedef synthFM_FM__ctx_type_0 synthFM_FM_noteOn_type;

static_inline void synthFM_FM_noteOn_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_noteOn(synthFM_FM__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_FM__ctx_type_0 synthFM_FM_noteOff_type;

static_inline void synthFM_FM_noteOff_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_noteOff(synthFM_FM__ctx_type_0 &_ctx, int note, int channel);

typedef synthFM_FM__ctx_type_0 synthFM_FM_default_type;

static_inline void synthFM_FM_default_init(synthFM_FM__ctx_type_0 &_output_){
   synthFM_FM__ctx_type_0_init(_output_);
   return ;
}

void synthFM_FM_default(synthFM_FM__ctx_type_0 &_ctx);

typedef struct synthFM_Poly__ctx_type_0 {
   synthFM_FM__ctx_type_0 voice3;
   synthFM_FM__ctx_type_0 voice2;
   synthFM_FM__ctx_type_0 voice1;
   synthFM_FM__ctx_type_0 voice0;
} synthFM_Poly__ctx_type_0;

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_getSample_type;

void synthFM_Poly__ctx_type_0_init(synthFM_Poly__ctx_type_0 &_output_);

static_inline void synthFM_Poly_getSample_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_Poly_getSample(synthFM_Poly__ctx_type_0 &_ctx, int voice);

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_runVoice_type;

static_inline void synthFM_Poly_runVoice_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_runVoice(synthFM_Poly__ctx_type_0 &_ctx, int voice, int nb, fix16_t (&buff)[256]){
   switch(voice) {
      case 0:
         synthFM_FM_process_bufferTo(_ctx.voice0,nb,buff);
      break;
      case 1:
         synthFM_FM_process_bufferTo(_ctx.voice1,nb,buff);
      break;
      case 2:
         synthFM_FM_process_bufferTo(_ctx.voice2,nb,buff);
      break;
      case 3:
         synthFM_FM_process_bufferTo(_ctx.voice3,nb,buff);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_sendNoteOn_type;

static_inline void synthFM_Poly_sendNoteOn_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_sendNoteOn(synthFM_Poly__ctx_type_0 &_ctx, int voice, int note, int velocity, int channel){
   switch(voice) {
      case 0:
         synthFM_FM_noteOn(_ctx.voice0,note,velocity,channel);
      break;
      case 1:
         synthFM_FM_noteOn(_ctx.voice1,note,velocity,channel);
      break;
      case 2:
         synthFM_FM_noteOn(_ctx.voice2,note,velocity,channel);
      break;
      case 3:
         synthFM_FM_noteOn(_ctx.voice3,note,velocity,channel);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_sendNoteOff_type;

static_inline void synthFM_Poly_sendNoteOff_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_sendNoteOff(synthFM_Poly__ctx_type_0 &_ctx, int voice, int note, int channel){
   switch(voice) {
      case 0:
         synthFM_FM_noteOff(_ctx.voice0,note,channel);
      break;
      case 1:
         synthFM_FM_noteOff(_ctx.voice1,note,channel);
      break;
      case 2:
         synthFM_FM_noteOff(_ctx.voice2,note,channel);
      break;
      case 3:
         synthFM_FM_noteOff(_ctx.voice3,note,channel);
      break;
    
   }
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_setSamplerate_type;

static_inline void synthFM_Poly_setSamplerate_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_setSamplerate(synthFM_Poly__ctx_type_0 &_ctx, fix16_t fs){
   synthFM_FM_setSamplerate(_ctx.voice0,fs);
   synthFM_FM_setSamplerate(_ctx.voice1,fs);
   synthFM_FM_setSamplerate(_ctx.voice2,fs);
   synthFM_FM_setSamplerate(_ctx.voice3,fs);
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoop_type;

static_inline void synthFM_Poly_synthSetLoop_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoop(synthFM_Poly__ctx_type_0 &_ctx, uint8_t flag){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoopStart_type;

static_inline void synthFM_Poly_synthSetLoopStart_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoopStart(synthFM_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthSetLoopEnd_type;

static_inline void synthFM_Poly_synthSetLoopEnd_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Poly_synthSetLoopEnd(synthFM_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_synthGetSize_type;

static_inline void synthFM_Poly_synthGetSize_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Poly_synthGetSize(synthFM_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthFM_Poly__ctx_type_0 synthFM_Poly_default_type;

static_inline void synthFM_Poly_default_init(synthFM_Poly__ctx_type_0 &_output_){
   synthFM_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Poly_default(synthFM_Poly__ctx_type_0 &_ctx);

typedef struct synthFM_Voice__ctx_type_0 {
   synthFM_Notes__ctx_type_0 voicesinactive;
   synthFM_Notes__ctx_type_0 voicesactive;
   fix16_t voices_ratio;
   int voices[4];
   synthFM_Poly__ctx_type_0 poly;
   int number_voices;
   int notes[128];
   fix16_t fs;
   fix16_t buffer_v3[256];
   fix16_t buffer_v2[256];
   fix16_t buffer_v1[256];
   fix16_t buffer_v0[256];
   fix16_t buffer_o[256];
} synthFM_Voice__ctx_type_0;

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_type;

void synthFM_Voice__ctx_type_0_init(synthFM_Voice__ctx_type_0 &_output_);

static_inline void synthFM_Voice_process_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFM_Voice_process(synthFM_Voice__ctx_type_0 &_ctx);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_bufferTo_type;

static_inline void synthFM_Voice_process_bufferTo_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_process_bufferTo(synthFM_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_buffer_type;

static_inline void synthFM_Voice_process_buffer_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_process_buffer(synthFM_Voice__ctx_type_0 &_ctx, int nb){
   synthFM_Voice_process_bufferTo(_ctx,nb,_ctx.buffer_o);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_bufferTo_alt_type;

static_inline void synthFM_Voice_process_bufferTo_alt_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_process_bufferTo_alt(synthFM_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[256]);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_process_buffer_alt_type;

static_inline void synthFM_Voice_process_buffer_alt_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_process_buffer_alt(synthFM_Voice__ctx_type_0 &_ctx, int nb){
   synthFM_Voice_process_bufferTo_alt(_ctx,nb,_ctx.buffer_o);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_noteOff_type;

static_inline void synthFM_Voice_noteOff_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_noteOff(synthFM_Voice__ctx_type_0 &_ctx, int note, int channel);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_noteOn_type;

static_inline void synthFM_Voice_noteOn_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_noteOn(synthFM_Voice__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_setNbVoices_type;

static_inline void synthFM_Voice_setNbVoices_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_setNbVoices(synthFM_Voice__ctx_type_0 &_ctx, int nbvoices);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_setSamplerate_type;

static_inline void synthFM_Voice_setSamplerate_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_setSamplerate(synthFM_Voice__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFM_Poly_setSamplerate(_ctx.poly,_ctx.fs);
}

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_getBuffer_type;

static_inline void synthFM_Voice_getBuffer_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_getBuffer(synthFM_Voice__ctx_type_0 &_ctx, fix16_t (&_output_)[256]){
   fix_copy_array(256,_output_,_ctx.buffer_o);
   return ;
}

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_copyTo_type;

static_inline void synthFM_Voice_copyTo_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_copyTo(synthFM_Voice__ctx_type_0 &_ctx, fix16_t (&oBuffer)[256], int nb);

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoop_type;

static_inline void synthFM_Voice_synthSetLoop_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoop(synthFM_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthFM_Poly_synthSetLoop(_ctx.poly,flag);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoopStart_type;

static_inline void synthFM_Voice_synthSetLoopStart_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoopStart(synthFM_Voice__ctx_type_0 &_ctx, int value){
   synthFM_Poly_synthSetLoopStart(_ctx.poly,value);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthSetLoopEnd_type;

static_inline void synthFM_Voice_synthSetLoopEnd_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFM_Voice_synthSetLoopEnd(synthFM_Voice__ctx_type_0 &_ctx, int value){
   synthFM_Poly_synthSetLoopEnd(_ctx.poly,value);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_synthGetSize_type;

static_inline void synthFM_Voice_synthGetSize_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFM_Voice_synthGetSize(synthFM_Voice__ctx_type_0 &_ctx){
   return synthFM_Poly_synthGetSize(_ctx.poly);
};

typedef synthFM_Voice__ctx_type_0 synthFM_Voice_default_type;

static_inline void synthFM_Voice_default_init(synthFM_Voice__ctx_type_0 &_output_){
   synthFM_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFM_Voice_default(synthFM_Voice__ctx_type_0 &_ctx);



#endif // SYNTHFM_H
