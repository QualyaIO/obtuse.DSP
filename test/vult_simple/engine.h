
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef ENGINE_H
#define ENGINE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "engine.tables.h"

static_inline fix16_t Processor_sine_table_raw_c0(int index){
   return pgm_read_word_near(Processor_sine_table_c0 + index);
};

static_inline fix16_t Processor_sine_table_raw_c1(int index){
   return pgm_read_word_near(Processor_sine_table_c1 + index);
};

static_inline fix16_t Processor_sine_table_raw_c2(int index){
   return pgm_read_word_near(Processor_sine_table_c2 + index);
};

static_inline fix16_t Processor_sine_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3ff0000 /* 1023.000000 */,x)),0,1023);
   return (pgm_read_word_near(fix_wrap_array(Processor_sine_table_c0) + index) + fix_mul(x,(pgm_read_word_near(fix_wrap_array(Processor_sine_table_c1) + index) + fix_mul(x,pgm_read_word_near(fix_wrap_array(Processor_sine_table_c2) + index)))));
}

typedef struct Processor__ctx_type_4 {
   fix16_t step;
   fix16_t phase;
   fix16_t fs;
   fix16_t freq;
} Processor__ctx_type_4;

typedef Processor__ctx_type_4 Processor_process_type;

void Processor__ctx_type_4_init(Processor__ctx_type_4 &_output_);

static_inline void Processor_process_init(Processor__ctx_type_4 &_output_){
   Processor__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Processor_process(Processor__ctx_type_4 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   _ctx.phase = (_ctx.phase % 0x10000 /* 1.000000 */);
   return Processor_sine_table(_ctx.phase);
}

typedef Processor__ctx_type_4 Processor_default_type;

static_inline void Processor_default_init(Processor__ctx_type_4 &_output_){
   Processor__ctx_type_4_init(_output_);
   return ;
}

static_inline void Processor_default(Processor__ctx_type_4 &_ctx){
   _ctx.fs = 0x2c1999 /* 44.100000 */;
   _ctx.freq = 0x70a3 /* 0.440000 */;
}

typedef Processor__ctx_type_4 Processor_setFrequency_type;

static_inline void Processor_setFrequency_init(Processor__ctx_type_4 &_output_){
   Processor__ctx_type_4_init(_output_);
   return ;
}

static_inline void Processor_setFrequency(Processor__ctx_type_4 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   _ctx.step = fix_div(_ctx.freq,_ctx.fs);
}

typedef Processor__ctx_type_4 Processor_setSamplerate_type;

static_inline void Processor_setSamplerate_init(Processor__ctx_type_4 &_output_){
   Processor__ctx_type_4_init(_output_);
   return ;
}

static_inline void Processor_setSamplerate(Processor__ctx_type_4 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   _ctx.step = fix_div(_ctx.freq,_ctx.fs);
}



#endif // ENGINE_H
