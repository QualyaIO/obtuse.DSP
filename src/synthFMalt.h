
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SYNTHFMALT_H
#define SYNTHFMALT_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "synthFMalt.tables.h"

typedef struct synthFMalt__tuple___real_real_real_real__ {
   fix16_t field_0;
   fix16_t field_1;
   fix16_t field_2;
   fix16_t field_3;
} synthFMalt__tuple___real_real_real_real__;

typedef struct synthFMalt_Random__ctx_type_0 {
   int next;
} synthFMalt_Random__ctx_type_0;

typedef synthFMalt_Random__ctx_type_0 synthFMalt_Random_setSeed_type;

static_inline void synthFMalt_Random__ctx_type_0_init(synthFMalt_Random__ctx_type_0 &_output_){
   synthFMalt_Random__ctx_type_0 &_ctx = _output_;
   _ctx.next = 0;
   
   return ;
}

static_inline void synthFMalt_Random_setSeed_init(synthFMalt_Random__ctx_type_0 &_output_){
   synthFMalt_Random__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Random_setSeed(synthFMalt_Random__ctx_type_0 &_ctx, int seed){
   _ctx.next = seed;
};

typedef synthFMalt_Random__ctx_type_0 synthFMalt_Random_irandom_type;

static_inline void synthFMalt_Random_irandom_init(synthFMalt_Random__ctx_type_0 &_output_){
   synthFMalt_Random__ctx_type_0_init(_output_);
   return ;
}

int synthFMalt_Random_irandom(synthFMalt_Random__ctx_type_0 &_ctx);

typedef synthFMalt_Random__ctx_type_0 synthFMalt_Random_random_type;

static_inline void synthFMalt_Random_random_init(synthFMalt_Random__ctx_type_0 &_output_){
   synthFMalt_Random__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_Random_random(synthFMalt_Random__ctx_type_0 &_ctx){
   return fix_mul(0x2 /* 0.000031 */,int_to_fix(synthFMalt_Random_irandom(_ctx)));
};

typedef synthFMalt_Random__ctx_type_0 synthFMalt_Random_getRandMax_type;

static_inline void synthFMalt_Random_getRandMax_init(synthFMalt_Random__ctx_type_0 &_output_){
   synthFMalt_Random__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Random_getRandMax(synthFMalt_Random__ctx_type_0 &_ctx){
   return 32767;
};

static_inline int synthFMalt_Wavetable_sin_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_sin_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_sin_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_tri_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_tri_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_tri_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_saw_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_saw_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_saw_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_square_wave_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_square_wave(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_square_wave_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_tri_wave_bl_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_tri_wave_bl(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_tri_wave_bl_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_saw_wave_bl_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_saw_wave_bl(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_saw_wave_bl_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline int synthFMalt_Wavetable_square_wave_bl_samples(){
   return 4096;
};

static_inline fix16_t synthFMalt_Wavetable_square_wave_bl(int channel, int index){
   if(channel == 0){
      return fix_wrap_array(synthFMalt_Wavetable_square_wave_bl_chan_0)[(index % 4096)];
   }
   return 0x0 /* 0.000000 */;
}

static_inline void synthFMalt_Wavetable_bufferWavetable(fix16_t (&oBuff)[4096]){
}

static_inline int synthFMalt_Wavetable_bufferSize(){
   return 4096;
};

fix16_t synthFMalt_Wavetable_getSample(int wavetableIdx, int index);

fix16_t synthFMalt_Wavetable_getSampleFrom(fix16_t (&wavetable)[4096], fix16_t index);

static_inline int synthFMalt_Wavetable_getNbWavetables(){
   return 8;
};

void synthFMalt_Wavetable_morphTo(fix16_t wavetableIdx, fix16_t phase, fix16_t (&buffer)[4096]);

typedef struct synthFMalt_Wavetable__ctx_type_20 {
   synthFMalt_Random__ctx_type_0 rando;
} synthFMalt_Wavetable__ctx_type_20;

typedef synthFMalt_Wavetable__ctx_type_20 synthFMalt_Wavetable_getRandomMorph_type;

static_inline void synthFMalt_Wavetable__ctx_type_20_init(synthFMalt_Wavetable__ctx_type_20 &_output_){
   synthFMalt_Wavetable__ctx_type_20 &_ctx = _output_;
   synthFMalt_Random__ctx_type_0_init(_ctx.rando);
   
   return ;
}

static_inline void synthFMalt_Wavetable_getRandomMorph_init(synthFMalt_Wavetable__ctx_type_20 &_output_){
   synthFMalt_Wavetable__ctx_type_20_init(_output_);
   return ;
}

void synthFMalt_Wavetable_getRandomMorph(synthFMalt_Wavetable__ctx_type_20 &_ctx, fix16_t (&oBuff)[4096]);

typedef struct synthFMalt_Wavetable__ctx_type_21 {
   synthFMalt_Random__ctx_type_0 _inst345;
   synthFMalt_Wavetable__ctx_type_20 _inst1c8;
} synthFMalt_Wavetable__ctx_type_21;

typedef synthFMalt_Wavetable__ctx_type_21 synthFMalt_Wavetable_getRandRandomMorph_type;

void synthFMalt_Wavetable__ctx_type_21_init(synthFMalt_Wavetable__ctx_type_21 &_output_);

static_inline void synthFMalt_Wavetable_getRandRandomMorph_init(synthFMalt_Wavetable__ctx_type_21 &_output_){
   synthFMalt_Wavetable__ctx_type_21_init(_output_);
   return ;
}

fix16_t synthFMalt_Wavetable_getRandRandomMorph(synthFMalt_Wavetable__ctx_type_21 &_ctx, fix16_t (&oBuff)[4096]);

static_inline fix16_t synthFMalt_Util_noteToFrequency(int note){
   return fix_mul(0x217 /* 0.008176 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,int_to_fix(note))));
};

static_inline fix16_t synthFMalt_Util_tonesToCoeff(fix16_t semitones){
   fix16_t log_base;
   log_base = 0xb172 /* 0.693147 */;
   return fix_exp(fix_mul(fix_mul(0x1555 /* 0.083333 */,log_base),semitones));
}

typedef struct synthFMalt_Util__ctx_type_2 {
   uint8_t pre;
} synthFMalt_Util__ctx_type_2;

typedef synthFMalt_Util__ctx_type_2 synthFMalt_Util_edge_type;

static_inline void synthFMalt_Util__ctx_type_2_init(synthFMalt_Util__ctx_type_2 &_output_){
   synthFMalt_Util__ctx_type_2 &_ctx = _output_;
   _ctx.pre = false;
   
   return ;
}

static_inline void synthFMalt_Util_edge_init(synthFMalt_Util__ctx_type_2 &_output_){
   synthFMalt_Util__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Util_edge(synthFMalt_Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

static_inline fix16_t synthFMalt_Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

typedef struct synthFMalt_Util__ctx_type_4 {
   fix16_t pre_x;
} synthFMalt_Util__ctx_type_4;

typedef synthFMalt_Util__ctx_type_4 synthFMalt_Util_change_type;

static_inline void synthFMalt_Util__ctx_type_4_init(synthFMalt_Util__ctx_type_4 &_output_){
   synthFMalt_Util__ctx_type_4 &_ctx = _output_;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   
   return ;
}

static_inline void synthFMalt_Util_change_init(synthFMalt_Util__ctx_type_4 &_output_){
   synthFMalt_Util__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Util_change(synthFMalt_Util__ctx_type_4 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct synthFMalt_Util__ctx_type_5 {
   fix16_t x;
} synthFMalt_Util__ctx_type_5;

typedef synthFMalt_Util__ctx_type_5 synthFMalt_Util_smooth_type;

static_inline void synthFMalt_Util__ctx_type_5_init(synthFMalt_Util__ctx_type_5 &_output_){
   synthFMalt_Util__ctx_type_5 &_ctx = _output_;
   _ctx.x = 0x0 /* 0.000000 */;
   
   return ;
}

static_inline void synthFMalt_Util_smooth_init(synthFMalt_Util__ctx_type_5 &_output_){
   synthFMalt_Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_Util_smooth(synthFMalt_Util__ctx_type_5 &_ctx, fix16_t input, fix16_t coeff){
   _ctx.x = (_ctx.x + fix_mul(coeff,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t synthFMalt_Util_velocityToLevel(int velocity){
   velocity = int_clip(velocity,0,127);
   return fix_mul(0x204 /* 0.007874 */,int_to_fix(velocity));
}

static_inline void synthFMalt_Buffer_buffer(fix16_t (&oBuff)[128]){
}

void synthFMalt_Buffer_buffer_large(fix16_t (&oBuff)[2048]);

fix16_t synthFMalt_OSCalt_getSampleMorph(int wavetable1, int wavetable2, fix16_t wavetable_ratio, int phase_shift, fix16_t index);

typedef struct synthFMalt_OSCalt__ctx_type_1 {
   fix16_t wavetable_ratio;
   int wavetable_phase_shift;
   int wavetable2;
   int wavetable1;
   fix16_t stepRatio;
   fix16_t step;
   fix16_t rsize;
   fix16_t phase_base;
   fix16_t phase;
   fix16_t last_val_feedback;
   fix16_t fs;
   fix16_t freq;
} synthFMalt_OSCalt__ctx_type_1;

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_process_type;

void synthFMalt_OSCalt__ctx_type_1_init(synthFMalt_OSCalt__ctx_type_1 &_output_);

static_inline void synthFMalt_OSCalt_process_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_OSCalt_process(synthFMalt_OSCalt__ctx_type_1 &_ctx){
   _ctx.phase = (_ctx.phase + _ctx.step);
   while(_ctx.phase > _ctx.rsize){
      _ctx.phase = (_ctx.phase + (- _ctx.rsize));
   }
   return synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,(_ctx.phase + _ctx.phase_base));
}

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_process_bufferTo_type;

static_inline void synthFMalt_OSCalt_process_bufferTo_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_process_bufferTo(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t (&phase_shift)[128], fix16_t (&phase_env)[128], fix16_t phase_shift_level, uint8_t shift_level, fix16_t (&oBuffer)[128]);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_process_bufferTo_simple_type;

static_inline void synthFMalt_OSCalt_process_bufferTo_simple_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_process_bufferTo_simple(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t (&oBuffer)[128]);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_process_bufferTo_feedback_type;

static_inline void synthFMalt_OSCalt_process_bufferTo_feedback_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_process_bufferTo_feedback(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t feedback, fix16_t (&oBuffer)[128]);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_process_bufferTo_simplest_type;

static_inline void synthFMalt_OSCalt_process_bufferTo_simplest_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_process_bufferTo_simplest(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&oBuffer)[128]);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_updateStep_type;

static_inline void synthFMalt_OSCalt_updateStep_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_OSCalt_updateStep(synthFMalt_OSCalt__ctx_type_1 &_ctx){
   _ctx.step = fix_mul(_ctx.freq,_ctx.stepRatio);
};

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_setSamplerate_type;

static_inline void synthFMalt_OSCalt_setSamplerate_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_setSamplerate(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t newFs);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_setFrequency_type;

static_inline void synthFMalt_OSCalt_setFrequency_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_OSCalt_setFrequency(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t newFreq){
   _ctx.freq = newFreq;
   synthFMalt_OSCalt_updateStep(_ctx);
}

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_setPhase_type;

static_inline void synthFMalt_OSCalt_setPhase_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_OSCalt_setPhase(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t newPhase){
   _ctx.phase_base = newPhase;
};

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_setWavetablePhase_type;

static_inline void synthFMalt_OSCalt_setWavetablePhase_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_OSCalt_setWavetablePhase(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t phaseRatio){
   _ctx.wavetable_phase_shift = fix_to_int(fix_mul(_ctx.rsize,phaseRatio));
};

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_setWavetable_type;

static_inline void synthFMalt_OSCalt_setWavetable_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_setWavetable(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t wavetableIdx);

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_resetPhase_type;

static_inline void synthFMalt_OSCalt_resetPhase_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_OSCalt_resetPhase(synthFMalt_OSCalt__ctx_type_1 &_ctx){
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
   _ctx.last_val_feedback = 0x0 /* 0.000000 */;
}

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_getSize_type;

static_inline void synthFMalt_OSCalt_getSize_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_OSCalt_getSize(synthFMalt_OSCalt__ctx_type_1 &_ctx){
   return _ctx.rsize;
};

typedef synthFMalt_OSCalt__ctx_type_1 synthFMalt_OSCalt_default_type;

static_inline void synthFMalt_OSCalt_default_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1_init(_output_);
   return ;
}

void synthFMalt_OSCalt_default(synthFMalt_OSCalt__ctx_type_1 &_ctx);

typedef struct synthFMalt_OSCalt__ctx_type_2 {
   synthFMalt_OSCalt__ctx_type_1 _inst4d4;
   synthFMalt_OSCalt__ctx_type_1 _inst3d6;
   synthFMalt_OSCalt__ctx_type_1 _inst218;
   synthFMalt_OSCalt__ctx_type_1 _inst149;
} synthFMalt_OSCalt__ctx_type_2;

typedef synthFMalt_OSCalt__ctx_type_2 synthFMalt_OSCalt_dummy_type;

void synthFMalt_OSCalt__ctx_type_2_init(synthFMalt_OSCalt__ctx_type_2 &_output_);

static_inline void synthFMalt_OSCalt_dummy_init(synthFMalt_OSCalt__ctx_type_2 &_output_){
   synthFMalt_OSCalt__ctx_type_2_init(_output_);
   return ;
}

void synthFMalt_OSCalt_dummy(synthFMalt_OSCalt__ctx_type_2 &_ctx);

typedef struct synthFMalt_Notes__ctx_type_0 {
   uint8_t poly;
   int notes[128];
   int nb_notes;
   int last_notes[128];
   uint8_t allowDuplicates;
} synthFMalt_Notes__ctx_type_0;

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_setPoly_type;

void synthFMalt_Notes__ctx_type_0_init(synthFMalt_Notes__ctx_type_0 &_output_);

static_inline void synthFMalt_Notes_setPoly_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Notes_setPoly(synthFMalt_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.poly = flag;
};

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_getPoly_type;

static_inline void synthFMalt_Notes_getPoly_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Notes_getPoly(synthFMalt_Notes__ctx_type_0 &_ctx){
   return _ctx.poly;
};

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_setAllowDuplicates_type;

static_inline void synthFMalt_Notes_setAllowDuplicates_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Notes_setAllowDuplicates(synthFMalt_Notes__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.allowDuplicates = flag;
};

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_default_type;

static_inline void synthFMalt_Notes_default_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Notes_default(synthFMalt_Notes__ctx_type_0 &_ctx){
   synthFMalt_Notes_setPoly(_ctx,false);
   synthFMalt_Notes_setAllowDuplicates(_ctx,false);
}

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_nbNotes_type;

static_inline void synthFMalt_Notes_nbNotes_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Notes_nbNotes(synthFMalt_Notes__ctx_type_0 &_ctx){
   return _ctx.nb_notes;
};

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_firstNote_type;

static_inline void synthFMalt_Notes_firstNote_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFMalt_Notes_firstNote(synthFMalt_Notes__ctx_type_0 &_ctx);

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_lastNote_type;

static_inline void synthFMalt_Notes_lastNote_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

int synthFMalt_Notes_lastNote(synthFMalt_Notes__ctx_type_0 &_ctx);

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_noteOff_type;

static_inline void synthFMalt_Notes_noteOff_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFMalt_Notes_noteOff(synthFMalt_Notes__ctx_type_0 &_ctx, int note, int channel);

typedef synthFMalt_Notes__ctx_type_0 synthFMalt_Notes_noteOn_type;

static_inline void synthFMalt_Notes_noteOn_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFMalt_Notes_noteOn(synthFMalt_Notes__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef struct synthFMalt_ADSR__ctx_type_0 {
   fix16_t getMaxValues_ret_3;
   fix16_t getMaxValues_ret_2;
   fix16_t getMaxValues_ret_1;
   fix16_t getMaxValues_ret_0;
} synthFMalt_ADSR__ctx_type_0;

typedef synthFMalt_ADSR__ctx_type_0 synthFMalt_ADSR_getMaxValues_type;

void synthFMalt_ADSR__ctx_type_0_init(synthFMalt_ADSR__ctx_type_0 &_output_);

static_inline void synthFMalt_ADSR_getMaxValues_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_ADSR_getMaxValues(synthFMalt_ADSR__ctx_type_0 &_ctx);

typedef synthFMalt_ADSR__ctx_type_0 synthFMalt_ADSR_getMaxValues_ret_0_type;

static_inline void synthFMalt_ADSR_getMaxValues_ret_0_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMaxValues_ret_0(synthFMalt_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_0;
};

typedef synthFMalt_ADSR__ctx_type_0 synthFMalt_ADSR_getMaxValues_ret_1_type;

static_inline void synthFMalt_ADSR_getMaxValues_ret_1_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMaxValues_ret_1(synthFMalt_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_1;
};

typedef synthFMalt_ADSR__ctx_type_0 synthFMalt_ADSR_getMaxValues_ret_2_type;

static_inline void synthFMalt_ADSR_getMaxValues_ret_2_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMaxValues_ret_2(synthFMalt_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_2;
};

typedef synthFMalt_ADSR__ctx_type_0 synthFMalt_ADSR_getMaxValues_ret_3_type;

static_inline void synthFMalt_ADSR_getMaxValues_ret_3_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMaxValues_ret_3(synthFMalt_ADSR__ctx_type_0 &_ctx){
   return _ctx.getMaxValues_ret_3;
};

typedef struct synthFMalt_ADSR__ctx_type_1 {
   synthFMalt_ADSR__ctx_type_0 _inst173;
} synthFMalt_ADSR__ctx_type_1;

typedef synthFMalt_ADSR__ctx_type_1 synthFMalt_ADSR_getMaxAttack_type;

static_inline void synthFMalt_ADSR__ctx_type_1_init(synthFMalt_ADSR__ctx_type_1 &_output_){
   synthFMalt_ADSR__ctx_type_1 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_0_init(_ctx._inst173);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMaxAttack_init(synthFMalt_ADSR__ctx_type_1 &_output_){
   synthFMalt_ADSR__ctx_type_1_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMaxAttack(synthFMalt_ADSR__ctx_type_1 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_2 {
   synthFMalt_ADSR__ctx_type_0 _inst173;
} synthFMalt_ADSR__ctx_type_2;

typedef synthFMalt_ADSR__ctx_type_2 synthFMalt_ADSR_getMaxDecay_type;

static_inline void synthFMalt_ADSR__ctx_type_2_init(synthFMalt_ADSR__ctx_type_2 &_output_){
   synthFMalt_ADSR__ctx_type_2 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_0_init(_ctx._inst173);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMaxDecay_init(synthFMalt_ADSR__ctx_type_2 &_output_){
   synthFMalt_ADSR__ctx_type_2_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMaxDecay(synthFMalt_ADSR__ctx_type_2 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_3 {
   synthFMalt_ADSR__ctx_type_0 _inst173;
} synthFMalt_ADSR__ctx_type_3;

typedef synthFMalt_ADSR__ctx_type_3 synthFMalt_ADSR_getMaxSustain_type;

static_inline void synthFMalt_ADSR__ctx_type_3_init(synthFMalt_ADSR__ctx_type_3 &_output_){
   synthFMalt_ADSR__ctx_type_3 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_0_init(_ctx._inst173);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMaxSustain_init(synthFMalt_ADSR__ctx_type_3 &_output_){
   synthFMalt_ADSR__ctx_type_3_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMaxSustain(synthFMalt_ADSR__ctx_type_3 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_4 {
   synthFMalt_ADSR__ctx_type_0 _inst173;
} synthFMalt_ADSR__ctx_type_4;

typedef synthFMalt_ADSR__ctx_type_4 synthFMalt_ADSR_getMaxRelease_type;

static_inline void synthFMalt_ADSR__ctx_type_4_init(synthFMalt_ADSR__ctx_type_4 &_output_){
   synthFMalt_ADSR__ctx_type_4 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_0_init(_ctx._inst173);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMaxRelease_init(synthFMalt_ADSR__ctx_type_4 &_output_){
   synthFMalt_ADSR__ctx_type_4_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMaxRelease(synthFMalt_ADSR__ctx_type_4 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_5 {
   fix16_t getMinValues_ret_3;
   fix16_t getMinValues_ret_2;
   fix16_t getMinValues_ret_1;
   fix16_t getMinValues_ret_0;
} synthFMalt_ADSR__ctx_type_5;

typedef synthFMalt_ADSR__ctx_type_5 synthFMalt_ADSR_getMinValues_type;

void synthFMalt_ADSR__ctx_type_5_init(synthFMalt_ADSR__ctx_type_5 &_output_);

static_inline void synthFMalt_ADSR_getMinValues_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5_init(_output_);
   return ;
}

void synthFMalt_ADSR_getMinValues(synthFMalt_ADSR__ctx_type_5 &_ctx);

typedef synthFMalt_ADSR__ctx_type_5 synthFMalt_ADSR_getMinValues_ret_0_type;

static_inline void synthFMalt_ADSR_getMinValues_ret_0_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMinValues_ret_0(synthFMalt_ADSR__ctx_type_5 &_ctx){
   return _ctx.getMinValues_ret_0;
};

typedef synthFMalt_ADSR__ctx_type_5 synthFMalt_ADSR_getMinValues_ret_1_type;

static_inline void synthFMalt_ADSR_getMinValues_ret_1_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMinValues_ret_1(synthFMalt_ADSR__ctx_type_5 &_ctx){
   return _ctx.getMinValues_ret_1;
};

typedef synthFMalt_ADSR__ctx_type_5 synthFMalt_ADSR_getMinValues_ret_2_type;

static_inline void synthFMalt_ADSR_getMinValues_ret_2_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMinValues_ret_2(synthFMalt_ADSR__ctx_type_5 &_ctx){
   return _ctx.getMinValues_ret_2;
};

typedef synthFMalt_ADSR__ctx_type_5 synthFMalt_ADSR_getMinValues_ret_3_type;

static_inline void synthFMalt_ADSR_getMinValues_ret_3_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_getMinValues_ret_3(synthFMalt_ADSR__ctx_type_5 &_ctx){
   return _ctx.getMinValues_ret_3;
};

typedef struct synthFMalt_ADSR__ctx_type_6 {
   synthFMalt_ADSR__ctx_type_5 _inst1d6;
} synthFMalt_ADSR__ctx_type_6;

typedef synthFMalt_ADSR__ctx_type_6 synthFMalt_ADSR_getMinAttack_type;

static_inline void synthFMalt_ADSR__ctx_type_6_init(synthFMalt_ADSR__ctx_type_6 &_output_){
   synthFMalt_ADSR__ctx_type_6 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst1d6);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMinAttack_init(synthFMalt_ADSR__ctx_type_6 &_output_){
   synthFMalt_ADSR__ctx_type_6_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMinAttack(synthFMalt_ADSR__ctx_type_6 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_7 {
   synthFMalt_ADSR__ctx_type_5 _inst1d6;
} synthFMalt_ADSR__ctx_type_7;

typedef synthFMalt_ADSR__ctx_type_7 synthFMalt_ADSR_getMinDecay_type;

static_inline void synthFMalt_ADSR__ctx_type_7_init(synthFMalt_ADSR__ctx_type_7 &_output_){
   synthFMalt_ADSR__ctx_type_7 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst1d6);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMinDecay_init(synthFMalt_ADSR__ctx_type_7 &_output_){
   synthFMalt_ADSR__ctx_type_7_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMinDecay(synthFMalt_ADSR__ctx_type_7 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_8 {
   synthFMalt_ADSR__ctx_type_5 _inst1d6;
} synthFMalt_ADSR__ctx_type_8;

typedef synthFMalt_ADSR__ctx_type_8 synthFMalt_ADSR_getMinSustain_type;

static_inline void synthFMalt_ADSR__ctx_type_8_init(synthFMalt_ADSR__ctx_type_8 &_output_){
   synthFMalt_ADSR__ctx_type_8 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst1d6);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMinSustain_init(synthFMalt_ADSR__ctx_type_8 &_output_){
   synthFMalt_ADSR__ctx_type_8_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMinSustain(synthFMalt_ADSR__ctx_type_8 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_9 {
   synthFMalt_ADSR__ctx_type_5 _inst1d6;
} synthFMalt_ADSR__ctx_type_9;

typedef synthFMalt_ADSR__ctx_type_9 synthFMalt_ADSR_getMinRelease_type;

static_inline void synthFMalt_ADSR__ctx_type_9_init(synthFMalt_ADSR__ctx_type_9 &_output_){
   synthFMalt_ADSR__ctx_type_9 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst1d6);
   
   return ;
}

static_inline void synthFMalt_ADSR_getMinRelease_init(synthFMalt_ADSR__ctx_type_9 &_output_){
   synthFMalt_ADSR__ctx_type_9_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_getMinRelease(synthFMalt_ADSR__ctx_type_9 &_ctx);

typedef struct synthFMalt_ADSR__ctx_type_10 {
   fix16_t target;
   fix16_t step;
   int state;
   fix16_t s;
   uint8_t retrigger;
   fix16_t r_step;
   fix16_t r;
   fix16_t out;
   fix16_t fs;
   fix16_t d_step;
   fix16_t d;
   fix16_t a_target;
   fix16_t a_step;
   fix16_t a;
   synthFMalt_ADSR__ctx_type_5 _inst38d6;
   synthFMalt_ADSR__ctx_type_0 _inst3773;
   synthFMalt_ADSR__ctx_type_5 _inst33d6;
   synthFMalt_Util__ctx_type_2 _inst1851;
   synthFMalt_Util__ctx_type_2 _inst151;
   synthFMalt_ADSR__ctx_type_9 _inst12c;
} synthFMalt_ADSR__ctx_type_10;

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_stepToRelease_type;

void synthFMalt_ADSR__ctx_type_10_init(synthFMalt_ADSR__ctx_type_10 &_output_);

static_inline void synthFMalt_ADSR_stepToRelease_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

static_inline fix16_t synthFMalt_ADSR_stepToRelease(synthFMalt_ADSR__ctx_type_10 &_ctx, fix16_t curr_val){
   return fix_div((- curr_val),fix_mul(_ctx.fs,fix_clip(_ctx.r,synthFMalt_ADSR_getMinRelease(_ctx._inst12c),_ctx.r)));
};

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_process_type;

static_inline void synthFMalt_ADSR_process_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

fix16_t synthFMalt_ADSR_process(synthFMalt_ADSR__ctx_type_10 &_ctx, uint8_t bgate);

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_process_bufferTo_type;

static_inline void synthFMalt_ADSR_process_bufferTo_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

uint8_t synthFMalt_ADSR_process_bufferTo(synthFMalt_ADSR__ctx_type_10 &_ctx, uint8_t bgate, int nb, fix16_t (&oBuffer)[128]);

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_updateSteps_type;

static_inline void synthFMalt_ADSR_updateSteps_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

void synthFMalt_ADSR_updateSteps(synthFMalt_ADSR__ctx_type_10 &_ctx);

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_setSamplerate_type;

static_inline void synthFMalt_ADSR_setSamplerate_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

static_inline void synthFMalt_ADSR_setSamplerate(synthFMalt_ADSR__ctx_type_10 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFMalt_ADSR_updateSteps(_ctx);
}

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_config_type;

static_inline void synthFMalt_ADSR_config_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

void synthFMalt_ADSR_config(synthFMalt_ADSR__ctx_type_10 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR);

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_retrig_type;

static_inline void synthFMalt_ADSR_retrig_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

static_inline void synthFMalt_ADSR_retrig(synthFMalt_ADSR__ctx_type_10 &_ctx){
   _ctx.retrigger = true;
};

typedef synthFMalt_ADSR__ctx_type_10 synthFMalt_ADSR_default_type;

static_inline void synthFMalt_ADSR_default_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10_init(_output_);
   return ;
}

static_inline void synthFMalt_ADSR_default(synthFMalt_ADSR__ctx_type_10 &_ctx){
   _ctx.a_target = 0x10000 /* 1.000000 */;
   synthFMalt_ADSR_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFMalt_ADSR_config(_ctx,0x0 /* 0.000000 */,0x0 /* 0.000000 */,0x8000 /* 0.500000 */,0x0 /* 0.000000 */);
}

typedef struct synthFMalt_ADSR__ctx_type_11 {
   synthFMalt_ADSR__ctx_type_10 _inst182;
} synthFMalt_ADSR__ctx_type_11;

typedef synthFMalt_ADSR__ctx_type_11 synthFMalt_ADSR_dummy_type;

static_inline void synthFMalt_ADSR__ctx_type_11_init(synthFMalt_ADSR__ctx_type_11 &_output_){
   synthFMalt_ADSR__ctx_type_11 &_ctx = _output_;
   synthFMalt_ADSR__ctx_type_10_init(_ctx._inst182);
   
   return ;
}

static_inline void synthFMalt_ADSR_dummy_init(synthFMalt_ADSR__ctx_type_11 &_output_){
   synthFMalt_ADSR__ctx_type_11_init(_output_);
   return ;
}

static_inline void synthFMalt_ADSR_dummy(synthFMalt_ADSR__ctx_type_11 &_ctx){
   fix16_t buff[128];
   synthFMalt_Buffer_buffer(buff);
   synthFMalt_ADSR_process_bufferTo(_ctx._inst182,false,0,buff);
}

typedef struct synthFMalt_FMalt__ctx_type_0 {
   fix16_t wavetable_modulator_idx;
   fix16_t wavetable_carrier_idx;
   fix16_t target_level;
   uint8_t sustaining;
   uint8_t sustain;
   synthFMalt_Notes__ctx_type_0 playingnotes;
   int n;
   synthFMalt_ADSR__ctx_type_10 modulatoradsr;
   uint8_t modulator_target_level;
   fix16_t modulator_phase_shift;
   fix16_t modulator_phase_range;
   fix16_t modulator_max_phase;
   fix16_t modulator_level_coeff;
   fix16_t modulator_level;
   fix16_t modulator_feedback;
   fix16_t modulator_env;
   fix16_t modulatorRatio;
   synthFMalt_OSCalt__ctx_type_1 modulator;
   fix16_t level_step_ref;
   fix16_t level_step;
   fix16_t level;
   uint8_t gate;
   fix16_t fs;
   fix16_t freq;
   uint8_t env_modulator_idle;
   int env_decimation_factor;
   uint8_t env_carrier_idle;
   synthFMalt_ADSR__ctx_type_10 carrieradsr;
   fix16_t carrier_phase_range;
   fix16_t carrier_max_phase;
   fix16_t carrier_env;
   fix16_t carrierRatio;
   synthFMalt_OSCalt__ctx_type_1 carrier;
   fix16_t buffer_modulator_env[128];
   fix16_t buffer_modulator[128];
   fix16_t buffer_carrier_env[128];
   fix16_t bend;
} synthFMalt_FMalt__ctx_type_0;

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_process_type;

void synthFMalt_FMalt__ctx_type_0_init(synthFMalt_FMalt__ctx_type_0 &_output_);

static_inline void synthFMalt_FMalt_process_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFMalt_FMalt_process(synthFMalt_FMalt__ctx_type_0 &_ctx);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_process_bufferTo_type;

static_inline void synthFMalt_FMalt_process_bufferTo_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_process_bufferTo(synthFMalt_FMalt__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[128]);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt__updateLevelStep_type;

static_inline void synthFMalt_FMalt__updateLevelStep_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt__updateLevelStep(synthFMalt_FMalt__ctx_type_0 &_ctx){
   _ctx.level_step_ref = fix_div(0x10000 /* 1.000000 */,fix_mul(0x30000 /* 3.000000 */,_ctx.fs));
   if(_ctx.env_decimation_factor > 0){
      _ctx.level_step_ref = fix_mul(_ctx.level_step_ref,int_to_fix(_ctx.env_decimation_factor));
   }
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setEnvDecimationFactor_type;

static_inline void synthFMalt_FMalt_setEnvDecimationFactor_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setEnvDecimationFactor(synthFMalt_FMalt__ctx_type_0 &_ctx, int newFactor){
   _ctx.env_decimation_factor = int_clip(newFactor,0,1000);
   synthFMalt_FMalt__updateLevelStep(_ctx);
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setSamplerate_type;

static_inline void synthFMalt_FMalt_setSamplerate_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_setSamplerate(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setLevel_type;

static_inline void synthFMalt_FMalt_setLevel_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_setLevel(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newLevel);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setCarrierRatio_type;

static_inline void synthFMalt_FMalt_setCarrierRatio_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setCarrierRatio(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.carrierRatio = ratio;
   if(_ctx.carrierRatio < 0x0 /* 0.000000 */){
      synthFMalt_OSCalt_setFrequency(_ctx.carrier,(- _ctx.carrierRatio));
   }
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorRatio_type;

static_inline void synthFMalt_FMalt_setModulatorRatio_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorRatio(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t ratio){
   _ctx.modulatorRatio = ratio;
   if(_ctx.modulatorRatio < 0x0 /* 0.000000 */){
      synthFMalt_OSCalt_setFrequency(_ctx.modulator,(- _ctx.modulatorRatio));
   }
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorLevel_type;

static_inline void synthFMalt_FMalt_setModulatorLevel_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorLevel(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.modulator_level = newLevel;
   _ctx.carrier_max_phase = (synthFMalt_OSCalt_getSize(_ctx.carrier) << 1);
   _ctx.carrier_phase_range = fix_mul(_ctx.carrier_max_phase,_ctx.modulator_level);
   _ctx.modulator_level_coeff = (_ctx.modulator_level >> 1);
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorTargetLevel_type;

static_inline void synthFMalt_FMalt_setModulatorTargetLevel_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorTargetLevel(synthFMalt_FMalt__ctx_type_0 &_ctx, uint8_t targetLevel){
   _ctx.modulator_target_level = targetLevel;
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorPhaseShift_type;

static_inline void synthFMalt_FMalt_setModulatorPhaseShift_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorPhaseShift(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t phaseRatio){
   phaseRatio = fix_clip(phaseRatio,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.modulator_phase_shift = fix_mul(phaseRatio,synthFMalt_OSCalt_getSize(_ctx.modulator));
   _ctx.modulator_phase_shift = (_ctx.modulator_phase_shift % synthFMalt_OSCalt_getSize(_ctx.modulator));
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorFeedback_type;

static_inline void synthFMalt_FMalt_setModulatorFeedback_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorFeedback(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t feedback){
   _ctx.modulator_feedback = feedback;
   _ctx.modulator_max_phase = (synthFMalt_OSCalt_getSize(_ctx.modulator) << 1);
   _ctx.modulator_phase_range = fix_mul(_ctx.modulator_max_phase,feedback);
}

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setFrequency_type;

static_inline void synthFMalt_FMalt_setFrequency_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_setFrequency(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newFreq);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_pitchBend_type;

static_inline void synthFMalt_FMalt_pitchBend_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_pitchBend(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t semitones){
   if(semitones != _ctx.bend){
      _ctx.bend = semitones;
      synthFMalt_FMalt_setFrequency(_ctx,_ctx.freq);
   }
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setPoly_type;

static_inline void synthFMalt_FMalt_setPoly_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setPoly(synthFMalt_FMalt__ctx_type_0 &_ctx, uint8_t flag){
   synthFMalt_Notes_setPoly(_ctx.playingnotes,flag);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setSustain_type;

static_inline void synthFMalt_FMalt_setSustain_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_setSustain(synthFMalt_FMalt__ctx_type_0 &_ctx, uint8_t flag);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_noteOn_type;

static_inline void synthFMalt_FMalt_noteOn_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

uint8_t synthFMalt_FMalt_noteOn(synthFMalt_FMalt__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_noteOff_type;

static_inline void synthFMalt_FMalt_noteOff_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_noteOff(synthFMalt_FMalt__ctx_type_0 &_ctx, int note, int channel);

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorADSR_type;

static_inline void synthFMalt_FMalt_setModulatorADSR_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorADSR(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_ADSR_config(_ctx.modulatoradsr,a,d,s,r);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setCarrierADSR_type;

static_inline void synthFMalt_FMalt_setCarrierADSR_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setCarrierADSR(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_ADSR_config(_ctx.carrieradsr,a,d,s,r);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorWavetable_type;

static_inline void synthFMalt_FMalt_setModulatorWavetable_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorWavetable(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFMalt_OSCalt_setWavetable(_ctx.modulator,wavetableIdx);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setModulatorWavetablePhase_type;

static_inline void synthFMalt_FMalt_setModulatorWavetablePhase_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setModulatorWavetablePhase(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthFMalt_OSCalt_setWavetablePhase(_ctx.modulator,phaseIdx);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setCarrierWavetable_type;

static_inline void synthFMalt_FMalt_setCarrierWavetable_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setCarrierWavetable(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFMalt_OSCalt_setWavetable(_ctx.carrier,wavetableIdx);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_setCarrierWavetablePhase_type;

static_inline void synthFMalt_FMalt_setCarrierWavetablePhase_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_FMalt_setCarrierWavetablePhase(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthFMalt_OSCalt_setWavetablePhase(_ctx.carrier,phaseIdx);
};

typedef synthFMalt_FMalt__ctx_type_0 synthFMalt_FMalt_default_type;

static_inline void synthFMalt_FMalt_default_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_FMalt_default(synthFMalt_FMalt__ctx_type_0 &_ctx);

typedef struct synthFMalt_Poly__ctx_type_0 {
   synthFMalt_FMalt__ctx_type_0 voice3;
   synthFMalt_FMalt__ctx_type_0 voice2;
   synthFMalt_FMalt__ctx_type_0 voice1;
   synthFMalt_FMalt__ctx_type_0 voice0;
   uint8_t should_leftovers;
   fix16_t lastModulatorWavetablePhaseIdx;
   fix16_t lastModulatorWavetableIdx;
   fix16_t lastCarrierWavetablePhaseIdx;
   fix16_t lastCarrierWavetableIdx;
   uint8_t initModulatorWavetable;
   uint8_t initCarrierWavetable;
} synthFMalt_Poly__ctx_type_0;

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_getSample_type;

void synthFMalt_Poly__ctx_type_0_init(synthFMalt_Poly__ctx_type_0 &_output_);

static_inline void synthFMalt_Poly_getSample_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFMalt_Poly_getSample(synthFMalt_Poly__ctx_type_0 &_ctx, int voice);

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_runVoice_type;

static_inline void synthFMalt_Poly_runVoice_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_runVoice(synthFMalt_Poly__ctx_type_0 &_ctx, int voice, int nb, fix16_t (&buff)[128]){
   switch(voice) {
      case 0:
         synthFMalt_FMalt_process_bufferTo(_ctx.voice0,nb,buff);
      break;
      case 1:
         synthFMalt_FMalt_process_bufferTo(_ctx.voice1,nb,buff);
      break;
      case 2:
         synthFMalt_FMalt_process_bufferTo(_ctx.voice2,nb,buff);
      break;
      case 3:
         synthFMalt_FMalt_process_bufferTo(_ctx.voice3,nb,buff);
      break;
    
   }
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_sendNoteOn_type;

static_inline void synthFMalt_Poly_sendNoteOn_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_sendNoteOn(synthFMalt_Poly__ctx_type_0 &_ctx, int voice, int note, int velocity, int channel){
   switch(voice) {
      case 0:
         synthFMalt_FMalt_noteOn(_ctx.voice0,note,velocity,channel);
      break;
      case 1:
         synthFMalt_FMalt_noteOn(_ctx.voice1,note,velocity,channel);
      break;
      case 2:
         synthFMalt_FMalt_noteOn(_ctx.voice2,note,velocity,channel);
      break;
      case 3:
         synthFMalt_FMalt_noteOn(_ctx.voice3,note,velocity,channel);
      break;
    
   }
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_sendNoteOff_type;

static_inline void synthFMalt_Poly_sendNoteOff_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_sendNoteOff(synthFMalt_Poly__ctx_type_0 &_ctx, int voice, int note, int channel){
   switch(voice) {
      case 0:
         synthFMalt_FMalt_noteOff(_ctx.voice0,note,channel);
      break;
      case 1:
         synthFMalt_FMalt_noteOff(_ctx.voice1,note,channel);
      break;
      case 2:
         synthFMalt_FMalt_noteOff(_ctx.voice2,note,channel);
      break;
      case 3:
         synthFMalt_FMalt_noteOff(_ctx.voice3,note,channel);
      break;
    
   }
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_setSamplerate_type;

static_inline void synthFMalt_Poly_setSamplerate_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_setSamplerate(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t fs){
   synthFMalt_FMalt_setSamplerate(_ctx.voice0,fs);
   synthFMalt_FMalt_setSamplerate(_ctx.voice1,fs);
   synthFMalt_FMalt_setSamplerate(_ctx.voice2,fs);
   synthFMalt_FMalt_setSamplerate(_ctx.voice3,fs);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetSustain_type;

static_inline void synthFMalt_Poly_synthSetSustain_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetSustain(synthFMalt_Poly__ctx_type_0 &_ctx, uint8_t flag){
   synthFMalt_FMalt_setSustain(_ctx.voice0,flag);
   synthFMalt_FMalt_setSustain(_ctx.voice1,flag);
   synthFMalt_FMalt_setSustain(_ctx.voice2,flag);
   synthFMalt_FMalt_setSustain(_ctx.voice3,flag);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthPitchBend_type;

static_inline void synthFMalt_Poly_synthPitchBend_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthPitchBend(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t semitones){
   synthFMalt_FMalt_pitchBend(_ctx.voice0,semitones);
   synthFMalt_FMalt_pitchBend(_ctx.voice1,semitones);
   synthFMalt_FMalt_pitchBend(_ctx.voice2,semitones);
   synthFMalt_FMalt_pitchBend(_ctx.voice3,semitones);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetLoop_type;

static_inline void synthFMalt_Poly_synthSetLoop_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetLoop(synthFMalt_Poly__ctx_type_0 &_ctx, uint8_t flag){
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetLoopStart_type;

static_inline void synthFMalt_Poly_synthSetLoopStart_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetLoopStart(synthFMalt_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetLoopEnd_type;

static_inline void synthFMalt_Poly_synthSetLoopEnd_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetLoopEnd(synthFMalt_Poly__ctx_type_0 &_ctx, int value){
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthGetLoop_type;

static_inline void synthFMalt_Poly_synthGetLoop_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Poly_synthGetLoop(synthFMalt_Poly__ctx_type_0 &_ctx){
   return false;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthGetLoopStart_type;

static_inline void synthFMalt_Poly_synthGetLoopStart_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Poly_synthGetLoopStart(synthFMalt_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthGetLoopEnd_type;

static_inline void synthFMalt_Poly_synthGetLoopEnd_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Poly_synthGetLoopEnd(synthFMalt_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthGetSize_type;

static_inline void synthFMalt_Poly_synthGetSize_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Poly_synthGetSize(synthFMalt_Poly__ctx_type_0 &_ctx){
   return 0;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthGetNbWavetables_type;

static_inline void synthFMalt_Poly_synthGetNbWavetables_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Poly_synthGetNbWavetables(synthFMalt_Poly__ctx_type_0 &_ctx){
   return 8;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorWavetable_type;

static_inline void synthFMalt_Poly_synthSetModulatorWavetable_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Poly_synthSetModulatorWavetable(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx);

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorWavetablePhase_type;

static_inline void synthFMalt_Poly_synthSetModulatorWavetablePhase_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Poly_synthSetModulatorWavetablePhase(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx);

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetCarrierWavetable_type;

static_inline void synthFMalt_Poly_synthSetCarrierWavetable_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Poly_synthSetCarrierWavetable(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx);

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetCarrierWavetablePhase_type;

static_inline void synthFMalt_Poly_synthSetCarrierWavetablePhase_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Poly_synthSetCarrierWavetablePhase(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx);

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorRatio_type;

static_inline void synthFMalt_Poly_synthSetModulatorRatio_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorRatio(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_FMalt_setModulatorRatio(_ctx.voice0,ratio);
   synthFMalt_FMalt_setModulatorRatio(_ctx.voice1,ratio);
   synthFMalt_FMalt_setModulatorRatio(_ctx.voice2,ratio);
   synthFMalt_FMalt_setModulatorRatio(_ctx.voice3,ratio);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetCarrierRatio_type;

static_inline void synthFMalt_Poly_synthSetCarrierRatio_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetCarrierRatio(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_FMalt_setCarrierRatio(_ctx.voice0,ratio);
   synthFMalt_FMalt_setCarrierRatio(_ctx.voice1,ratio);
   synthFMalt_FMalt_setCarrierRatio(_ctx.voice2,ratio);
   synthFMalt_FMalt_setCarrierRatio(_ctx.voice3,ratio);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorLevel_type;

static_inline void synthFMalt_Poly_synthSetModulatorLevel_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorLevel(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t level){
   synthFMalt_FMalt_setModulatorLevel(_ctx.voice0,level);
   synthFMalt_FMalt_setModulatorLevel(_ctx.voice1,level);
   synthFMalt_FMalt_setModulatorLevel(_ctx.voice2,level);
   synthFMalt_FMalt_setModulatorLevel(_ctx.voice3,level);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorTargetLevel_type;

static_inline void synthFMalt_Poly_synthSetModulatorTargetLevel_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorTargetLevel(synthFMalt_Poly__ctx_type_0 &_ctx, uint8_t targetLevel){
   synthFMalt_FMalt_setModulatorTargetLevel(_ctx.voice0,targetLevel);
   synthFMalt_FMalt_setModulatorTargetLevel(_ctx.voice1,targetLevel);
   synthFMalt_FMalt_setModulatorTargetLevel(_ctx.voice2,targetLevel);
   synthFMalt_FMalt_setModulatorTargetLevel(_ctx.voice3,targetLevel);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorPhaseShift_type;

static_inline void synthFMalt_Poly_synthSetModulatorPhaseShift_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorPhaseShift(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_FMalt_setModulatorPhaseShift(_ctx.voice0,ratio);
   synthFMalt_FMalt_setModulatorPhaseShift(_ctx.voice1,ratio);
   synthFMalt_FMalt_setModulatorPhaseShift(_ctx.voice2,ratio);
   synthFMalt_FMalt_setModulatorPhaseShift(_ctx.voice3,ratio);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorFeedback_type;

static_inline void synthFMalt_Poly_synthSetModulatorFeedback_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorFeedback(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_FMalt_setModulatorFeedback(_ctx.voice0,ratio);
   synthFMalt_FMalt_setModulatorFeedback(_ctx.voice1,ratio);
   synthFMalt_FMalt_setModulatorFeedback(_ctx.voice2,ratio);
   synthFMalt_FMalt_setModulatorFeedback(_ctx.voice3,ratio);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetModulatorADSR_type;

static_inline void synthFMalt_Poly_synthSetModulatorADSR_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetModulatorADSR(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_FMalt_setModulatorADSR(_ctx.voice0,a,d,s,r);
   synthFMalt_FMalt_setModulatorADSR(_ctx.voice1,a,d,s,r);
   synthFMalt_FMalt_setModulatorADSR(_ctx.voice2,a,d,s,r);
   synthFMalt_FMalt_setModulatorADSR(_ctx.voice3,a,d,s,r);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetCarrierADSR_type;

static_inline void synthFMalt_Poly_synthSetCarrierADSR_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetCarrierADSR(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_FMalt_setCarrierADSR(_ctx.voice0,a,d,s,r);
   synthFMalt_FMalt_setCarrierADSR(_ctx.voice1,a,d,s,r);
   synthFMalt_FMalt_setCarrierADSR(_ctx.voice2,a,d,s,r);
   synthFMalt_FMalt_setCarrierADSR(_ctx.voice3,a,d,s,r);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_synthSetEnvDecimationFactor_type;

static_inline void synthFMalt_Poly_synthSetEnvDecimationFactor_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_synthSetEnvDecimationFactor(synthFMalt_Poly__ctx_type_0 &_ctx, int newFactor){
   synthFMalt_FMalt_setEnvDecimationFactor(_ctx.voice0,newFactor);
   synthFMalt_FMalt_setEnvDecimationFactor(_ctx.voice1,newFactor);
   synthFMalt_FMalt_setEnvDecimationFactor(_ctx.voice2,newFactor);
   synthFMalt_FMalt_setEnvDecimationFactor(_ctx.voice3,newFactor);
}

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_shouldLeftOvers_type;

static_inline void synthFMalt_Poly_shouldLeftOvers_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Poly_shouldLeftOvers(synthFMalt_Poly__ctx_type_0 &_ctx){
   return _ctx.should_leftovers;
};

typedef synthFMalt_Poly__ctx_type_0 synthFMalt_Poly_default_type;

static_inline void synthFMalt_Poly_default_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Poly_default(synthFMalt_Poly__ctx_type_0 &_ctx);

typedef struct synthFMalt_Poly__ctx_type_1 {
   synthFMalt_Poly__ctx_type_0 _inst179;
} synthFMalt_Poly__ctx_type_1;

typedef synthFMalt_Poly__ctx_type_1 synthFMalt_Poly_dummy_type;

static_inline void synthFMalt_Poly__ctx_type_1_init(synthFMalt_Poly__ctx_type_1 &_output_){
   synthFMalt_Poly__ctx_type_1 &_ctx = _output_;
   synthFMalt_Poly__ctx_type_0_init(_ctx._inst179);
   
   return ;
}

static_inline void synthFMalt_Poly_dummy_init(synthFMalt_Poly__ctx_type_1 &_output_){
   synthFMalt_Poly__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_Poly_dummy(synthFMalt_Poly__ctx_type_1 &_ctx){
   fix16_t buff[128];
   synthFMalt_Buffer_buffer(buff);
   synthFMalt_Poly_runVoice(_ctx._inst179,0,0,buff);
}

typedef struct synthFMalt_Voice__ctx_type_0 {
   synthFMalt_Notes__ctx_type_0 voicesinactive;
   synthFMalt_Notes__ctx_type_0 voicesactive;
   fix16_t voices_ratio;
   int voices[4];
   synthFMalt_Notes__ctx_type_0 voiceinsactive;
   uint8_t reuse;
   synthFMalt_Poly__ctx_type_0 poly;
   int number_voices;
   int notes[128];
   uint8_t normalize;
   fix16_t leftovers_decay;
   fix16_t leftovers;
   int last_velocities[4];
   fix16_t last_values[4];
   fix16_t fs;
   fix16_t buffer_v0[128];
} synthFMalt_Voice__ctx_type_0;

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_process_type;

void synthFMalt_Voice__ctx_type_0_init(synthFMalt_Voice__ctx_type_0 &_output_);

static_inline void synthFMalt_Voice_process_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

fix16_t synthFMalt_Voice_process(synthFMalt_Voice__ctx_type_0 &_ctx);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_process_bufferTo_type;

static_inline void synthFMalt_Voice_process_bufferTo_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_process_bufferTo(synthFMalt_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[128]);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_setReuse_type;

static_inline void synthFMalt_Voice_setReuse_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_setReuse(synthFMalt_Voice__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.reuse = flag;
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_noteOff_type;

static_inline void synthFMalt_Voice_noteOff_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_noteOff(synthFMalt_Voice__ctx_type_0 &_ctx, int note, int channel);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_noteOn_type;

static_inline void synthFMalt_Voice_noteOn_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_noteOn(synthFMalt_Voice__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_setNbVoices_type;

static_inline void synthFMalt_Voice_setNbVoices_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_setNbVoices(synthFMalt_Voice__ctx_type_0 &_ctx, int nbvoices);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_setNormalize_type;

static_inline void synthFMalt_Voice_setNormalize_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_setNormalize(synthFMalt_Voice__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.normalize = flag;
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_setSamplerate_type;

static_inline void synthFMalt_Voice_setSamplerate_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_setSamplerate(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t newFs);

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetSustain_type;

static_inline void synthFMalt_Voice_synthSetSustain_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetSustain(synthFMalt_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthFMalt_Poly_synthSetSustain(_ctx.poly,flag);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthPitchBend_type;

static_inline void synthFMalt_Voice_synthPitchBend_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthPitchBend(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t semitones){
   synthFMalt_Poly_synthPitchBend(_ctx.poly,semitones);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetLoop_type;

static_inline void synthFMalt_Voice_synthSetLoop_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetLoop(synthFMalt_Voice__ctx_type_0 &_ctx, uint8_t flag){
   synthFMalt_Poly_synthSetLoop(_ctx.poly,flag);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetLoopStart_type;

static_inline void synthFMalt_Voice_synthSetLoopStart_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetLoopStart(synthFMalt_Voice__ctx_type_0 &_ctx, int value){
   synthFMalt_Poly_synthSetLoopStart(_ctx.poly,value);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetLoopEnd_type;

static_inline void synthFMalt_Voice_synthSetLoopEnd_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetLoopEnd(synthFMalt_Voice__ctx_type_0 &_ctx, int value){
   synthFMalt_Poly_synthSetLoopEnd(_ctx.poly,value);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthGetLoop_type;

static_inline void synthFMalt_Voice_synthGetLoop_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t synthFMalt_Voice_synthGetLoop(synthFMalt_Voice__ctx_type_0 &_ctx){
   return synthFMalt_Poly_synthGetLoop(_ctx.poly);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthGetLoopStart_type;

static_inline void synthFMalt_Voice_synthGetLoopStart_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Voice_synthGetLoopStart(synthFMalt_Voice__ctx_type_0 &_ctx){
   return synthFMalt_Poly_synthGetLoopStart(_ctx.poly);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthGetLoopEnd_type;

static_inline void synthFMalt_Voice_synthGetLoopEnd_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Voice_synthGetLoopEnd(synthFMalt_Voice__ctx_type_0 &_ctx){
   return synthFMalt_Poly_synthGetLoopEnd(_ctx.poly);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthGetSize_type;

static_inline void synthFMalt_Voice_synthGetSize_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Voice_synthGetSize(synthFMalt_Voice__ctx_type_0 &_ctx){
   return synthFMalt_Poly_synthGetSize(_ctx.poly);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthGetNbWavetables_type;

static_inline void synthFMalt_Voice_synthGetNbWavetables_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline int synthFMalt_Voice_synthGetNbWavetables(synthFMalt_Voice__ctx_type_0 &_ctx){
   return synthFMalt_Poly_synthGetNbWavetables(_ctx.poly);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorWavetable_type;

static_inline void synthFMalt_Voice_synthSetModulatorWavetable_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorWavetable(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFMalt_Poly_synthSetModulatorWavetable(_ctx.poly,wavetableIdx);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorWavetablePhase_type;

static_inline void synthFMalt_Voice_synthSetModulatorWavetablePhase_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorWavetablePhase(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthFMalt_Poly_synthSetModulatorWavetablePhase(_ctx.poly,phaseIdx);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetCarrierWavetable_type;

static_inline void synthFMalt_Voice_synthSetCarrierWavetable_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetCarrierWavetable(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   synthFMalt_Poly_synthSetCarrierWavetable(_ctx.poly,wavetableIdx);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetCarrierWavetablePhase_type;

static_inline void synthFMalt_Voice_synthSetCarrierWavetablePhase_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetCarrierWavetablePhase(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t phaseIdx){
   synthFMalt_Poly_synthSetCarrierWavetablePhase(_ctx.poly,phaseIdx);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorRatio_type;

static_inline void synthFMalt_Voice_synthSetModulatorRatio_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorRatio(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_Poly_synthSetModulatorRatio(_ctx.poly,ratio);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetCarrierRatio_type;

static_inline void synthFMalt_Voice_synthSetCarrierRatio_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetCarrierRatio(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_Poly_synthSetCarrierRatio(_ctx.poly,ratio);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorLevel_type;

static_inline void synthFMalt_Voice_synthSetModulatorLevel_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorLevel(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t level){
   synthFMalt_Poly_synthSetModulatorLevel(_ctx.poly,level);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorTargetLevel_type;

static_inline void synthFMalt_Voice_synthSetModulatorTargetLevel_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorTargetLevel(synthFMalt_Voice__ctx_type_0 &_ctx, uint8_t targetLevel){
   synthFMalt_Poly_synthSetModulatorTargetLevel(_ctx.poly,targetLevel);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorPhaseShift_type;

static_inline void synthFMalt_Voice_synthSetModulatorPhaseShift_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorPhaseShift(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_Poly_synthSetModulatorPhaseShift(_ctx.poly,ratio);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorFeedback_type;

static_inline void synthFMalt_Voice_synthSetModulatorFeedback_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorFeedback(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t ratio){
   synthFMalt_Poly_synthSetModulatorFeedback(_ctx.poly,ratio);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetModulatorADSR_type;

static_inline void synthFMalt_Voice_synthSetModulatorADSR_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetModulatorADSR(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_Poly_synthSetModulatorADSR(_ctx.poly,a,d,s,r);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetCarrierADSR_type;

static_inline void synthFMalt_Voice_synthSetCarrierADSR_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetCarrierADSR(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   synthFMalt_Poly_synthSetCarrierADSR(_ctx.poly,a,d,s,r);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_synthSetEnvDecimationFactor_type;

static_inline void synthFMalt_Voice_synthSetEnvDecimationFactor_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_synthSetEnvDecimationFactor(synthFMalt_Voice__ctx_type_0 &_ctx, int newFactor){
   synthFMalt_Poly_synthSetEnvDecimationFactor(_ctx.poly,newFactor);
};

typedef synthFMalt_Voice__ctx_type_0 synthFMalt_Voice_default_type;

static_inline void synthFMalt_Voice_default_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0_init(_output_);
   return ;
}

void synthFMalt_Voice_default(synthFMalt_Voice__ctx_type_0 &_ctx);

typedef struct synthFMalt_Voice__ctx_type_1 {
   synthFMalt_Voice__ctx_type_0 _inst1b9;
} synthFMalt_Voice__ctx_type_1;

typedef synthFMalt_Voice__ctx_type_1 synthFMalt_Voice_dummy_type;

static_inline void synthFMalt_Voice__ctx_type_1_init(synthFMalt_Voice__ctx_type_1 &_output_){
   synthFMalt_Voice__ctx_type_1 &_ctx = _output_;
   synthFMalt_Voice__ctx_type_0_init(_ctx._inst1b9);
   
   return ;
}

static_inline void synthFMalt_Voice_dummy_init(synthFMalt_Voice__ctx_type_1 &_output_){
   synthFMalt_Voice__ctx_type_1_init(_output_);
   return ;
}

static_inline void synthFMalt_Voice_dummy(synthFMalt_Voice__ctx_type_1 &_ctx){
   fix16_t buff[128];
   synthFMalt_Buffer_buffer(buff);
   synthFMalt_Voice_process_bufferTo(_ctx._inst1b9,0,buff);
}



#endif // SYNTHFMALT_H
