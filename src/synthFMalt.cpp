
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synthFMalt.h"

int synthFMalt_Random_irandom(synthFMalt_Random__ctx_type_0 &_ctx){
   _ctx.next = (12345 + (1103515245 * _ctx.next));
   int tmp;
   tmp = (_ctx.next / 65536);
   if(tmp < 0){
      tmp = (- tmp);
   }
   return (tmp % 32768);
}

fix16_t synthFMalt_Wavetable_getSample(int wavetableIdx, int index){
   fix16_t sample;
   sample = 0x0 /* 0.000000 */;
   switch(wavetableIdx) {
      case 0:
         sample = synthFMalt_Wavetable_sin_wave(0,index);
      break;
      case 1:
         sample = synthFMalt_Wavetable_tri_wave(0,index);
      break;
      case 2:
         sample = synthFMalt_Wavetable_saw_wave(0,index);
      break;
      case 3:
         sample = synthFMalt_Wavetable_square_wave(0,index);
      break;
      case 4:
         sample = synthFMalt_Wavetable_sin_wave(0,index);
      break;
    
   }
   return sample;
}

fix16_t synthFMalt_Wavetable_getSampleFrom(fix16_t (&wavetable)[512], fix16_t index){
   int idx1;
   idx1 = fix_to_int(index);
   int idx2;
   idx2 = (1 + idx1);
   if(idx2 >= 512){
      idx2 = (idx2 % 512);
      if(idx1 >= 512){
         idx1 = (idx1 % 512);
      }
   }
   return (pgm_read_word_near(wavetable + idx1) + fix_mul((index % 0x10000 /* 1.000000 */),(pgm_read_word_near(wavetable + idx2) + (- pgm_read_word_near(wavetable + idx1)))));
}

void synthFMalt_Wavetable_morphTo(fix16_t wavetableIdx, fix16_t phase, fix16_t (&buffer)[512]){
   wavetableIdx = fix_clip(wavetableIdx,0x0 /* 0.000000 */,0x40000 /* 4.000000 */);
   int phase_shift;
   phase_shift = fix_to_int((phase << 9));
   int wavetable1;
   wavetable1 = fix_to_int(fix_floor(wavetableIdx));
   int wavetable2;
   wavetable2 = (1 + wavetable1);
   if(wavetable2 >= 4){
      wavetable2 = 0;
   }
   if(wavetable1 >= 4){
      wavetable1 = 0;
   }
   fix16_t ratio;
   ratio = (wavetableIdx % 0x10000 /* 1.000000 */);
   int i;
   i = 0;
   fix16_t s1;
   fix16_t s2;
   while(i < 512){
      s1 = synthFMalt_Wavetable_getSample(wavetable1,(i + phase_shift));
      s2 = synthFMalt_Wavetable_getSample(wavetable2,i);
      buffer[i] = (s1 + fix_mul(ratio,(s2 + (- s1))));
      i = (1 + i);
   }
}

void synthFMalt_Wavetable_getRandomMorph(synthFMalt_Wavetable__ctx_type_14 &_ctx, fix16_t (&oBuff)[512]){
   int basetable;
   basetable = 0;
   if(4 > 1){
      basetable = (synthFMalt_Random_irandom(_ctx.rando) % 3);
   }
   fix16_t wavetableIdx;
   wavetableIdx = (synthFMalt_Random_random(_ctx.rando) + int_to_fix(basetable));
   synthFMalt_Wavetable_bufferWavetable(oBuff);
   synthFMalt_Wavetable_morphTo(wavetableIdx,0x0 /* 0.000000 */,oBuff);
}

void synthFMalt_Wavetable__ctx_type_15_init(synthFMalt_Wavetable__ctx_type_15 &_output_){
   synthFMalt_Wavetable__ctx_type_15 &_ctx = _output_;
   synthFMalt_Random__ctx_type_0_init(_ctx._inst345);
   synthFMalt_Wavetable__ctx_type_14_init(_ctx._inst1c8);
   
   return ;
}

fix16_t synthFMalt_Wavetable_getRandRandomMorph(synthFMalt_Wavetable__ctx_type_15 &_ctx, fix16_t (&oBuff)[512]){
   synthFMalt_Wavetable_getRandomMorph(_ctx._inst1c8,oBuff);
   int idx;
   idx = 0;
   if(512 > 0){
      idx = (synthFMalt_Random_irandom(_ctx._inst345) % 512);
   }
   return synthFMalt_Wavetable_getSampleFrom(oBuff,int_to_fix(idx));
}

void synthFMalt_Buffer_buffer_large(fix16_t (&oBuff)[2048]){
   int i;
   i = 0;
   while(i < 2048){
      oBuff[i] = 0x0 /* 0.000000 */;
      i = (1 + i);
   }
}

fix16_t synthFMalt_OSCalt_getSampleMorph(int wavetable1, int wavetable2, fix16_t wavetable_ratio, int phase_shift, fix16_t index){
   int idx1;
   idx1 = fix_to_int(index);
   int idx2;
   idx2 = (1 + idx1);
   fix16_t w1_s1;
   w1_s1 = synthFMalt_Wavetable_getSample(wavetable1,(idx1 + phase_shift));
   fix16_t w1_s2;
   w1_s2 = synthFMalt_Wavetable_getSample(wavetable1,(idx2 + phase_shift));
   fix16_t w2_s1;
   w2_s1 = synthFMalt_Wavetable_getSample(wavetable2,idx1);
   fix16_t w2_s2;
   w2_s2 = synthFMalt_Wavetable_getSample(wavetable2,idx2);
   fix16_t s1;
   s1 = (w1_s1 + fix_mul(wavetable_ratio,(w2_s1 + (- w1_s1))));
   fix16_t s2;
   s2 = (w1_s2 + fix_mul(wavetable_ratio,(w2_s2 + (- w1_s2))));
   return (s1 + fix_mul((index % 0x10000 /* 1.000000 */),(s2 + (- s1))));
}

void synthFMalt_OSCalt__ctx_type_1_init(synthFMalt_OSCalt__ctx_type_1 &_output_){
   synthFMalt_OSCalt__ctx_type_1 &_ctx = _output_;
   _ctx.wavetable_ratio = 0x0 /* 0.000000 */;
   _ctx.wavetable_phase_shift = 0;
   _ctx.wavetable2 = 0;
   _ctx.wavetable1 = 0;
   _ctx.stepRatio = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.rsize = 0x0 /* 0.000000 */;
   _ctx.phase_base = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.last_val_feedback = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   synthFMalt_OSCalt_default(_ctx);
   
   return ;
}

void synthFMalt_OSCalt_process_bufferTo(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t (&phase_shift)[128], fix16_t (&phase_env)[128], fix16_t phase_shift_level, uint8_t shift_level, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   fix16_t max_phase;
   max_phase = (_ctx.rsize << 1);
   fix16_t phase_range;
   phase_range = fix_mul(max_phase,phase_shift_level);
   fix16_t level_shift_coeff;
   level_shift_coeff = (phase_shift_level >> 1);
   int i;
   i = 0;
   if(shift_level){
      while(i < nb){
         _ctx.phase = (_ctx.phase + _ctx.step);
         while(_ctx.phase > _ctx.rsize){
            _ctx.phase = (_ctx.phase + (- _ctx.rsize));
         }
         oBuffer[i] = fix_mul(fix_mul(pgm_read_word_near(env + i),synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,_ctx.phase)),(0x10000 /* 1.000000 */ + (- fix_mul(level_shift_coeff,(pgm_read_word_near(phase_env + i) + pgm_read_word_near(phase_shift + i))))));
         i = (1 + i);
      }
   }
   else
   {
      while(i < nb){
         _ctx.phase = (_ctx.phase + _ctx.step);
         while(_ctx.phase > _ctx.rsize){
            _ctx.phase = (_ctx.phase + (- _ctx.rsize));
         }
         oBuffer[i] = fix_mul(pgm_read_word_near(env + i),synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,(_ctx.phase + max_phase + fix_mul(phase_range,pgm_read_word_near(phase_shift + i)))));
         i = (1 + i);
      }
   }
}

void synthFMalt_OSCalt_process_bufferTo_simple(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   int i;
   i = 0;
   while(i < nb){
      _ctx.phase = (_ctx.phase + _ctx.step);
      while(_ctx.phase > _ctx.rsize){
         _ctx.phase = (_ctx.phase + (- _ctx.rsize));
      }
      oBuffer[i] = fix_mul(pgm_read_word_near(env + i),synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,(_ctx.phase + _ctx.phase_base)));
      i = (1 + i);
   }
}

void synthFMalt_OSCalt_process_bufferTo_feedback(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&env)[128], fix16_t feedback, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   fix16_t max_phase;
   max_phase = (_ctx.rsize << 1);
   fix16_t phase_range;
   phase_range = fix_mul(feedback,max_phase);
   int i;
   i = 0;
   while(i < nb){
      _ctx.phase = (_ctx.phase + _ctx.step);
      while(_ctx.phase > _ctx.rsize){
         _ctx.phase = (_ctx.phase + (- _ctx.rsize));
      }
      _ctx.last_val_feedback = fix_mul(pgm_read_word_near(env + i),synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,(_ctx.phase + _ctx.phase_base + max_phase + fix_mul(_ctx.last_val_feedback,phase_range))));
      oBuffer[i] = _ctx.last_val_feedback;
      i = (1 + i);
   }
}

void synthFMalt_OSCalt_process_bufferTo_simplest(synthFMalt_OSCalt__ctx_type_1 &_ctx, int nb, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   int i;
   i = 0;
   while(i < nb){
      _ctx.phase = (_ctx.phase + _ctx.step);
      while(_ctx.phase > _ctx.rsize){
         _ctx.phase = (_ctx.phase + (- _ctx.rsize));
      }
      oBuffer[i] = synthFMalt_OSCalt_getSampleMorph(_ctx.wavetable1,_ctx.wavetable2,_ctx.wavetable_ratio,_ctx.wavetable_phase_shift,(_ctx.phase + _ctx.phase_base));
      i = (1 + i);
   }
}

void synthFMalt_OSCalt_setSamplerate(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
      _ctx.stepRatio = fix_div(_ctx.rsize,_ctx.fs);
   }
   synthFMalt_OSCalt_updateStep(_ctx);
}

void synthFMalt_OSCalt_setWavetable(synthFMalt_OSCalt__ctx_type_1 &_ctx, fix16_t wavetableIdx){
   wavetableIdx = fix_clip(wavetableIdx,0x0 /* 0.000000 */,0x40000 /* 4.000000 */);
   _ctx.wavetable1 = fix_to_int(fix_floor(wavetableIdx));
   _ctx.wavetable2 = (1 + _ctx.wavetable1);
   if(_ctx.wavetable2 >= 4){
      _ctx.wavetable2 = 0;
   }
   if(_ctx.wavetable1 >= 4){
      _ctx.wavetable1 = 0;
   }
   _ctx.wavetable_ratio = (wavetableIdx % 0x10000 /* 1.000000 */);
}

void synthFMalt_OSCalt_default(synthFMalt_OSCalt__ctx_type_1 &_ctx){
   _ctx.rsize = 0x2000000 /* 512.000000 */;
   synthFMalt_OSCalt_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFMalt_OSCalt_setFrequency(_ctx,0x70a3 /* 0.440000 */);
   synthFMalt_OSCalt_setWavetable(_ctx,0x0 /* 0.000000 */);
   synthFMalt_OSCalt_setWavetablePhase(_ctx,0x0 /* 0.000000 */);
}

void synthFMalt_OSCalt__ctx_type_2_init(synthFMalt_OSCalt__ctx_type_2 &_output_){
   synthFMalt_OSCalt__ctx_type_2 &_ctx = _output_;
   synthFMalt_OSCalt__ctx_type_1_init(_ctx._inst4d4);
   synthFMalt_OSCalt__ctx_type_1_init(_ctx._inst3d6);
   synthFMalt_OSCalt__ctx_type_1_init(_ctx._inst218);
   synthFMalt_OSCalt__ctx_type_1_init(_ctx._inst149);
   
   return ;
}

void synthFMalt_OSCalt_dummy(synthFMalt_OSCalt__ctx_type_2 &_ctx){
   fix16_t buff[128];
   synthFMalt_Buffer_buffer(buff);
   synthFMalt_OSCalt_process_bufferTo(_ctx._inst149,0,buff,buff,buff,0x0 /* 0.000000 */,false,buff);
   synthFMalt_OSCalt_process_bufferTo_simple(_ctx._inst218,0,buff,buff);
   synthFMalt_OSCalt_process_bufferTo_feedback(_ctx._inst3d6,0,buff,0x0 /* 0.000000 */,buff);
   synthFMalt_OSCalt_process_bufferTo_simplest(_ctx._inst4d4,0,buff);
}

void synthFMalt_Notes__ctx_type_0_init(synthFMalt_Notes__ctx_type_0 &_output_){
   synthFMalt_Notes__ctx_type_0 &_ctx = _output_;
   _ctx.poly = false;
   int_init_array(128,0,_ctx.notes);
   _ctx.nb_notes = 0;
   int_init_array(128,0,_ctx.last_notes);
   _ctx.allowDuplicates = false;
   synthFMalt_Notes_default(_ctx);
   
   return ;
}

int synthFMalt_Notes_firstNote(synthFMalt_Notes__ctx_type_0 &_ctx){
   int first_played;
   first_played = 0;
   if(_ctx.nb_notes > 0){
      first_played = pgm_read_word_near(_ctx.last_notes + 0);
   }
   return first_played;
}

int synthFMalt_Notes_lastNote(synthFMalt_Notes__ctx_type_0 &_ctx){
   int last_played;
   last_played = 0;
   if(_ctx.nb_notes > 0){
      last_played = pgm_read_word_near(_ctx.last_notes + ((-1) + _ctx.nb_notes));
   }
   return last_played;
}

uint8_t synthFMalt_Notes_noteOff(synthFMalt_Notes__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   if(pgm_read_word_near(_ctx.notes + note) > 0){
      if(_ctx.poly){
         _ctx.notes[note] = 0;
         _ctx.nb_notes = 0;
      }
      else
      {
         int i;
         i = ((-1) + pgm_read_word_near(_ctx.notes + note));
         while(i < _ctx.nb_notes){
            if(i < 127){
               _ctx.last_notes[i] = pgm_read_word_near(_ctx.last_notes + (1 + i));
            }
            else
            {
               _ctx.last_notes[i] = 0;
            }
            if(pgm_read_word_near(_ctx.last_notes + i) > 0){
               _ctx.notes[((-1) + pgm_read_word_near(_ctx.last_notes + i))] = (1 + i);
            }
            i = (1 + i);
         }
         _ctx.notes[note] = 0;
         _ctx.nb_notes = ((-1) + _ctx.nb_notes);
         if(_ctx.nb_notes < 0){
            _ctx.nb_notes = 0;
         }
      }
      return true;
   }
   return false;
}

uint8_t synthFMalt_Notes_noteOn(synthFMalt_Notes__ctx_type_0 &_ctx, int note, int velocity, int channel){
   note = int_clip(note,0,127);
   uint8_t isNew;
   isNew = (pgm_read_word_near(_ctx.notes + note) <= 0);
   if(_ctx.allowDuplicates || isNew){
      if(bool_not(_ctx.poly)){
         if(bool_not(isNew)){
            synthFMalt_Notes_noteOff(_ctx,note,channel);
         }
         _ctx.nb_notes = (1 + _ctx.nb_notes);
         if(_ctx.nb_notes > 128){
            _ctx.nb_notes = 128;
         }
      }
      else
      {
         int last_note;
         last_note = synthFMalt_Notes_lastNote(_ctx);
         if(last_note > 0){
            _ctx.notes[((-1) + last_note)] = 0;
         }
         _ctx.nb_notes = 1;
      }
      _ctx.notes[note] = _ctx.nb_notes;
      _ctx.last_notes[((-1) + _ctx.nb_notes)] = (1 + note);
   }
   return isNew;
}

void synthFMalt_ADSR__ctx_type_0_init(synthFMalt_ADSR__ctx_type_0 &_output_){
   synthFMalt_ADSR__ctx_type_0 &_ctx = _output_;
   _ctx.getMaxValues_ret_3 = 0x0 /* 0.000000 */;
   _ctx.getMaxValues_ret_2 = 0x0 /* 0.000000 */;
   _ctx.getMaxValues_ret_1 = 0x0 /* 0.000000 */;
   _ctx.getMaxValues_ret_0 = 0x0 /* 0.000000 */;
   
   return ;
}

void synthFMalt_ADSR_getMaxValues(synthFMalt_ADSR__ctx_type_0 &_ctx){
   fix16_t max_t;
   max_t = 0x3c0000 /* 60.000000 */;
   _ctx.getMaxValues_ret_0 = max_t;
   _ctx.getMaxValues_ret_1 = max_t;
   _ctx.getMaxValues_ret_2 = 0x10000 /* 1.000000 */;
   _ctx.getMaxValues_ret_3 = max_t;
   return ;
}

fix16_t synthFMalt_ADSR_getMaxAttack(synthFMalt_ADSR__ctx_type_1 &_ctx){
   fix16_t max_a;
   synthFMalt_ADSR_getMaxValues(_ctx._inst173);
   max_a = synthFMalt_ADSR_getMaxValues_ret_0(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_1(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_2(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_3(_ctx._inst173);
   return max_a;
}

fix16_t synthFMalt_ADSR_getMaxDecay(synthFMalt_ADSR__ctx_type_2 &_ctx){
   fix16_t max_d;
   synthFMalt_ADSR_getMaxValues(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_0(_ctx._inst173);
   max_d = synthFMalt_ADSR_getMaxValues_ret_1(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_2(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_3(_ctx._inst173);
   return max_d;
}

fix16_t synthFMalt_ADSR_getMaxSustain(synthFMalt_ADSR__ctx_type_3 &_ctx){
   fix16_t max_s;
   synthFMalt_ADSR_getMaxValues(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_0(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_1(_ctx._inst173);
   max_s = synthFMalt_ADSR_getMaxValues_ret_2(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_3(_ctx._inst173);
   return max_s;
}

fix16_t synthFMalt_ADSR_getMaxRelease(synthFMalt_ADSR__ctx_type_4 &_ctx){
   fix16_t max_r;
   synthFMalt_ADSR_getMaxValues(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_0(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_1(_ctx._inst173);
   synthFMalt_ADSR_getMaxValues_ret_2(_ctx._inst173);
   max_r = synthFMalt_ADSR_getMaxValues_ret_3(_ctx._inst173);
   return max_r;
}

void synthFMalt_ADSR__ctx_type_5_init(synthFMalt_ADSR__ctx_type_5 &_output_){
   synthFMalt_ADSR__ctx_type_5 &_ctx = _output_;
   _ctx.getMinValues_ret_3 = 0x0 /* 0.000000 */;
   _ctx.getMinValues_ret_2 = 0x0 /* 0.000000 */;
   _ctx.getMinValues_ret_1 = 0x0 /* 0.000000 */;
   _ctx.getMinValues_ret_0 = 0x0 /* 0.000000 */;
   
   return ;
}

void synthFMalt_ADSR_getMinValues(synthFMalt_ADSR__ctx_type_5 &_ctx){
   fix16_t min_t;
   min_t = 0x41 /* 0.001000 */;
   _ctx.getMinValues_ret_0 = min_t;
   _ctx.getMinValues_ret_1 = min_t;
   _ctx.getMinValues_ret_2 = 0x0 /* 0.000000 */;
   _ctx.getMinValues_ret_3 = min_t;
   return ;
}

fix16_t synthFMalt_ADSR_getMinAttack(synthFMalt_ADSR__ctx_type_6 &_ctx){
   fix16_t min_a;
   synthFMalt_ADSR_getMinValues(_ctx._inst1d6);
   min_a = synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst1d6);
   return min_a;
}

fix16_t synthFMalt_ADSR_getMinDecay(synthFMalt_ADSR__ctx_type_7 &_ctx){
   fix16_t min_d;
   synthFMalt_ADSR_getMinValues(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst1d6);
   min_d = synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst1d6);
   return min_d;
}

fix16_t synthFMalt_ADSR_getMinSustain(synthFMalt_ADSR__ctx_type_8 &_ctx){
   fix16_t min_s;
   synthFMalt_ADSR_getMinValues(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst1d6);
   min_s = synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst1d6);
   return min_s;
}

fix16_t synthFMalt_ADSR_getMinRelease(synthFMalt_ADSR__ctx_type_9 &_ctx){
   fix16_t min_r;
   synthFMalt_ADSR_getMinValues(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst1d6);
   synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst1d6);
   min_r = synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst1d6);
   return min_r;
}

void synthFMalt_ADSR__ctx_type_10_init(synthFMalt_ADSR__ctx_type_10 &_output_){
   synthFMalt_ADSR__ctx_type_10 &_ctx = _output_;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.step = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.s = 0x0 /* 0.000000 */;
   _ctx.retrigger = false;
   _ctx.r_step = 0x0 /* 0.000000 */;
   _ctx.r = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.d_step = 0x0 /* 0.000000 */;
   _ctx.d = 0x0 /* 0.000000 */;
   _ctx.a_target = 0x0 /* 0.000000 */;
   _ctx.a_step = 0x0 /* 0.000000 */;
   _ctx.a = 0x0 /* 0.000000 */;
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst38d6);
   synthFMalt_ADSR__ctx_type_0_init(_ctx._inst3773);
   synthFMalt_ADSR__ctx_type_5_init(_ctx._inst33d6);
   synthFMalt_Util__ctx_type_2_init(_ctx._inst1851);
   synthFMalt_Util__ctx_type_2_init(_ctx._inst151);
   synthFMalt_ADSR__ctx_type_9_init(_ctx._inst12c);
   synthFMalt_ADSR_default(_ctx);
   
   return ;
}

fix16_t synthFMalt_ADSR_process(synthFMalt_ADSR__ctx_type_10 &_ctx, uint8_t bgate){
   fix16_t scale;
   scale = 0x3e80000 /* 1000.000000 */;
   fix16_t scale_i;
   scale_i = 0x41 /* 0.001000 */;
   if(synthFMalt_Util_edge(_ctx._inst151,bgate) || _ctx.retrigger){
      _ctx.state = 1;
      _ctx.target = fix_mul(_ctx.a_target,scale);
      _ctx.step = _ctx.a_step;
      _ctx.retrigger = false;
   }
   if(_ctx.state == 0){
      _ctx.out = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.out = (_ctx.out + _ctx.step);
   }
   if(_ctx.state == 1){
      if(_ctx.out >= _ctx.target){
         _ctx.step = _ctx.d_step;
         _ctx.out = _ctx.target;
         _ctx.target = fix_mul(_ctx.s,scale);
         _ctx.state = 2;
      }
      if(bool_not(bgate)){
         _ctx.step = synthFMalt_ADSR_stepToRelease(_ctx,fix_mul(_ctx.out,scale_i));
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.step = synthFMalt_ADSR_stepToRelease(_ctx,fix_mul(_ctx.out,scale_i));
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
      if(_ctx.out <= _ctx.target){
         _ctx.out = _ctx.target;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.state = 3;
      }
   }
   if(_ctx.state == 3){
      if(bool_not(bgate)){
         _ctx.step = _ctx.r_step;
         _ctx.target = 0x0 /* 0.000000 */;
         _ctx.state = 4;
      }
   }
   if(_ctx.state == 4){
      if(_ctx.out <= 0x0 /* 0.000000 */){
         _ctx.out = 0x0 /* 0.000000 */;
         _ctx.state = 0;
         _ctx.step = 0x0 /* 0.000000 */;
         _ctx.target = 0x0 /* 0.000000 */;
      }
   }
   return fix_clip(fix_mul(_ctx.out,scale_i),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
}

uint8_t synthFMalt_ADSR_process_bufferTo(synthFMalt_ADSR__ctx_type_10 &_ctx, uint8_t bgate, int nb, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   fix16_t scale;
   scale = 0x3e80000 /* 1000.000000 */;
   fix16_t scale_i;
   scale_i = 0x41 /* 0.001000 */;
   uint8_t idle;
   idle = true;
   int i;
   i = 0;
   while(i < nb){
      if(synthFMalt_Util_edge(_ctx._inst1851,bgate) || _ctx.retrigger){
         _ctx.state = 1;
         _ctx.target = fix_mul(_ctx.a_target,scale);
         _ctx.step = _ctx.a_step;
         _ctx.retrigger = false;
      }
      if(_ctx.state == 0){
         _ctx.out = 0x0 /* 0.000000 */;
      }
      else
      {
         idle = false;
         _ctx.out = (_ctx.out + _ctx.step);
         if(_ctx.state == 1){
            if(_ctx.out >= _ctx.target){
               _ctx.step = _ctx.d_step;
               _ctx.out = _ctx.target;
               _ctx.target = fix_mul(_ctx.s,scale);
               _ctx.state = 2;
            }
            if(bool_not(bgate)){
               _ctx.step = synthFMalt_ADSR_stepToRelease(_ctx,fix_mul(_ctx.out,scale_i));
               _ctx.target = 0x0 /* 0.000000 */;
               _ctx.state = 4;
            }
         }
         if(_ctx.state == 2){
            if(bool_not(bgate)){
               _ctx.step = synthFMalt_ADSR_stepToRelease(_ctx,fix_mul(_ctx.out,scale_i));
               _ctx.target = 0x0 /* 0.000000 */;
               _ctx.state = 4;
            }
            if(_ctx.out <= _ctx.target){
               _ctx.out = _ctx.target;
               _ctx.step = 0x0 /* 0.000000 */;
               _ctx.state = 3;
            }
         }
         if(_ctx.state == 3){
            if(bool_not(bgate)){
               _ctx.step = _ctx.r_step;
               _ctx.target = 0x0 /* 0.000000 */;
               _ctx.state = 4;
            }
         }
         if(_ctx.state == 4){
            if(_ctx.out <= 0x0 /* 0.000000 */){
               _ctx.out = 0x0 /* 0.000000 */;
               _ctx.state = 0;
               _ctx.step = 0x0 /* 0.000000 */;
               _ctx.target = 0x0 /* 0.000000 */;
            }
         }
      }
      oBuffer[i] = fix_clip(fix_mul(_ctx.out,scale_i),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
      i = (1 + i);
   }
   return idle;
}

void synthFMalt_ADSR_updateSteps(synthFMalt_ADSR__ctx_type_10 &_ctx){
   fix16_t min_a;
   fix16_t min_d;
   fix16_t min_r;
   synthFMalt_ADSR_getMinValues(_ctx._inst33d6);
   min_a = synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst33d6);
   min_d = synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst33d6);
   synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst33d6);
   min_r = synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst33d6);
   _ctx.a_step = fix_div(_ctx.a_target,fix_mul(_ctx.fs,fix_clip(_ctx.a,min_a,_ctx.a)));
   _ctx.d_step = fix_div((_ctx.s + (- _ctx.a_target)),fix_mul(_ctx.fs,fix_clip(_ctx.d,min_d,_ctx.d)));
   _ctx.r_step = fix_div((- _ctx.s),fix_mul(_ctx.fs,fix_clip(_ctx.r,min_r,_ctx.r)));
}

void synthFMalt_ADSR_config(synthFMalt_ADSR__ctx_type_10 &_ctx, fix16_t newA, fix16_t newD, fix16_t newS, fix16_t newR){
   fix16_t max_a;
   fix16_t max_d;
   fix16_t max_s;
   fix16_t max_r;
   synthFMalt_ADSR_getMaxValues(_ctx._inst3773);
   max_a = synthFMalt_ADSR_getMaxValues_ret_0(_ctx._inst3773);
   max_d = synthFMalt_ADSR_getMaxValues_ret_1(_ctx._inst3773);
   max_s = synthFMalt_ADSR_getMaxValues_ret_2(_ctx._inst3773);
   max_r = synthFMalt_ADSR_getMaxValues_ret_3(_ctx._inst3773);
   fix16_t min_a;
   fix16_t min_d;
   fix16_t min_s;
   fix16_t min_r;
   synthFMalt_ADSR_getMinValues(_ctx._inst38d6);
   min_a = synthFMalt_ADSR_getMinValues_ret_0(_ctx._inst38d6);
   min_d = synthFMalt_ADSR_getMinValues_ret_1(_ctx._inst38d6);
   min_s = synthFMalt_ADSR_getMinValues_ret_2(_ctx._inst38d6);
   min_r = synthFMalt_ADSR_getMinValues_ret_3(_ctx._inst38d6);
   _ctx.a = fix_clip(newA,min_a,max_a);
   _ctx.d = fix_clip(newD,min_d,max_d);
   _ctx.s = fix_clip(newS,min_s,max_s);
   _ctx.r = fix_clip(newR,min_r,max_r);
   synthFMalt_ADSR_updateSteps(_ctx);
}

void synthFMalt_FMalt__ctx_type_0_init(synthFMalt_FMalt__ctx_type_0 &_output_){
   synthFMalt_FMalt__ctx_type_0 &_ctx = _output_;
   _ctx.wavetable_modulator_idx = 0x0 /* 0.000000 */;
   _ctx.wavetable_carrier_idx = 0x0 /* 0.000000 */;
   _ctx.target_level = 0x0 /* 0.000000 */;
   _ctx.sustaining = false;
   _ctx.sustain = false;
   synthFMalt_Notes__ctx_type_0_init(_ctx.playingnotes);
   _ctx.n = 0;
   synthFMalt_ADSR__ctx_type_10_init(_ctx.modulatoradsr);
   _ctx.modulator_target_level = false;
   _ctx.modulator_phase_shift = 0x0 /* 0.000000 */;
   _ctx.modulator_phase_range = 0x0 /* 0.000000 */;
   _ctx.modulator_max_phase = 0x0 /* 0.000000 */;
   _ctx.modulator_level_coeff = 0x0 /* 0.000000 */;
   _ctx.modulator_level = 0x0 /* 0.000000 */;
   _ctx.modulator_feedback = 0x0 /* 0.000000 */;
   _ctx.modulator_env = 0x0 /* 0.000000 */;
   _ctx.modulatorRatio = 0x0 /* 0.000000 */;
   synthFMalt_OSCalt__ctx_type_1_init(_ctx.modulator);
   _ctx.level_step_ref = 0x0 /* 0.000000 */;
   _ctx.level_step = 0x0 /* 0.000000 */;
   _ctx.level = 0x0 /* 0.000000 */;
   _ctx.gate = false;
   _ctx.fs = 0x0 /* 0.000000 */;
   _ctx.freq = 0x0 /* 0.000000 */;
   _ctx.env_modulator_idle = false;
   _ctx.env_decimation_factor = 0;
   _ctx.env_carrier_idle = false;
   synthFMalt_ADSR__ctx_type_10_init(_ctx.carrieradsr);
   _ctx.carrier_phase_range = 0x0 /* 0.000000 */;
   _ctx.carrier_max_phase = 0x0 /* 0.000000 */;
   _ctx.carrier_env = 0x0 /* 0.000000 */;
   _ctx.carrierRatio = 0x0 /* 0.000000 */;
   synthFMalt_OSCalt__ctx_type_1_init(_ctx.carrier);
   fix_init_array(128,0x0 /* 0.000000 */,_ctx.buffer_modulator_env);
   fix_init_array(128,0x0 /* 0.000000 */,_ctx.buffer_modulator);
   fix_init_array(128,0x0 /* 0.000000 */,_ctx.buffer_carrier_env);
   _ctx.bend = 0x0 /* 0.000000 */;
   synthFMalt_FMalt_default(_ctx);
   
   return ;
}

fix16_t synthFMalt_FMalt_process(synthFMalt_FMalt__ctx_type_0 &_ctx){
   _ctx.n = (1 + _ctx.n);
   uint8_t update_env;
   update_env = true;
   if(_ctx.env_decimation_factor > 0){
      update_env = ((_ctx.n % _ctx.env_decimation_factor) == 0);
   }
   fix16_t carrier_val;
   carrier_val = 0x0 /* 0.000000 */;
   if(update_env){
      if(_ctx.level != _ctx.target_level){
         _ctx.level = (_ctx.level + _ctx.level_step);
         if(((_ctx.level_step > 0x0 /* 0.000000 */) && (_ctx.level > _ctx.target_level)) || ((_ctx.level_step < 0x0 /* 0.000000 */) && (_ctx.level < _ctx.target_level))){
            _ctx.level = _ctx.target_level;
         }
      }
      _ctx.carrier_env = fix_mul(_ctx.level,synthFMalt_ADSR_process(_ctx.carrieradsr,(_ctx.gate || _ctx.sustaining)));
      _ctx.modulator_env = synthFMalt_ADSR_process(_ctx.modulatoradsr,(_ctx.gate || _ctx.sustaining));
   }
   _ctx.env_carrier_idle = (_ctx.carrier_env <= 0x0 /* 0.000000 */);
   _ctx.env_modulator_idle = (_ctx.modulator_env <= 0x0 /* 0.000000 */);
   if(bool_not(_ctx.env_carrier_idle)){
      if(_ctx.modulator_target_level){
         fix16_t carrier_level;
         carrier_level = 0x10000 /* 1.000000 */;
         if(bool_not(_ctx.env_modulator_idle)){
            fix16_t modulator_val;
            modulator_val = fix_mul(_ctx.modulator_env,synthFMalt_OSCalt_process(_ctx.modulator));
            carrier_level = (0x10000 /* 1.000000 */ + (- fix_mul(_ctx.modulator_level_coeff,(_ctx.modulator_env + modulator_val))));
            if(_ctx.modulator_phase_range != 0x0 /* 0.000000 */){
               synthFMalt_OSCalt_setPhase(_ctx.modulator,(_ctx.modulator_max_phase + _ctx.modulator_phase_shift + fix_mul(_ctx.modulator_phase_range,modulator_val)));
            }
         }
         else
         {
            synthFMalt_OSCalt_resetPhase(_ctx.modulator);
            synthFMalt_OSCalt_setPhase(_ctx.modulator,_ctx.modulator_phase_shift);
         }
         carrier_val = fix_mul(fix_mul(_ctx.carrier_env,carrier_level),synthFMalt_OSCalt_process(_ctx.carrier));
      }
      else
      {
         fix16_t carrier_phase;
         carrier_phase = 0x0 /* 0.000000 */;
         if(bool_not(_ctx.env_modulator_idle)){
            fix16_t modulator_val;
            modulator_val = fix_mul(_ctx.modulator_env,synthFMalt_OSCalt_process(_ctx.modulator));
            carrier_phase = (_ctx.carrier_max_phase + fix_mul(_ctx.carrier_phase_range,modulator_val));
            if(_ctx.modulator_phase_range != 0x0 /* 0.000000 */){
               synthFMalt_OSCalt_setPhase(_ctx.modulator,(_ctx.modulator_max_phase + _ctx.modulator_phase_shift + fix_mul(_ctx.modulator_phase_range,modulator_val)));
            }
         }
         else
         {
            synthFMalt_OSCalt_resetPhase(_ctx.modulator);
            synthFMalt_OSCalt_setPhase(_ctx.modulator,_ctx.modulator_phase_shift);
         }
         synthFMalt_OSCalt_setPhase(_ctx.carrier,carrier_phase);
         carrier_val = fix_mul(_ctx.carrier_env,synthFMalt_OSCalt_process(_ctx.carrier));
      }
   }
   else
   {
      synthFMalt_OSCalt_resetPhase(_ctx.carrier);
      if(_ctx.env_modulator_idle){
         synthFMalt_OSCalt_resetPhase(_ctx.modulator);
         synthFMalt_OSCalt_setPhase(_ctx.modulator,_ctx.modulator_phase_shift);
      }
   }
   return carrier_val;
}

void synthFMalt_FMalt_process_bufferTo(synthFMalt_FMalt__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   int env_df;
   env_df = _ctx.env_decimation_factor;
   if(env_df < 1){
      env_df = 1;
   }
   int nb_env;
   nb_env = nb;
   if(_ctx.env_decimation_factor > 1){
      nb_env = (nb / _ctx.env_decimation_factor);
      if((nb % _ctx.env_decimation_factor) >= (_ctx.env_decimation_factor + (- (_ctx.n % _ctx.env_decimation_factor)))){
         nb_env = (1 + nb_env);
      }
   }
   if(nb_env <= 0){
      int i;
      i = 0;
      while(i < nb){
         _ctx.buffer_modulator_env[i] = _ctx.modulator_env;
         _ctx.buffer_carrier_env[i] = _ctx.carrier_env;
         i = (1 + i);
      }
      _ctx.n = (_ctx.n + nb);
   }
   else
   {
      _ctx.env_carrier_idle = synthFMalt_ADSR_process_bufferTo(_ctx.carrieradsr,(_ctx.gate || _ctx.sustaining),nb_env,_ctx.buffer_carrier_env);
      _ctx.env_modulator_idle = synthFMalt_ADSR_process_bufferTo(_ctx.modulatoradsr,(_ctx.gate || _ctx.sustaining),nb_env,_ctx.buffer_modulator_env);
      int i;
      i = 0;
      while(i < nb_env){
         if(_ctx.level != _ctx.target_level){
            _ctx.level = (_ctx.level + _ctx.level_step);
            if(((_ctx.level_step > 0x0 /* 0.000000 */) && (_ctx.level > _ctx.target_level)) || ((_ctx.level_step < 0x0 /* 0.000000 */) && (_ctx.level < _ctx.target_level))){
               _ctx.level = _ctx.target_level;
            }
         }
         _ctx.buffer_carrier_env[i] = fix_mul(_ctx.level,pgm_read_word_near(_ctx.buffer_carrier_env + i));
         i = (1 + i);
      }
      _ctx.n = (_ctx.n + nb);
      if(nb_env < nb){
         i = nb;
         int i_env;
         i_env = nb_env;
         int n_rev;
         n_rev = (_ctx.n % env_df);
         fix16_t modulator_env_rev;
         modulator_env_rev = pgm_read_word_near(_ctx.buffer_modulator_env + ((-1) + i_env));
         fix16_t carrier_env_rev;
         carrier_env_rev = pgm_read_word_near(_ctx.buffer_carrier_env + ((-1) + i_env));
         while(i > 1){
            _ctx.buffer_modulator_env[((-1) + i)] = modulator_env_rev;
            _ctx.buffer_carrier_env[((-1) + i)] = carrier_env_rev;
            i = ((-1) + i);
            n_rev = ((-1) + n_rev);
            if(n_rev < 0){
               n_rev = ((-1) + env_df);
               i_env = ((-1) + i_env);
               if(i_env > 0){
                  modulator_env_rev = pgm_read_word_near(_ctx.buffer_modulator_env + ((-1) + i_env));
                  carrier_env_rev = pgm_read_word_near(_ctx.buffer_carrier_env + ((-1) + i_env));
               }
               else
               {
                  modulator_env_rev = _ctx.modulator_env;
                  carrier_env_rev = _ctx.carrier_env;
               }
            }
         }
      }
      _ctx.modulator_env = pgm_read_word_near(_ctx.buffer_modulator_env + ((-1) + nb));
      _ctx.carrier_env = pgm_read_word_near(_ctx.buffer_carrier_env + ((-1) + nb));
   }
   if(_ctx.env_carrier_idle){
      synthFMalt_OSCalt_resetPhase(_ctx.carrier);
      if(_ctx.env_modulator_idle){
         synthFMalt_OSCalt_resetPhase(_ctx.modulator);
         synthFMalt_OSCalt_setPhase(_ctx.modulator,_ctx.modulator_phase_shift);
      }
      int i;
      i = 0;
      while(i < nb){
         oBuffer[i] = 0x0 /* 0.000000 */;
         i = (1 + i);
      }
   }
   else
   {
      if(_ctx.env_modulator_idle){
         synthFMalt_OSCalt_resetPhase(_ctx.modulator);
         synthFMalt_OSCalt_setPhase(_ctx.modulator,_ctx.modulator_phase_shift);
         int i;
         i = 0;
         while(i < nb){
            _ctx.buffer_modulator[i] = 0x0 /* 0.000000 */;
            i = (1 + i);
         }
      }
      else
      {
         if(_ctx.modulator_feedback != 0x0 /* 0.000000 */){
            synthFMalt_OSCalt_process_bufferTo_feedback(_ctx.modulator,nb,_ctx.buffer_modulator_env,_ctx.modulator_feedback,_ctx.buffer_modulator);
         }
         else
         {
            synthFMalt_OSCalt_process_bufferTo_simple(_ctx.modulator,nb,_ctx.buffer_modulator_env,_ctx.buffer_modulator);
         }
      }
      synthFMalt_OSCalt_process_bufferTo(_ctx.carrier,nb,_ctx.buffer_carrier_env,_ctx.buffer_modulator,_ctx.buffer_modulator_env,_ctx.modulator_level,_ctx.modulator_target_level,oBuffer);
   }
}

void synthFMalt_FMalt_setSamplerate(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFMalt_OSCalt_setSamplerate(_ctx.carrier,_ctx.fs);
   synthFMalt_OSCalt_setSamplerate(_ctx.modulator,_ctx.fs);
   fix16_t ADSR_fs;
   ADSR_fs = _ctx.fs;
   if(_ctx.env_decimation_factor > 0){
      ADSR_fs = fix_div(_ctx.fs,int_to_fix(_ctx.env_decimation_factor));
   }
   synthFMalt_ADSR_setSamplerate(_ctx.carrieradsr,ADSR_fs);
   synthFMalt_ADSR_setSamplerate(_ctx.modulatoradsr,ADSR_fs);
   synthFMalt_FMalt__updateLevelStep(_ctx);
}

void synthFMalt_FMalt_setLevel(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newLevel){
   _ctx.target_level = fix_clip(newLevel,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   if(_ctx.target_level < _ctx.level){
      _ctx.level_step = (- _ctx.level_step_ref);
   }
   else
   {
      _ctx.level_step = _ctx.level_step_ref;
   }
   if(fix_abs((_ctx.target_level + (- _ctx.level))) <= _ctx.level_step_ref){
      _ctx.level = _ctx.target_level;
   }
}

void synthFMalt_FMalt_setFrequency(synthFMalt_FMalt__ctx_type_0 &_ctx, fix16_t newFreq){
   if(newFreq >= 0x0 /* 0.000000 */){
      _ctx.freq = newFreq;
      fix16_t bendFreq;
      bendFreq = _ctx.freq;
      if(_ctx.bend != 0x0 /* 0.000000 */){
         bendFreq = fix_mul(_ctx.freq,synthFMalt_Util_tonesToCoeff(_ctx.bend));
      }
      if(_ctx.carrierRatio >= 0x0 /* 0.000000 */){
         synthFMalt_OSCalt_setFrequency(_ctx.carrier,fix_mul(_ctx.carrierRatio,bendFreq));
      }
      if(_ctx.modulatorRatio >= 0x0 /* 0.000000 */){
         synthFMalt_OSCalt_setFrequency(_ctx.modulator,fix_mul(_ctx.modulatorRatio,bendFreq));
      }
   }
}

void synthFMalt_FMalt_setSustain(synthFMalt_FMalt__ctx_type_0 &_ctx, uint8_t flag){
   _ctx.sustain = flag;
   if(_ctx.gate && _ctx.sustain){
      _ctx.sustaining = true;
   }
   if(bool_not(_ctx.sustain)){
      _ctx.sustaining = false;
   }
}

uint8_t synthFMalt_FMalt_noteOn(synthFMalt_FMalt__ctx_type_0 &_ctx, int note, int velocity, int channel){
   note = int_clip(note,0,127);
   uint8_t isNew;
   isNew = synthFMalt_Notes_noteOn(_ctx.playingnotes,note,velocity,channel);
   synthFMalt_FMalt_setFrequency(_ctx,synthFMalt_Util_noteToFrequency(note));
   synthFMalt_FMalt_setLevel(_ctx,synthFMalt_Util_velocityToLevel(velocity));
   _ctx.gate = true;
   if(_ctx.sustain){
      _ctx.sustaining = true;
   }
   if(synthFMalt_Notes_getPoly(_ctx.playingnotes)){
      synthFMalt_ADSR_retrig(_ctx.carrieradsr);
      synthFMalt_ADSR_retrig(_ctx.modulatoradsr);
   }
   return isNew;
}

void synthFMalt_FMalt_noteOff(synthFMalt_FMalt__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   if(synthFMalt_Notes_noteOff(_ctx.playingnotes,note,channel)){
      if(synthFMalt_Notes_nbNotes(_ctx.playingnotes) > 0){
         int last_played;
         last_played = synthFMalt_Notes_lastNote(_ctx.playingnotes);
         if((last_played > 0) && (last_played <= 128)){
            synthFMalt_FMalt_setFrequency(_ctx,synthFMalt_Util_noteToFrequency(((-1) + last_played)));
         }
      }
      else
      {
         _ctx.gate = false;
      }
   }
}

void synthFMalt_FMalt_default(synthFMalt_FMalt__ctx_type_0 &_ctx){
   synthFMalt_Buffer_buffer(_ctx.buffer_modulator);
   synthFMalt_Buffer_buffer(_ctx.buffer_carrier_env);
   synthFMalt_Buffer_buffer(_ctx.buffer_modulator_env);
   synthFMalt_FMalt_setEnvDecimationFactor(_ctx,3);
   synthFMalt_OSCalt_default(_ctx.carrier);
   synthFMalt_OSCalt_default(_ctx.modulator);
   synthFMalt_ADSR_default(_ctx.carrieradsr);
   synthFMalt_ADSR_default(_ctx.modulatoradsr);
   synthFMalt_FMalt_setModulatorADSR(_ctx,0x0 /* 0.000000 */,0x0 /* 0.000000 */,0x8000 /* 0.500000 */,0x0 /* 0.000000 */);
   synthFMalt_FMalt_setCarrierADSR(_ctx,0x0 /* 0.000000 */,0x0 /* 0.000000 */,0x8000 /* 0.500000 */,0x0 /* 0.000000 */);
   synthFMalt_FMalt_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFMalt_FMalt_setCarrierRatio(_ctx,0x10000 /* 1.000000 */);
   synthFMalt_FMalt_setModulatorTargetLevel(_ctx,false);
   synthFMalt_FMalt_setModulatorRatio(_ctx,0x20000 /* 2.000000 */);
   synthFMalt_FMalt_setModulatorLevel(_ctx,0x1999 /* 0.100000 */);
   synthFMalt_FMalt_setLevel(_ctx,0x10000 /* 1.000000 */);
   synthFMalt_FMalt_setFrequency(_ctx,0x70a3 /* 0.440000 */);
   synthFMalt_Notes_default(_ctx.playingnotes);
   synthFMalt_Notes_setAllowDuplicates(_ctx.playingnotes,true);
   synthFMalt_FMalt_setPoly(_ctx,false);
}

void synthFMalt_Poly__ctx_type_0_init(synthFMalt_Poly__ctx_type_0 &_output_){
   synthFMalt_Poly__ctx_type_0 &_ctx = _output_;
   synthFMalt_FMalt__ctx_type_0_init(_ctx.voice3);
   synthFMalt_FMalt__ctx_type_0_init(_ctx.voice2);
   synthFMalt_FMalt__ctx_type_0_init(_ctx.voice1);
   synthFMalt_FMalt__ctx_type_0_init(_ctx.voice0);
   _ctx.should_leftovers = false;
   _ctx.lastModulatorWavetablePhaseIdx = 0x0 /* 0.000000 */;
   _ctx.lastModulatorWavetableIdx = 0x0 /* 0.000000 */;
   _ctx.lastCarrierWavetablePhaseIdx = 0x0 /* 0.000000 */;
   _ctx.lastCarrierWavetableIdx = 0x0 /* 0.000000 */;
   _ctx.initModulatorWavetable = false;
   _ctx.initCarrierWavetable = false;
   synthFMalt_Poly_default(_ctx);
   
   return ;
}

fix16_t synthFMalt_Poly_getSample(synthFMalt_Poly__ctx_type_0 &_ctx, int voice){
   switch(voice) {
      case 0:
         return synthFMalt_FMalt_process(_ctx.voice0);
      break;
      case 1:
         return synthFMalt_FMalt_process(_ctx.voice1);
      break;
      case 2:
         return synthFMalt_FMalt_process(_ctx.voice2);
      break;
      case 3:
         return synthFMalt_FMalt_process(_ctx.voice3);
      break;
    
   }
   return 0x0 /* 0.000000 */;
}

void synthFMalt_Poly_synthSetModulatorWavetable(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   if(bool_not(_ctx.initModulatorWavetable) || (wavetableIdx != _ctx.lastModulatorWavetableIdx)){
      synthFMalt_FMalt_setModulatorWavetable(_ctx.voice0,wavetableIdx);
      synthFMalt_FMalt_setModulatorWavetable(_ctx.voice1,wavetableIdx);
      synthFMalt_FMalt_setModulatorWavetable(_ctx.voice2,wavetableIdx);
      synthFMalt_FMalt_setModulatorWavetable(_ctx.voice3,wavetableIdx);
      _ctx.lastModulatorWavetableIdx = wavetableIdx;
      _ctx.initModulatorWavetable = true;
   }
}

void synthFMalt_Poly_synthSetModulatorWavetablePhase(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx){
   if(phaseIdx != _ctx.lastModulatorWavetablePhaseIdx){
      synthFMalt_FMalt_setModulatorWavetablePhase(_ctx.voice0,phaseIdx);
      synthFMalt_FMalt_setModulatorWavetablePhase(_ctx.voice1,phaseIdx);
      synthFMalt_FMalt_setModulatorWavetablePhase(_ctx.voice2,phaseIdx);
      synthFMalt_FMalt_setModulatorWavetablePhase(_ctx.voice3,phaseIdx);
      _ctx.lastModulatorWavetablePhaseIdx = phaseIdx;
   }
}

void synthFMalt_Poly_synthSetCarrierWavetable(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t wavetableIdx){
   if(bool_not(_ctx.initCarrierWavetable) || (wavetableIdx != _ctx.lastCarrierWavetableIdx)){
      synthFMalt_FMalt_setCarrierWavetable(_ctx.voice0,wavetableIdx);
      synthFMalt_FMalt_setCarrierWavetable(_ctx.voice1,wavetableIdx);
      synthFMalt_FMalt_setCarrierWavetable(_ctx.voice2,wavetableIdx);
      synthFMalt_FMalt_setCarrierWavetable(_ctx.voice3,wavetableIdx);
      _ctx.lastCarrierWavetableIdx = wavetableIdx;
      _ctx.initCarrierWavetable = true;
   }
}

void synthFMalt_Poly_synthSetCarrierWavetablePhase(synthFMalt_Poly__ctx_type_0 &_ctx, fix16_t phaseIdx){
   if(phaseIdx != _ctx.lastCarrierWavetablePhaseIdx){
      synthFMalt_FMalt_setCarrierWavetablePhase(_ctx.voice0,phaseIdx);
      synthFMalt_FMalt_setCarrierWavetablePhase(_ctx.voice1,phaseIdx);
      synthFMalt_FMalt_setCarrierWavetablePhase(_ctx.voice2,phaseIdx);
      synthFMalt_FMalt_setCarrierWavetablePhase(_ctx.voice3,phaseIdx);
      _ctx.lastCarrierWavetablePhaseIdx = phaseIdx;
   }
}

void synthFMalt_Poly_default(synthFMalt_Poly__ctx_type_0 &_ctx){
   _ctx.should_leftovers = false;
   _ctx.initModulatorWavetable = false;
   _ctx.initCarrierWavetable = false;
   synthFMalt_Poly_synthSetModulatorWavetable(_ctx,0x0 /* 0.000000 */);
   synthFMalt_Poly_synthSetCarrierWavetable(_ctx,0x0 /* 0.000000 */);
   synthFMalt_FMalt_default(_ctx.voice0);
   synthFMalt_FMalt_setPoly(_ctx.voice0,true);
   synthFMalt_FMalt_default(_ctx.voice1);
   synthFMalt_FMalt_setPoly(_ctx.voice1,true);
   synthFMalt_FMalt_default(_ctx.voice2);
   synthFMalt_FMalt_setPoly(_ctx.voice2,true);
   synthFMalt_FMalt_default(_ctx.voice3);
   synthFMalt_FMalt_setPoly(_ctx.voice3,true);
}

void synthFMalt_Voice__ctx_type_0_init(synthFMalt_Voice__ctx_type_0 &_output_){
   synthFMalt_Voice__ctx_type_0 &_ctx = _output_;
   synthFMalt_Notes__ctx_type_0_init(_ctx.voicesinactive);
   synthFMalt_Notes__ctx_type_0_init(_ctx.voicesactive);
   _ctx.voices_ratio = 0x0 /* 0.000000 */;
   int_init_array(4,0,_ctx.voices);
   synthFMalt_Notes__ctx_type_0_init(_ctx.voiceinsactive);
   _ctx.reuse = false;
   synthFMalt_Poly__ctx_type_0_init(_ctx.poly);
   _ctx.number_voices = 0;
   int_init_array(128,0,_ctx.notes);
   _ctx.normalize = false;
   _ctx.leftovers_decay = 0x0 /* 0.000000 */;
   _ctx.leftovers = 0x0 /* 0.000000 */;
   int_init_array(4,0,_ctx.last_velocities);
   fix_init_array(4,0x0 /* 0.000000 */,_ctx.last_values);
   _ctx.fs = 0x0 /* 0.000000 */;
   fix_init_array(128,0x0 /* 0.000000 */,_ctx.buffer_v0);
   synthFMalt_Voice_default(_ctx);
   
   return ;
}

fix16_t synthFMalt_Voice_process(synthFMalt_Voice__ctx_type_0 &_ctx){
   fix16_t value;
   value = 0x0 /* 0.000000 */;
   int i;
   i = 0;
   while(i < _ctx.number_voices){
      _ctx.last_values[i] = synthFMalt_Poly_getSample(_ctx.poly,i);
      value = (value + pgm_read_word_near(_ctx.last_values + i));
      i = (1 + i);
   }
   if(_ctx.leftovers != 0x0 /* 0.000000 */){
      _ctx.leftovers = fix_mul(_ctx.leftovers,_ctx.leftovers_decay);
      value = (_ctx.leftovers + value);
   }
   if(_ctx.normalize){
      return fix_mul(_ctx.voices_ratio,value);
   }
   return value;
}

void synthFMalt_Voice_process_bufferTo(synthFMalt_Voice__ctx_type_0 &_ctx, int nb, fix16_t (&oBuffer)[128]){
   nb = int_clip(nb,0,128);
   if(nb == 0){
      nb = 128;
   }
   int v;
   v = 0;
   int i;
   i = 0;
   if(v < _ctx.number_voices){
      synthFMalt_Poly_runVoice(_ctx.poly,v,nb,_ctx.buffer_v0);
      i = 0;
      while(i < nb){
         oBuffer[i] = pgm_read_word_near(_ctx.buffer_v0 + i);
         i = (1 + i);
      }
      if(nb > 0){
         _ctx.last_values[v] = pgm_read_word_near(_ctx.buffer_v0 + ((-1) + nb));
      }
      v = (1 + v);
   }
   while(v < _ctx.number_voices){
      synthFMalt_Poly_runVoice(_ctx.poly,v,nb,_ctx.buffer_v0);
      i = 0;
      while(i < nb){
         oBuffer[i] = (pgm_read_word_near(_ctx.buffer_v0 + i) + pgm_read_word_near(oBuffer + i));
         i = (1 + i);
      }
      if(nb > 0){
         _ctx.last_values[v] = pgm_read_word_near(_ctx.buffer_v0 + ((-1) + nb));
      }
      v = (1 + v);
   }
   i = 0;
   while((_ctx.leftovers != 0x0 /* 0.000000 */) && (i < nb)){
      _ctx.leftovers = fix_mul(_ctx.leftovers,_ctx.leftovers_decay);
      oBuffer[i] = (_ctx.leftovers + pgm_read_word_near(oBuffer + i));
      i = (1 + i);
   }
   if(_ctx.normalize){
      i = 0;
      while(i < nb){
         oBuffer[i] = fix_mul(_ctx.voices_ratio,pgm_read_word_near(oBuffer + i));
         i = (1 + i);
      }
   }
}

void synthFMalt_Voice_noteOff(synthFMalt_Voice__ctx_type_0 &_ctx, int note, int channel){
   note = int_clip(note,0,127);
   int v;
   v = pgm_read_word_near(_ctx.notes + note);
   if((v > 0) && (v <= 4)){
      if(synthFMalt_Notes_noteOff(_ctx.voicesactive,((-1) + v),0)){
         synthFMalt_Poly_sendNoteOff(_ctx.poly,((-1) + v),note,channel);
         _ctx.notes[note] = (- v);
         _ctx.voices[((-1) + v)] = (- (1 + note));
         if(v <= _ctx.number_voices){
            synthFMalt_Notes_noteOn(_ctx.voicesinactive,((-1) + v),127,0);
         }
      }
   }
}

void synthFMalt_Voice_noteOn(synthFMalt_Voice__ctx_type_0 &_ctx, int note, int velocity, int channel){
   note = int_clip(note,0,127);
   velocity = int_clip(velocity,0,127);
   int v;
   v = pgm_read_word_near(_ctx.notes + note);
   if((v > 0) && (v <= _ctx.number_voices)){
      if(bool_not((synthFMalt_Notes_noteOff(_ctx.voicesactive,((-1) + v),0) && synthFMalt_Notes_noteOn(_ctx.voicesinactive,((-1) + v),127,0) && synthFMalt_Notes_noteOff(_ctx.voicesinactive,((-1) + v),0) && synthFMalt_Notes_noteOn(_ctx.voicesactive,((-1) + v),127,0)))){
         _ctx.notes[note] = 0;
         _ctx.voices[((-1) + v)] = 0;
         v = 0;
      }
   }
   else
   {
      if(_ctx.reuse && (v < 0) && ((- v) <= _ctx.number_voices) && (pgm_read_word_near(_ctx.voices + ((-1) + (- v))) == (- (1 + note))) && (pgm_read_word_near(_ctx.notes + note) == v)){
         v = (- v);
         if(bool_not((synthFMalt_Notes_noteOff(_ctx.voicesinactive,((-1) + v),0) && synthFMalt_Notes_noteOn(_ctx.voicesactive,((-1) + v),127,0)))){
            _ctx.notes[note] = 0;
            _ctx.voices[((-1) + v)] = 0;
            v = 0;
         }
      }
      else
      {
         v = synthFMalt_Notes_firstNote(_ctx.voicesinactive);
         if((v <= 0) || (v > _ctx.number_voices)){
            int active_v;
            active_v = synthFMalt_Notes_firstNote(_ctx.voicesactive);
            if(active_v > 0){
               synthFMalt_Voice_noteOff(_ctx,pgm_read_word_near(_ctx.voices + ((-1) + active_v)),0);
            }
         }
         v = synthFMalt_Notes_firstNote(_ctx.voicesinactive);
         if((v > 0) && (v <= _ctx.number_voices)){
            if(bool_not((synthFMalt_Notes_noteOff(_ctx.voicesinactive,((-1) + v),0) && synthFMalt_Notes_noteOn(_ctx.voicesactive,((-1) + v),127,0)))){
               v = 0;
            }
         }
         else
         {
            v = 0;
         }
      }
   }
   if(v > 0){
      if(synthFMalt_Poly_shouldLeftOvers(_ctx.poly)){
         _ctx.leftovers = (_ctx.leftovers + pgm_read_word_near(_ctx.last_values + ((-1) + v)));
      }
      synthFMalt_Poly_sendNoteOn(_ctx.poly,((-1) + v),note,velocity,channel);
      _ctx.notes[note] = v;
      _ctx.voices[((-1) + v)] = note;
      _ctx.last_velocities[((-1) + v)] = velocity;
   }
}

void synthFMalt_Voice_setNbVoices(synthFMalt_Voice__ctx_type_0 &_ctx, int nbvoices){
   nbvoices = int_clip(nbvoices,0,4);
   int i;
   i = synthFMalt_Notes_nbNotes(_ctx.voicesactive);
   while((i > nbvoices) && (i > 0)){
      synthFMalt_Voice_noteOff(_ctx,pgm_read_word_near(_ctx.voices + ((-1) + i)),0);
      synthFMalt_Notes_noteOff(_ctx.voicesinactive,((-1) + i),0);
      i = ((-1) + i);
   }
   i = synthFMalt_Notes_nbNotes(_ctx.voicesinactive);
   if(i < nbvoices){
      while(i < nbvoices){
         synthFMalt_Notes_noteOn(_ctx.voicesinactive,i,127,0);
         i = (1 + i);
      }
   }
   else
   {
      while(i >= nbvoices){
         synthFMalt_Notes_noteOff(_ctx.voicesinactive,i,0);
         i = ((-1) + i);
      }
   }
   _ctx.number_voices = nbvoices;
   if(_ctx.number_voices > 0){
      _ctx.voices_ratio = fix_div(0x10000 /* 1.000000 */,int_to_fix(_ctx.number_voices));
   }
}

void synthFMalt_Voice_setSamplerate(synthFMalt_Voice__ctx_type_0 &_ctx, fix16_t newFs){
   if(newFs > 0x0 /* 0.000000 */){
      _ctx.fs = newFs;
   }
   synthFMalt_Poly_setSamplerate(_ctx.poly,_ctx.fs);
   fix16_t log_base;
   log_base = 0x24d76 /* 2.302585 */;
   _ctx.leftovers_decay = fix_exp(fix_div(fix_mul(-0xc4 /* -0.003000 */,log_base),fix_mul(0x3333 /* 0.200000 */,_ctx.fs)));
}

void synthFMalt_Voice_default(synthFMalt_Voice__ctx_type_0 &_ctx){
   synthFMalt_Poly_default(_ctx.poly);
   synthFMalt_Buffer_buffer(_ctx.buffer_v0);
   if(_ctx.number_voices == 0){
      _ctx.number_voices = 4;
   }
   synthFMalt_Voice_setNbVoices(_ctx,_ctx.number_voices);
   synthFMalt_Notes_default(_ctx.voicesactive);
   synthFMalt_Notes_setPoly(_ctx.voicesactive,false);
   synthFMalt_Notes_setAllowDuplicates(_ctx.voicesactive,false);
   synthFMalt_Notes_default(_ctx.voicesinactive);
   synthFMalt_Notes_setPoly(_ctx.voicesinactive,false);
   synthFMalt_Notes_setAllowDuplicates(_ctx.voiceinsactive,false);
   synthFMalt_Voice_setNormalize(_ctx,true);
   synthFMalt_Voice_setSamplerate(_ctx,0x2c1999 /* 44.100000 */);
   synthFMalt_Voice_setReuse(_ctx,false);
}


