
// tanh saturator with adjustable threshold and coeff. Output guaranteed -1..1

// note: with fixed float my previous hack consisting in having linear function and clip around edges produces still artifacts when we are too much beyond edges, rely on client to clip signal if beyond limits. To sync with the process code
fun tanh_table(x) @[table(min = -4.0, max = 4.0, size = 512)] {
  return tanh(x);
}

// make sure we respect out of bound tanh -- hard clip beyond tanh table definition, avoid artifacts with interpolation
// To sync with tanh_table limits!
fun tanh_wrapper(x) {
  if (x > 4.0) {
    return 1.0;
  }
  if (x < -4.0) {
    return -1.0;
  }
  return tanh_table(x);
}

// arbitatry limit coeff range to reduce chance of overflow with fixed point (but would then create some other distortion)
fun getMinCoeff() {
  return -1000.0;
}

fun getMaxCoeff() {
  return 1000.0;
}

// time: passing by, in seconds, should be positive
// return 1 upon first beat, 2 new beat from first sub-group, 3 for second sub-group (groupped by IBI length afterward), 0 otherwise
// will return trigger upon first call (start with beat)
fun process(x: real): real {
  // optional coefficient for ginal
  mem coeff: real;
  // when saturator is applied to signal
  mem thresh: real;
  // shortcuts to save few operations
  mem threshopp: real; // 1.0 - thresh
  mem threshinv: real; // 1/(1.0 - thresh)

  // to save some computations
  if (x == 0.0 || coeff == 0.0) {
    return 0.0;
  }

  if (coeff <> 1.0) {
    x = x * coeff;
  }

  if (abs(x) <= thresh) {
    return x;
  }
  else {
    // treat differently positive numbers
    if (x > 0.0) {
      // hard clipping
      if (thresh >= 1.0) {
        return 1.0;
      }
      // tanh to soften the blow
      else if (thresh <= 0.0) {
        return tanh_wrapper(x);
      }
      // tanh only starting threshold
      else {
        return thresh + threshopp*tanh_wrapper((x-thresh) * threshinv);
      }
    }
    else {
      if (thresh >= 1.0) {
        return -1.0;
      }
      else if (thresh <= 0.0) {
        return tanh_table(x);
      }
      else {
        return -(thresh + threshopp*tanh_wrapper((-x-thresh) * threshinv));
      }
    }
  }
}

// Note: no update of coeff or threshold will be taken into account while processing the buffer, to optimize a tiny bit
and process_bufferTo(nb: int, input, oBuffer) {
  nb = clip(nb, 0, size(oBuffer));
  if (nb == 0) {
     nb = size(oBuffer);
  }

  val i = 0;

  // nothing to do
  if (coeff == 0.0) {
    i = 0;
    while (i < nb) {
      oBuffer[i] = 0.0;
      i = i + 1;
    }
  }
  else {
    // scale to perform
    if (coeff <> 1.0) {
      i = 0;
      while (i < nb) {
        if (input[i] == 0.0) {
          oBuffer[i] = 0.0;
        }
        else {
          oBuffer[i] = input[i] * coeff;
        }
        i = i + 1;
      }
    }
    // no scale, not sure this is much optimized here
    else {
      i = 0;
      while (i < nb) {
        oBuffer[i] = input[i];
        i = i + 1;
      }
    }

    // here hard clip if outside bounds
    if (thresh >= 1.0) {
      i = 0;
      while (i < nb) {
        if (oBuffer[i] > 1.0) {
          oBuffer[i] = 1.0;
        }
        else if (oBuffer[i] < -1.0) {
          oBuffer[i] = -1.0;
        }
        i = i + 1;
      }
    }

    // soft clip i.e. tanh no matter what
    else if (thresh <= 0.0) {
      i = 0;
      while (i < nb) {
        oBuffer[i] = tanh_wrapper(oBuffer[i]);
        i = i + 1;
      }
    }

    // soft clip if outside bounds
    else {
      i = 0;
      while (i < nb) {
        // positive value, above threshold
        if (oBuffer[i] > thresh) {
          oBuffer[i]  =  thresh + threshopp*tanh_wrapper((oBuffer[i]-thresh) * threshinv);
        }
        // negative value, below threshold
        else if (oBuffer[i] < -thresh) {
          oBuffer[i] = -(thresh + threshopp*tanh_wrapper((-oBuffer[i]-thresh) * threshinv));
        }
        i = i + 1;
      }
    }
  }
}

// set threshold when the saturator kicks in. 0: tanh is applied immediately. 1: hard clip when outside [-1, 1]
and setThreshold(t: real) {
  thresh = clip(t, 0.0, 1.0);
  threshopp = 1.0 - thresh;
  if (thresh < 1.0) {
    threshinv = 1.0 / (1.0- thresh);
  }
}

// apply multiplicative to signal, can be use to avoid or increase deformation, e.g. coeff and threshold to 0.8 would ensure that any incoming signal in [-0.8..0.8] is not distored. Can also be used to invert signal, for some reason. Impose some arbitrary limits to help normalizing.
and setCoeff(c: real) {
  coeff = clip(c, getMinCoeff(), getMaxCoeff());
}

and default() @[init] {
  _ = setCoeff(1.0);
  _ = setThreshold(0.8);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff;
   Buffer.buffer(buff);
   _ = process_bufferTo(0, buff, buff);
}
