
// polyvoice FM. To be used with Voice


// retrieve sample from a specific voice
fun getSample(voice: int) {
   mem wavetable_modulator;
   mem wavetable_carrier;
   if (voice == 0) {
        return voice0:FM.process(wavetable_modulator, wavetable_carrier);
   }
   else if (voice == 1) {
        return voice1:FM.process(wavetable_modulator, wavetable_carrier);
   }
   else if (voice == 2) {
        return voice2:FM.process(wavetable_modulator, wavetable_carrier);
   }
   else if (voice == 3) {
        return voice3:FM.process(wavetable_modulator, wavetable_carrier);
   }
   return 0.0;
}

// run buffer for specified voice (buffered version of getSample), filling specified buffer
and runVoice(voice: int, nb: int, buff) {
       if (voice == 0) {
           _ = voice0:FM.process_bufferTo(wavetable_modulator, wavetable_carrier, nb, buff);
       }
       else if (voice == 1) {
           _ = voice1:FM.process_bufferTo(wavetable_modulator, wavetable_carrier, nb, buff);
       }
       else if (voice == 2) {
           _ = voice2:FM.process_bufferTo(wavetable_modulator, wavetable_carrier, nb, buff);
       }
       else if (voice == 3) {
           _ = voice3:FM.process_bufferTo(wavetable_modulator, wavetable_carrier, nb, buff);
       }
}

// send note on to selected inactive voice
// Note: should be call internally, DON'T update inner states, only forward info
and sendNoteOn(voice:int, note:int, velocity: int, channel:int) {
       // a tad tedious, as many context as we handle voices, and test all possible synth
       if (voice == 0) {
           _ = voice0:FM.noteOn(note, velocity, channel);
       }
       else if (voice == 1) {
           _ = voice1:FM.noteOn(note, velocity, channel);
       }
       else if (voice == 2) {
           _ = voice2:FM.noteOn(note, velocity, channel);
       }
       else if (voice == 3) {
           _ = voice3:FM.noteOn(note, velocity, channel);
       }
}


// send note off to selected active voice
// Note: should be call internally, DON'T update inner states, only forward info
and sendNoteOff(voice:int, note:int, channel:int) {
       // a tad tedious, as many context as we handle voices, and test all possible synth
       if (voice == 0) {
           _ = voice0:FM.noteOff(note, channel);
       }
       else if (voice == 1) {
           _ = voice1:FM.noteOff(note, channel);
       }
       else if (voice == 2) {
           _ = voice2:FM.noteOff(note, channel);
       }
       else if (voice == 3) {
           _ = voice3:FM.noteOff(note, channel);
       }
}

// change sampling rate for current synth
and setSamplerate(fs:real) {
    _ = voice0:FM.setSamplerate(fs);
    _ = voice1:FM.setSamplerate(fs);
    _ = voice2:FM.setSamplerate(fs);
    _ = voice3:FM.setSamplerate(fs);
}

/* getter/setter passed down to synth, if supported */

// Sampler.setLoop()
and synthSetLoop(flag: bool) {
}

// Sampler.setLoopStart()
and synthSetLoopStart(value: int) {
}

// Sampler.setLoopEnd()
and synthSetLoopEnd(value: int) {
}

// Sampler.getSampleSize()
and synthGetSize(): int {
  return 0;
}

// Wavetable.getNbWavetables()
and synthGetNbWavetables():int {
  return Wavetable.getNbWavetables();
}

// destined to FM modulator oscillator
and synthSetModulatorWavetable(wavetableIdx: real) {
  mem lastModulatorWavetablePhaseIdx;
  // only update if necessary, costly
  mem initModulatorWavetable;
  mem lastModulatorWavetableIdx;
  if (not(initModulatorWavetable) || wavetableIdx <> lastModulatorWavetableIdx) {
    Wavetable.morphTo(wavetableIdx, lastModulatorWavetablePhaseIdx, wavetable_modulator); 
    lastModulatorWavetableIdx = wavetableIdx;
    initModulatorWavetable = true;
  }
}

and synthSetModulatorWavetablePhase(phaseIdx: real) {
  // NB: not clamping phase so that it could be used at our advantage whene there is a diff between buffer size and wavetable size
  // only update if necessary, costly
  if (phaseIdx <> lastModulatorWavetablePhaseIdx) {
    Wavetable.morphTo(lastModulatorWavetableIdx, phaseIdx, wavetable_modulator); 
    lastModulatorWavetablePhaseIdx = phaseIdx;
  }
}

// destined to FM carrier oscillator
and synthSetCarrierWavetable(wavetableIdx: real) {
  mem lastCarrierWavetablePhaseIdx;
  // only update if necessary, costly
  mem initCarrierWavetable;
  mem lastCarrierWavetableIdx;
  if (not(initCarrierWavetable) || wavetableIdx <> lastCarrierWavetableIdx) {
    Wavetable.morphTo(wavetableIdx, lastCarrierWavetablePhaseIdx, wavetable_carrier); 
    lastCarrierWavetableIdx = wavetableIdx;
    initCarrierWavetable = true;
  }
}

and synthSetCarrierWavetablePhase(phaseIdx: real) {
  // only update if necessary, costly
  if (phaseIdx <> lastCarrierWavetablePhaseIdx) {
    Wavetable.morphTo(lastCarrierWavetableIdx, phaseIdx, wavetable_carrier); 
    lastCarrierWavetablePhaseIdx = phaseIdx;
  }
}

// FM.setModulatorRatio()
and synthSetModulatorRatio(ratio: real) {
  _ = voice0:FM.setModulatorRatio(ratio);
  _ = voice1:FM.setModulatorRatio(ratio);
  _ = voice2:FM.setModulatorRatio(ratio);
  _ = voice3:FM.setModulatorRatio(ratio);
}

// FM.setCarrierRatio()
and synthSetCarrierRatio(ratio: real) {
  _ = voice0:FM.setCarrierRatio(ratio);
  _ = voice1:FM.setCarrierRatio(ratio);
  _ = voice2:FM.setCarrierRatio(ratio);
  _ = voice3:FM.setCarrierRatio(ratio);
}

// FM.setModulatorLevel()
and synthSetModulatorLevel(level: real) {
  _ = voice0:FM.setModulatorLevel(level);
  _ = voice1:FM.setModulatorLevel(level);
  _ = voice2:FM.setModulatorLevel(level);
  _ = voice3:FM.setModulatorLevel(level);
}

// FM.setModulatorTargetLevel()
and synthSetModulatorTargetLevel(targetLevel: bool) {
  _ = voice0:FM.setModulatorTargetLevel(targetLevel);
  _ = voice1:FM.setModulatorTargetLevel(targetLevel);
  _ = voice2:FM.setModulatorTargetLevel(targetLevel);
  _ = voice3:FM.setModulatorTargetLevel(targetLevel);
}

// FM.setModulatorPhaseShift
and synthSetModulatorPhaseShift(ratio: real) {
  _ = voice0:FM.setModulatorPhaseShift(ratio);
  _ = voice1:FM.setModulatorPhaseShift(ratio);
  _ = voice2:FM.setModulatorPhaseShift(ratio);
  _ = voice3:FM.setModulatorPhaseShift(ratio);
}

// FM.setModulatorFeedback()
and synthSetModulatorFeedback(ratio: real) {
  _ = voice0:FM.setModulatorFeedback(ratio);
  _ = voice1:FM.setModulatorFeedback(ratio);
  _ = voice2:FM.setModulatorFeedback(ratio);
  _ = voice3:FM.setModulatorFeedback(ratio);
}

// FM.setModulatorADSR()
and synthSetModulatorADSR(a:real , d: real, s: real, r: real) {
  _ = voice0:FM.setModulatorADSR(a, d, s, r);
  _ = voice1:FM.setModulatorADSR(a, d, s, r);
  _ = voice2:FM.setModulatorADSR(a, d, s, r);
  _ = voice3:FM.setModulatorADSR(a, d, s, r);
}

// FM.setCarrierADSR()
and synthSetCarrierADSR(a:real , d: real, s: real, r: real) {
  _ = voice0:FM.setCarrierADSR(a, d, s, r);
  _ = voice1:FM.setCarrierADSR(a, d, s, r);
  _ = voice2:FM.setCarrierADSR(a, d, s, r);
  _ = voice3:FM.setCarrierADSR(a, d, s, r);
}

/* end parameters for synths */

// used by voice to know if this should use leftovers trick to compensate for stealing voice with this synth engine (typically something not wanted for simple waveforms, e.g. from OSC for FM
and shouldLeftOvers(): bool {
  mem should_leftovers;
  return should_leftovers;
}

and default() @[init] {
  should_leftovers = false;
  wavetable_modulator = Wavetable.bufferWavetable();
  wavetable_carrier = Wavetable.bufferWavetable();
  initModulatorWavetable = false;
  initCarrierWavetable = false;
  // default to sine
  _ = synthSetModulatorWavetable(0.0);
  _ = synthSetCarrierWavetable(0.0);
  _ = voice0:FM.default();
  _ = voice0:FM.setPoly(true);
  _ = voice1:FM.default();
  _ = voice1:FM.setPoly(true);
  _ = voice2:FM.default();
  _ = voice2:FM.setPoly(true);
  _ = voice3:FM.default();
  _ = voice3:FM.setPoly(true);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff;
   Buffer.buffer(buff);
   _ = runVoice(0, 0, buff);
}
