
// FM with 2 operators, phase modulation, monophonic

// TODO: should we reset phase on noteoff, keep processing with env 0?

// For future reference, note that using at least a temp variable in process() force vult to put that in cpp and halves computation times (???)


// giving wavetables to be used by both oscilator (tedious but this way we save on memory and copy in case of polyphony)
fun process(wavetable_modulator, wavetable_carrier) {
    // audio sampling rate
    mem fs: real;

    // pre-computed to speedup computations
    mem carrier_max_phase;
    mem carrier_phase_range;
    // used when target volume
    mem modulator_level_coeff;
    // shift modulator phase upon reset
    mem modulator_phase_shift: real;
    // feedback ratio applied to modulator
    mem modulator_max_phase: real;
    mem modulator_phase_range: real;

    // reduce cost of envelopes, only computes once in a while
    mem env_decimation_factor;
    mem carrier_env;
    mem modulator_env;
    // do we have any envelope?
    // FIXME: force update with small n or high decimation, we should keep value between run and ideally sync with process()
    mem env_modulator_idle: bool;
    mem env_carrier_idle: bool;
    // if we should modulate sound level instead of phase
    mem modulator_target_level: bool;
    // level of the synth, applied to envelop, current one and the one to target
    mem level: real;
    mem target_level: real;
    // step to apply between levels, ref and actual
    mem level_step_ref: real;
    mem level_step: real;
    // number of iteration of this loop, for decimation
    mem n;

    //  current gate
    mem gate : bool;
    // sustain pedal held or not
    mem sustain: bool;
    // there is actually something to sustain
    mem sustaining: bool;

    n = n + 1;
    val update_env:bool = true;
    if (env_decimation_factor > 0) {
       update_env = n % env_decimation_factor == 0;
    }

    // output value -- need to be explicitely initialized otherwise migth be random (?) producing audible clicks
    val carrier_val = 0.0;
    // retrieve envelopes -- both, to make sure that modulator gets updated
    if (update_env) {
       // smooth level change
       if (level <> target_level) {
	 level = level + level_step;
	 // reached target
	 if (
	     (level_step > 0.0 && level > target_level) ||
	     (level_step < 0.0 && level < target_level)
	     ) {
	   level = target_level;
	 }
       }
       carrier_env = carrieradsr:ADSR.process(gate || sustaining) * level;
       modulator_env = modulatoradsr:ADSR.process(gate || sustaining);
    }

    env_carrier_idle = carrier_env <= 0.0;
    env_modulator_idle = modulator_env <= 0.0;

    // only going forward if we got sound on the output
    if (not(env_carrier_idle)) {
       // modulate volume
       if (modulator_target_level) {
	 val carrier_level = 1.0;
	 if (not(env_modulator_idle)) {
	   val modulator_val = modulator:OSC.process(wavetable_modulator) * modulator_env;
	   // modulator val will be -env .. env, shift to 0..2*env (max 0..2). Most efficient considering feedback needs envelope 
	   carrier_level = 1.0 - (modulator_val + modulator_env) *  modulator_level_coeff;
	   // apply feedback, if any
	   if (modulator_phase_range <> 0.0) {
             _ = modulator:OSC.setPhase(modulator_phase_shift + modulator_max_phase +  modulator_phase_range * modulator_val);
	   }
	 } else {
	   _ = modulator:OSC.resetPhase();
	   _ = modulator:OSC.setPhase(modulator_phase_shift);
	 }
	 carrier_val = carrier:OSC.process(wavetable_carrier) * carrier_env * carrier_level;
       }
       // modulate the (base) phase of the carrier
       else {
	 // apply to wavetables
	 val carrier_phase = 0.0;
	 // only modulate if we got level on modulator
	 if (not(env_modulator_idle)) {
	   val modulator_val = modulator:OSC.process(wavetable_modulator) * modulator_env;
	   carrier_phase = carrier_max_phase + modulator_val * carrier_phase_range;
	   // apply feedback, if any
	   if (modulator_phase_range <> 0.0) {
             _ = modulator:OSC.setPhase(modulator_phase_shift + modulator_max_phase + modulator_phase_range * modulator_val);
	   }
	 } else {
	   _ = modulator:OSC.resetPhase();
	   _ = modulator:OSC.setPhase(modulator_phase_shift);
	 }
	 _ = carrier:OSC.setPhase(carrier_phase);
	 carrier_val = carrier:OSC.process(wavetable_carrier) * carrier_env ;
       }
    }
    // when an envelop ends we reset everything to make sure to start anew
    else {
      _ = carrier:OSC.resetPhase();
      if (env_modulator_idle) {
        _ = modulator:OSC.resetPhase();
	_ = modulator:OSC.setPhase(modulator_phase_shift);
      }
    }

    return carrier_val;
}

// update the buffer, to be fetch afterward
and process_bufferTo(wavetable_modulator, wavetable_carrier, nb: int, oBuffer) {
    mem buffer_modulator;
    nb = clip(nb, 0, size(oBuffer));
    if (nb == 0) {
       nb = size(oBuffer);
    }
    // amount of phase modulation
    mem modulator_level;
    // amount of feedback
    mem modulator_feedback;
    // buffers for envelops -- will be using the same for decimated and full
    mem buffer_carrier_env;
    mem buffer_modulator_env;

    // sanitize env decimation
    val env_df = env_decimation_factor;
    if (env_df < 1) {
      env_df = 1;
    }
    
    val nb_env = nb;
    if (env_decimation_factor > 1) {
      // compute number of samples for this buffer's decimation
      nb_env = (n + nb) / env_decimation_factor;
    }

    // we should not update envelop, just copy over last values
    if (nb_env <= 0) {
      val i = 0;
      while (i < nb) {
	// note: last env_(carrier/modulator)_idle will be also kept
	buffer_modulator_env[i] = modulator_env;
	buffer_carrier_env[i] = carrier_env;
	i = i + 1;
      }
    }
    // retrieve envelopes
    else {
      env_carrier_idle = carrieradsr:ADSR.process_bufferTo(gate || sustaining, nb_env, buffer_carrier_env);
      env_modulator_idle = modulatoradsr:ADSR.process_bufferTo(gate || sustaining, nb_env, buffer_modulator_env);
      // apply level to carrier
      // TODO: skip that if carrier idle?
      val i = 0;
      while (i < nb_env) {
	// smooth level change
	if (level <> target_level) {
	  level = level + level_step;
	  // reached target
	  if (
	      (level_step > 0.0 && level > target_level) ||
	      (level_step < 0.0 && level < target_level)
	      ) {
	       level = target_level;
	  }
	}
	buffer_carrier_env[i] = buffer_carrier_env[i] * level;
	i = i + 1;
      }
      // update position in envelop
      n = (n + nb_env) % env_df;
      // update for next pass the last values
      modulator_env = buffer_modulator_env[nb_env-1];
      carrier_env = buffer_carrier_env[nb_env-1];
	 
      // expand carrier envelop and retrieve to full version
      // FIXME: we update both envelopes, but we could select if only one is active
      if (nb_env < nb) {
	// going backward to use the same buffer
	i = nb;
	val i_env = nb_env;
	// detecting envelop updates
	val n_rev = n;
	while (i > 1 && i_env > 1) {
	  buffer_modulator_env[i-1] = buffer_modulator_env[i_env-1];
	  buffer_carrier_env[i-1] = buffer_carrier_env[i_env-1];
	  i = i - 1;
	  n_rev = n_rev - 1;
	  // reset counter to detect envelop change
	  if (n_rev <= 0) {
	    n_rev = env_df;
	    i_env = i_env - 1;
	  }
	}
      }
    }

    // apply to carrier
    if (env_carrier_idle) {
      // sync phase upon new envelopes -- albeit with a delay up to buffer size, compared to process()
      _ = carrier:OSC.resetPhase();
      if (env_modulator_idle) {
        _ = modulator:OSC.resetPhase();
	_ = modulator:OSC.setPhase(modulator_phase_shift);
      }
      // just silence on the output if its envelop is inactive
      val i = 0;
      while(i < nb) {
	oBuffer[i] = 0.0;
	i = i + 1;
      }

    } else {
      // zero modulation if inactive
      if (env_modulator_idle) {
        _ = modulator:OSC.resetPhase();
	_ = modulator:OSC.setPhase(modulator_phase_shift);
        val i = 0;
        while(i < nb) {
          buffer_modulator[i] = 0.0;
          i = i + 1;
        }
      } else {
	// feedback for modulator
	if (modulator_feedback <> 0.0) {
          _ = modulator:OSC.process_bufferTo_feedback(wavetable_modulator, nb, buffer_modulator_env, modulator_feedback, buffer_modulator);
	}
	// no feedback
	else {
          _ = modulator:OSC.process_bufferTo_simple(wavetable_modulator, nb, buffer_modulator_env, buffer_modulator);
	}
      }
      _ = carrier:OSC.process_bufferTo(wavetable_carrier, nb, buffer_carrier_env, buffer_modulator, buffer_modulator_env,  modulator_level, modulator_target_level, oBuffer);
    }
}
// to be called internally, for smoothing changes in levels
and _updateLevelStep() {
  // expects to go from 0 to 1 between levels in 1ms to avoid clicks
  level_step_ref = 1.0/(fs * 1.0);
  // might probably overflow at high factor...
  if (env_decimation_factor > 0) {
    level_step_ref = level_step_ref * real(env_decimation_factor);
  }
}
// tradeoff between perfs (high decimation) and having smooth ADSR (no decimation)
// number should be a divisor of sample rate. Clip to max 1000, already well big enough (probably artifacts going beyond 5)
and setEnvDecimationFactor(newFactor: int) {
  env_decimation_factor = clip(newFactor, 0, 1000);
  _ = _updateLevelStep();
}
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = carrier:OSC.setSamplerate(fs);
   _ = modulator:OSC.setSamplerate(fs);

    // config for ADSR
    val ADSR_fs = fs;
    if (env_decimation_factor > 0) {
       ADSR_fs = fs / real(env_decimation_factor);
    }
    _ = carrieradsr:ADSR.setSamplerate(ADSR_fs);
    _ = modulatoradsr:ADSR.setSamplerate(ADSR_fs);

    _ = _updateLevelStep();
}
// set level of the output [0..1] (applied on the envelop)
// interpolate between levels
and setLevel(newLevel: real) {
  target_level = clip(newLevel, 0.0, 1.0);
  if (target_level < level) {
    level_step = -level_step_ref;
  } else {
    level_step = level_step_ref;
  }
  // difference too tiny, just jump to level
  if (abs(target_level - level) <= level_step_ref) {
    level = target_level;
  }
}
// ratio for each operator. Keep in mind the max effective frequency, below samplingrate/2!
// negative values: used a fixed frequency (in kHz) instead of a ratio (in which case the effect will be immediate)
and setCarrierRatio(ratio: real) {
   mem carrierRatio = ratio;
   if (carrierRatio < 0.0) {
      _ = carrier:OSC.setFrequency(-carrierRatio);
   }
}
and setModulatorRatio(ratio: real) {
   mem modulatorRatio = ratio;
   if (modulatorRatio < 0.0) {
      _ = modulator:OSC.setFrequency(-modulatorRatio);
   }
}
// effect of modulator [0..1]
and setModulatorLevel(newLevel: real) {
    modulator_level = newLevel;
    // directly manipulating the phase amount -- up to twice the phase for increased effect
    // FIXME: if OSC watevable is too big will fail due to fixed float restriction, * 2.0 okay with 4096 samples (due to the way it used afterward, even * 4.0 can overflow  much)
    carrier_max_phase = real(carrier:OSC.getSize()) * 2.0;
    carrier_phase_range = carrier_max_phase * modulator_level;
    // will be used to change -1..1 to 0..1 range for modulating volume
    modulator_level_coeff = 0.5 * modulator_level;
}
// if modulator should modulate level or stay with phase
and setModulatorTargetLevel(targetLevel: bool) {
    modulator_target_level = targetLevel;
}
// ratio of phase shift for modulator (0..1)
and setModulatorPhaseShift(phaseRatio: real) {
  phaseRatio = clip(phaseRatio, 0.0, 1.0);
  modulator_phase_shift = modulator:OSC.getSize() * phaseRatio;
  modulator_phase_shift = modulator_phase_shift % modulator:OSC.getSize();
}
// feedback to modulator (should be 0..1)
and setModulatorFeedback(feedback: real) {
  modulator_feedback = feedback;
  // directly compute shift in samples
  modulator_max_phase = real(modulator:OSC.getSize()) * 2.0;
  modulator_phase_range = modulator_max_phase * feedback;
}

// should be 0..nquist, in kHz
// apply current pitch bend, if any
and setFrequency(newFreq: real) {
  // save last freq and pitch bend
  mem freq;
  mem bend;
  if (newFreq >= 0.0) {
    freq = newFreq;
    val bendFreq = freq;
    if (bend <> 0.0) {
      bendFreq = freq * Util.tonesToCoeff(bend);
    }
    if (carrierRatio >= 0.0) {
      _ = carrier:OSC.setFrequency(bendFreq * carrierRatio);
    }
    if (modulatorRatio >= 0.0) {
      _ = modulator:OSC.setFrequency(bendFreq * modulatorRatio);
    }
  }
}


// bend the pitch by + or minus semitones. Apply changes to freq
and pitchBend(semitones: real) {
  if (semitones <> bend) {
    bend = semitones;
    setFrequency(freq);
  }
}

// set polpyphonic (true flag) or monophonic (false flag)
// monophonic: will get back to former notes, if any, upon note off, and does not retriger upon new notes
// polyphonic: does not try to get back to held notes frequencies, retrigger on each new noteOn
and setPoly(flag: bool) {
   _ = playingnotes:Notes.setPoly(flag);
}

// midi-like interface

// Hold gate even after note-off
// Note: do call setSustain(off) at some point to release notes!
and setSustain(flag: bool) {
  sustain = flag;
  // activate sustain if there is already a gate
  if (gate && sustain) {
    sustaining = true;
  }
  // disable upon release
  if (not(sustain)) {
    sustaining = false;
  }
}

// beginning of a note, retrigger each time in case of polyphony
// return true if was not playing this note, false otherwise
and noteOn(note:int, velocity:int, channel:int){
   // only 128 midi notes
   note = clip(note, 0, 127);
   // check if the new note is new
   val isNew = playingnotes:Notes.noteOn(note, velocity, channel);
   // set frequency... should we reset phase somehow? artifacts upon first tests
   _ = setFrequency(Util.noteToFrequency(note));
   _ = setLevel(Util.velocityToLevel(velocity));
   // gate, no mater what
   gate = true;
   // update status with sustain pedal
   if (sustain) {
     sustaining = true;
   }
   // retrigger if we play the same note or if there is only one note playing (e.g. voice was stolen during polyphony)
   if (playingnotes:Notes.getPoly()) {
     _ = carrieradsr:ADSR.retrig();
     _ = modulatoradsr:ADSR.retrig();
   }
   return isNew;
}

// note off whatever the channel, back to frequency of last still active note if any
and noteOff(note:int, channel:int) {
   // only 128 midi notes
   note = clip(note, 0, 127);
   // only acts if action taken into account
   if (playingnotes:Notes.noteOff(note, channel)) {
      // still gate on-going if there are note held, and switch to last (should happen only for monophony)
      if (playingnotes:Notes.nbNotes() > 0){
         val last_played = playingnotes:Notes.lastNote();
	 // check we do have a note -- and that it's in range
         if (last_played > 0 && last_played <= 128) {
	   // note: keeping current level...
            _ = setFrequency(Util.noteToFrequency(last_played - 1));
         }
      } else {
         gate = false;
      }
   }
}

// change oscillators envelopes
and setModulatorADSR(a, d, s, r) {
    _ = modulatoradsr:ADSR.config(a, d, s, r);
}

and setCarrierADSR(a, d, s, r) {
    _ = carrieradsr:ADSR.config(a, d, s, r);
}

// to be called on start
and default() @[init] {
    Buffer.buffer(buffer_modulator);
    Buffer.buffer(buffer_carrier_env);
    Buffer.buffer(buffer_modulator_env);

    // should be a divisor of sample rate
    _ = setEnvDecimationFactor(3);

    // init used items
    // FIXME: not sure why if @init is set
    _ = carrier:OSC.default();
    _ = modulator:OSC.default();
    _ = carrieradsr:ADSR.default();
    _ = modulatoradsr:ADSR.default();

    // default envelops
    _ = setModulatorADSR(0.0, 0.0, 0.5, 0.0);
    _ = setCarrierADSR(0.0, 0.0, 0.5, 0.0);

    // default sampling rate (in kHz)
    _ = setSamplerate(44.100);
    
    // config for operators
    _ = setCarrierRatio(1.0);
    _ = setModulatorTargetLevel(false);
    _ = setModulatorRatio(2.0);
    _ = setModulatorLevel(0.1);
    _ = setLevel(1.0);
    // sarting with LA
    _ = setFrequency(0.440);

    // monophonic by default, we allow retrigger
    _ = playingnotes:Notes.default();
    _ = playingnotes:Notes.setAllowDuplicates(true);
    _ = setPoly(false);
}

// to let vult find above the good buffer size
fun dummy(wavetable) {
   val buff;
   Buffer.buffer(buff);
   _ = process_bufferTo(wavetable, wavetable, 0, buff);
}
