// State variable filter
// Adapted from Vult examples (with copyright 2017 Leonardo Laguna Ruiz) and MIT Licence
// Note that filter freq will be caped at nyquist (sample rate / 2)... minus some to avoid coeff going to the room

// update table for computing coeff, from 0hz to nyquist
fun updateGTable() {
   // current sampling rate and max possible frequency
   mem fs: real;
   mem fs_nyquist: real;
   // buffer to store frequency tables
   mem g_table;
   // size of table, to speedup (hence must be init first!)
   mem rsize;

   // temp variables for computations
   val wd, T, wa;

   // frequency in the table to be updated
   val fi;
   val i = 0;

   while (i < size(g_table)){
     fi = real(i) * fs_nyquist / rsize;
     wd = 2.0*pi()*fi;
     T  = 1.0/fs;
     wa = (2.0/T)*tan(wd*T/2.0);
     g_table[i] = wa*T/2.0;
     i = i + 1;
   }
}

// update G after sample rate or frequency change, with a linear interpolation. Except a frequency below nyquist, in kHz
and updateG() {
   // selected frequency and corresponding coeff to be tuned
   mem freq, g;
   // to speedup computations
   mem gRatio;
   freq = clip(freq, 0.0, fs_nyquist);
   val idx = freq * gRatio;
   val iIdx = int(idx);
   if (iIdx < size(g_table) - 1) {
      // interpolate
      g = g_table[iIdx] + (idx % 1.0) * (g_table[iIdx+1] - g_table[iIdx]);
   }
   else {
      g = g_table[size(g_table) - 1];
   }
}

// to be called upon new freq or Q, after updateG
and updateCoeffs() {
  // selected band and coeffs to be tuned
   mem q, inv_den, R;
   R = 1.0/(2.0*(q+eps()));
   inv_den = 1.0/(1.0 + 2.0*R*g + g*g);
}


// note that effects will depend on input level
and setFreq(newFreq: real) {
   mem targetFreq = clip(newFreq, 0.0, fs_nyquist);
   _ = updateG();
   _ = updateCoeffs();
}

// set... bandwidth?
and setQ(newQ: real) {
  if (newQ >= 0.0) {
    q = newQ;
  }
  _ = updateCoeffs();
}

// setting filter type
// 0: disabled
// 1: low-pass
// 2: high-pass
// 3: band-pass
// 4: notch
and setType(newSel: int) {
  mem sel = clip(newSel, 0, 4);
}

and process(input:real):real {
   // actually compute even when disable to avoid noise upon start
   /*if (sel == 0) {
     return input;
     }*/
   mem z1, z2;
   mem targetFreq;
   mem freq = Util.smooth(targetFreq, 0.1);
   if(Util.change(freq)) {
     _ = updateG();
     _ = updateCoeffs();
   }
   
   val high  = (input - (2.0*R + g)*z1 - z2) * inv_den;
   val band  = g*high + z1;
   val low   = g*band + z2;

   z1 = g*high + band;
   z2 = g*band + low;

   val output =
      if sel == 1 then low else
      if sel == 2 then high else
      if sel == 3 then band else
      if sel == 4 then low + high else
      input;
   //return Saturate_soft.process(output);
   return output;
}

and process_bufferTo(nb: int, input, oBuffer) {
  val min_nb = size(input);
  if (size(oBuffer) < min_nb) {
     min_nb = size(oBuffer);
  }
  nb = clip(nb, 0, min_nb);
  if (nb == 0) {
     nb = min_nb;
  }

  val i = 0;
  // actually compute even when disable to avoid noise upon start
  /*if (sel == 0) {
    while (i < nb) {
      oBuffer[i] = input[i];
      i = i + 1;
    }
  } else {
  */
    while (i < nb) {
      freq = Util.smooth(targetFreq, 0.1);
      if(Util.change(freq)) {
        _ = updateG();
        _ = updateCoeffs();
      }

      val high  = (input[i] - (2.0*R + g)*z1 - z2) * inv_den;
      val band  = g*high + z1;
      val low   = g*band + z2;
   
      z1 = g*high + band;
      z2 = g*band + low;

      oBuffer[i] =
        if sel == 1 then low else
        if sel == 2 then high else
        if sel == 3 then band else
        // notch
        if sel == 4 then low + high else
        input[i];

      i = i + 1;
    }
  /*}*/
}



// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
// Will re-compute the tuning table, call will be costly
and setSamplerate(newFs:real) {
   mem gRatio;
   if (newFs > 0.0) {
      fs = newFs;
      // not really fs/2 to avoid problem with values too high (noise as we reach nyquist)
      fs_nyquist = fs*0.45;
      gRatio = rsize / fs_nyquist;
      _ = updateGTable();
      _ = updateG();
      _ = updateCoeffs();
   }
}


and default() @[init] {
   // frequency table will be computed ahead of time to save resources
   mem g_table: array(real, 1024);
   rsize = real(size(g_table));
   freq = 0.0;
   q = 0.1;
   // will also call methods to update coeffs
   _ = setSamplerate(44.1);
 }

// to let vult find above the good buffer size
fun dummy() {
   val buff =  Buffer.buffer();
   _ = process_bufferTo(0, buff, buff);
}