
// Wrapper to create voice from a poly synth
// Very conservative concerning the volume, will each voice will have a fraction of the max amplitude with normalize flag
// Duplicate note-on event will retrigger same voice
// If "reuse" is set, priority for the last inactive voice, if any, which played the same note. Such behavior will make less of a difference for example during sustain, but it will prevent layeyring multiple times the same notes (which could be useful for drums).
// Try to minimize (poorly) clicks/pops when voices are stolen.
// When max voices is reached (which can happen fast with sustain), still oldest playing voice. Stealing in priority voice playing same note could sound better, but makes less sense for music (could skip newer notes)
// Note: does not take midi channel into account at this level
// TODO: back to monophonic if number of voices is 1
// FIXME: properly normalize leftovers?

// retrieve sample from all voices, mix
fun process() {
   // If voices are currently playng on not -- and max number of voices
   // holds the note currently playing, or as negative number the previous note playing + 1
   mem voices;
   // how many voices we support at the moment?
   mem number_voices;
   // store last values for each voice, used to avoid clicks when stealing one
   mem last_values;
   // keep all residues, that will decay over time to minimize clicks and pops (T60 200ms)
   mem leftovers: real;
   mem leftovers_decay: real;
   // to speedup, corresponding ratio per voice
   mem voices_ratio;
   // what voice (if any) number are associated to (voice + 1), negative for last voice played, 0 if never used
   mem notes;
   // normalize: output maxed to -1 / 1 no matter the number of voices
   mem normalize;

   // output sample
   val value = 0.0;

   val i = 0;
   // accumulate all voices
   while (i < number_voices) {
      last_values[i] = poly:Poly.getSample(i);
      value = value + last_values[i];
      i = i + 1;
   }
   // leftovers, if any
   if (leftovers <> 0.0) {
       leftovers = leftovers * leftovers_decay;
       value = value + leftovers;
   }
   // normalise
   if (normalize) {
      return value * voices_ratio;
   }
   return value;
}

// one buffer for all voice
and process_bufferTo(nb: int, oBuffer) {
   // here used as temporary buffer to hold each voice
   mem buffer_v0;
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   // run all voices and add to output buffer
   val v = 0;
   val i = 0;
   // first run to init
   if (v < number_voices) {
      _ = poly:Poly.runVoice(v, nb, buffer_v0);
      i = 0;
      while (i < nb) {
         oBuffer[i] = buffer_v0[i];
         i = i + 1;
      }
      if (nb > 0) {
         last_values[v] = buffer_v0[nb - 1];
      }
      v = v + 1;
   }
   // accumulate the others
   while (v < number_voices) {
      _ = poly:Poly.runVoice(v, nb, buffer_v0);
      i = 0;
      while (i < nb) {
	oBuffer[i] = oBuffer[i] + buffer_v0[i];
         i = i + 1;
      }
      if (nb > 0) {
         last_values[v] = buffer_v0[nb - 1];
      }
      v = v + 1;
   }
   // leftovers, if any
   i = 0;
   while (leftovers <> 0.0 && i < nb) {
      leftovers = leftovers * leftovers_decay;
      oBuffer[i] = oBuffer[i] + leftovers;
      i = i + 1;
   }
   // scale down
   if (normalize) {
      i = 0;
      while (i < nb) {
          oBuffer[i] = oBuffer[i] * voices_ratio;
          i = i + 1;
      }
   }
}

// Upon new notes, should we reuse in priority the last voice which played the note, if it was not used in-between? By default pick oldest inactive voice, no matter what, e.g. rotating.
// Does not affect the behavior when all voices are taken, e.g. steal oldest voice, rotating.
and setReuse(flag: bool) {
   mem reuse = flag;
}

// transmit noteOff to corresponding voice, update inner states active/inactive voice
and noteOff(note:int, channel:int) {
   // only 128 midi notes (and max voice)
   note = clip(note, 0, 127);
   // corresponding voice stored as voice+1
   val v = notes[note];
   // is this note really playing on a voice?
   if (v > 0 && v <= size(voices)) {
      // remove voice from active
      // channel 0, just because
      if (voicesactive:Notes.noteOff(v - 1, 0)) {
          // disable voice
          _ = poly:Poly.sendNoteOff(v - 1, note, channel);
          // update arrays, stating last note and voice
          notes[note] = -v;
	  voices[v-1] = -(note+1);
	  // add voice to inactive (127 velocity, just because)
          if (v <= number_voices) {
             _ = voicesinactive:Notes.noteOn(v - 1, 127, 0);
          }
      }
   }
}

// transmit noteOn to new voice (oldest inactive). If none, will turn off and steal oldest active. update inner states active/inactive voice. If the note is already playing: keep same voice.
// note: pitch as MIDI code
// velocity: 0..127
// channnel: 1..16
and noteOn(note:int, velocity:int, channel:int){
   mem last_velocities;
   // only 128 midi notes
   note = clip(note, 0, 127);
   velocity = clip(velocity, 0, 127);
   // current voice for this note
   val v = notes[note];
   // if the note already has a valid voice
   if (v > 0 && v <= number_voices) {
      // disable / enable voice to update state, counting on lazy evaluation to check if it is successful
      if (not(
              voicesactive:Notes.noteOff(v - 1, 0) &&
              voicesinactive:Notes.noteOn(v - 1, 127, 0) &&
              voicesinactive:Notes.noteOff(v - 1, 0) &&
              voicesactive:Notes.noteOn(v - 1, 127, 0)
              )) {
         // something went wrong, disable (and reset) voice
         notes[note] = 0;
         voices[v-1] = 0;
         v = 0;
      }
   }
   // if option set, note not active but was lastly played in an unused voice -- possibly still in release state --, bring it forth
   else if (reuse && v < 0 && -v <= number_voices && voices[-v-1] == - (note + 1) && notes[note] == v) {
      // we will target our inactive voice
      v = -v;
      // re-enable voice to update state
      if (not(
              voicesinactive:Notes.noteOff(v - 1, 0) &&
              voicesactive:Notes.noteOn(v - 1, 127, 0)
              )) {
         // something went wrong, disable (and reset) voice
         notes[note] = 0;
         voices[v-1] = 0;
         v = 0;
      }
   }
   // will try another voice
   else  {
      // at least one free voice, take the oldest
      // todo: check both active and inactive status?
      v = voicesinactive:Notes.firstNote();
      // no active voice, we will steal one (double check with actual number of voice)
      if (v <= 0 || v > number_voices) {
         val active_v = voicesactive:Notes.firstNote();
	 // check we do indeed have one (the opposity would be a bug)
	 if (active_v > 0) {
	    // disable this voice (with arbitrary channel)
	    _ = noteOff(voices[active_v-1], 0);
	 }
      }
      // now we should have at least one inactive voice
      v = voicesinactive:Notes.firstNote();
      if (v > 0 && v <= number_voices) {
         // check if voice is removed successfully from inactive ones and added to active ones (arbitrary channel 0 and velocity 127)
         if (not(voicesinactive:Notes.noteOff(v - 1, 0) && voicesactive:Notes.noteOn(v - 1, 127, 0))) {
            v = 0;
         }
      }
      else {
         // could reach here if we failed to steal
         v = 0;
      }
   }

   // we either retrigger, re-activated an old vice (typo too good to correct), get a new voice or steal a voice, apply changes
   if (v > 0) {
      // retrieve last value of this voice to mitigate pops 
      if (poly:Poly.shouldLeftOvers()) {
         leftovers = leftovers + last_values[v-1];
      }
      // forward info
      _ = poly:Poly.sendNoteOn(v - 1, note, velocity, channel);
      // update arrays
      notes[note] = v;
      voices[v-1] = note;
      last_velocities[v-1] = velocity;
   }
}

// setter for the number of voices, from 0 (disable) to max size of inner buffer
and setNbVoices(nbvoices: int) {
   nbvoices = clip(nbvoices, 0, size(voices));
   // turn off voices that will be unused, highest voice first
   val i = voicesactive:Notes.nbNotes();
   while(i > nbvoices && i > 0) {
      // get note of current voice and turn it off (with arbitrary channel)
      _ = noteOff(voices[i-1], 0);
      // also remove from inactive
      _ = voicesinactive:Notes.noteOff(i - 1, 0);
      i = i - 1;
   }
   i = voicesinactive:Notes.nbNotes();
   
   // turn on inactive voice if we increase voices, lowest first
   if (i < nbvoices) {
      while(i < nbvoices) {
         _ = voicesinactive:Notes.noteOn(i, 127, 0);
         i = i + 1;
      }
   }
   // turn off inactive voices if we decrease voices, highest first
   else {
      while(i >= nbvoices) {
         _ = voicesinactive:Notes.noteOff(i, 0);
         i = i - 1;
      }
   }
   
   number_voices = nbvoices;
   if (number_voices > 0) {
      voices_ratio  = 1.0/real(number_voices);
   }
}

// normalize: output maxed to -1 / 1 no matter the number of voices
and setNormalize(flag: bool) {
   normalize = flag;
}

// change sampling rate for current synth
and setSamplerate(newFs:real) {
   mem fs;
   if (newFs > 0.0) {
      fs = newFs;
   }
   _ = poly:Poly.setSamplerate(fs);
   // safe formula as in reverb, to reduce by 60db leftovers in 200ms
   val log_base = log10(10.0)/log10(exp(1.0));
   leftovers_decay = exp(log_base * (-3.0 / 1000.0) / (fs * 0.2));
}

/* getter/setter passed down to synth, if supported */

// information about current sustain (keep gate until released)
// Note: do call setSustain(off) at some point to release notes!
and synthSetSustain(flag: bool) {
  _ =  poly:Poly.synthSetSustain(flag);
}

// apply pitch bend of +/- seminotes
and synthPitchBend(semitones: real) {
  _ =  poly:Poly.synthPitchBend(semitones);
}

// Sampler.setLoop()
and synthSetLoop(flag: bool) {
  _ =  poly:Poly.synthSetLoop(flag);
}

// Sampler.setLoopStart()
and synthSetLoopStart(value: int) {
  _ =  poly:Poly.synthSetLoopStart(value);
}

// Sampler.setLoopEnd()
and synthSetLoopEnd(value: int) {
  _ =  poly:Poly.synthSetLoopEnd(value);
}

// Sampler.getLoop()
and synthGetLoop(): bool {
  return poly:Poly.synthGetLoop();
}

// Sampler.getLoopStart()
and synthGetLoopStart(): int {
  return poly:Poly.synthGetLoopStart();
}

// Sampler.getLoopEnd()
and synthGetLoopEnd(): int {
  return poly:Poly.synthGetLoopEnd();
}

// Sampler.getSampleSize()
and synthGetSize(): int {
  return poly:Poly.synthGetSize();
}

// FM: Wavetable.getNbWavetables()
and synthGetNbWavetables(): int {
  return poly:Poly.synthGetNbWavetables();
}

// FM: destined to modulator oscillator
and synthSetModulatorWavetable(wavetableIdx: real) {
  _ = poly:Poly.synthSetModulatorWavetable(wavetableIdx);
}

and synthSetModulatorWavetablePhase(phaseIdx: real) {
  _ = poly:Poly.synthSetModulatorWavetablePhase(phaseIdx);
}

// FM: destined to carrier oscillator
and synthSetCarrierWavetable(wavetableIdx: real) {
  _ = poly:Poly.synthSetCarrierWavetable(wavetableIdx);
}

and synthSetCarrierWavetablePhase(phaseIdx: real) {
  _ = poly:Poly.synthSetCarrierWavetablePhase(phaseIdx);
}

// FM.setModulatorRatio()
and synthSetModulatorRatio(ratio: real) {
  _ = poly:Poly.synthSetModulatorRatio(ratio);
}

// FM.setCarrierRatio()
and synthSetCarrierRatio(ratio: real) {
  _ = poly:Poly.synthSetCarrierRatio(ratio);
}

// FM.setModulatorLevel()
and synthSetModulatorLevel(level: real) {
  _ = poly:Poly.synthSetModulatorLevel(level);
}

// FM.setModulatorTargetLevel()
and synthSetModulatorTargetLevel(targetLevel: bool) {
  _ = poly:Poly.synthSetModulatorTargetLevel(targetLevel);
}

// FM.setModulatorPhaseShift
and synthSetModulatorPhaseShift(ratio: real) {
  _ = poly:Poly.synthSetModulatorPhaseShift(ratio);
}

// FM.setModulatorFeedback()
and synthSetModulatorFeedback(ratio: real) {
  _ = poly:Poly.synthSetModulatorFeedback(ratio);
}

// FM.setModulatorADSR()
and synthSetModulatorADSR(a:real, d: real, s: real, r: real) {
  _ = poly:Poly.synthSetModulatorADSR(a, d, s, r);
}

// FM.setCarrierADSR()
and synthSetCarrierADSR(a:real, d: real, s: real, r: real) {
  _ = poly:Poly.synthSetCarrierADSR(a, d, s, r);
}

// FM.setEnvDecimationFactor()
and synthSetEnvDecimationFactor(newFactor: int) {
  _ = poly:Poly.synthSetEnvDecimationFactor(newFactor);
}

/* end parameters for synths */

and default() @[init] {
   _ = poly:Poly.default();

   Buffer.buffer(buffer_v0);

   mem voices: array(int, 4);
   number_voices = if number_voices == 0 then size(voices) else number_voices;
    // which notes are active, if so to which voice? (to select voice and prune duplicated note on/off). Stores voice number + 1
   _ = setNbVoices(number_voices);
   mem notes: array(int, 128);
   // FIXME: hard-coded 4 voices
   mem last_values: array(real, 4);
   mem last_velocities: array(int, 4);

   // monophonic algo used to keep track of active voices...
   _ = voicesactive:Notes.default();
   _ = voicesactive:Notes.setPoly(false);
   _ = voicesactive:Notes.setAllowDuplicates(false);
   // and same for disabled voices
   _ = voicesinactive:Notes.default();
   _ = voicesinactive:Notes.setPoly(false);
   _ = voiceinsactive:Notes.setAllowDuplicates(false);

   _ = setNormalize(true);
   _ = setSamplerate(44.1);

   // default to rotating inactive voices
   _ = setReuse(false);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff;
   Buffer.buffer(buff);
   _ = process_bufferTo(0, buff);
}
