
// handling current notes and gates
// Note: store history up to all 128 midi notes, if MIDI is spammed with lots on note on/off on the whole range processing will get slow
// Note: also used in polyphony, as a hack to handle voices

// set polpyphonic (true flag) or monophonic (false flag)
// monophonic: keep track of currently play notes
// polyphonic: new note replace any previous
// WARNING: should not call that mid-execution, inner states not uptated and will mostly behave erratically (TODO: do it)
fun setPoly(flag: bool) {
   mem poly : bool = flag;
}

// should we ignore noteOn of already playing notes? (if set to true: old behavior)
and setIgnoreDuplicates(flag: bool) {
   mem ignoreDuplicates;
   ignoreDuplicates = flag;
}

and default() @[init] {
    // how many notes are currently held
    mem nb_notes: int;
    // which notes are active? (to prune duplicated note on/off). Stores current number of notes when was on / position + 1 in last_notes
    mem notes: array(int, 128);

    // order of appearance of notes (to go back to previous one when several are held)
    // for the sake of simplicity, notes will be 1 to 128 here (so we can keep track of note 0 at little cost)
    mem last_notes: array(int, 128);

    // explicitely monophonic by default, allow retrigger
    setPoly(false);
    setIgnoreDuplicates(false);
}

and nbNotes() {
    return nb_notes;
}

// return a note number 1..128, 0 if nothing
and firstNote() {
   val first_played = 0;
   // find last note if any
   if (nb_notes > 0) {
      // here last notes coded on 1..128
      first_played = last_notes[0];
   }
   return first_played;
}

// return a note number 1..128, 0 if nothing
and lastNote() {
   val last_played = 0;
   // find last note if any
   if (nb_notes > 0) {
      // here last notes coded on 1..128
      last_played = last_notes[nb_notes-1];
   }
   return last_played;
}

// note off whatever the channel, back to frequency of last still active note if any
// return true if note indeed turned off, false otherwise
and noteOff(note:int, channel:int): bool {
   // only 128 midi notes
   note = clip(note, 0, 127);
   // make sure the note was active before taking it into consideration
   if (notes[note] > 0) {
      // if poly, just turn off the (hopefully) current note
      if (poly) {
         notes[note] = 0;
	 nb_notes = 0;
      }
      // for monophony, updates state
      else {
         // fetch this note sequence number
         val i = notes[note] - 1;
         // update until current number
         while (i < nb_notes) {
            // move down last notes
	    if (i < size(last_notes) - 1) {
               last_notes[i] = last_notes[i+1];
            } else {
	       last_notes[i] = 0;
	    }
            // update corresponding pointer in notes[], unless we arrived at top
	    if (last_notes[i] > 0) { 
               notes[last_notes[i] - 1] = i + 1;
	    }
            i = i + 1;
         }
         notes[note] = 0;
         nb_notes = nb_notes - 1;
         // failsafe
         if (nb_notes < 0) {
            nb_notes = 0;
         }
      }
      return true;
   }
   return false;
}


// beginning of a note
// return true if note is new, false otherwise (meaning note will not be consider with ignoreDuplicates)
// TODO: code instead, if note there, if note new, if note currently playing
and noteOn(note:int, velocity:int, channel:int): bool {
   // only 128 midi notes
   note = clip(note, 0, 127);
   val isNew : bool = notes[note] <= 0;
   if (not(ignoreDuplicates) || isNew) {
      // monophonic (default), save held notes, update state to bring it forth if already active
      if (not(poly)) {
         // already playing, turn off so we can bring it forth
         if (not(isNew)) {
            _ = noteOff(note, channel);
         }
         // now going forward
         nb_notes = nb_notes + 1;
         // failsafe
         if (nb_notes > 128) {
            nb_notes = 128;
         }
      }
      // polyphonic: forget current note, if any, replace (...by the same one if not new, could improve maybe here)
      else {
         val last_note = lastNote();
         if (last_note > 0) {
            notes[last_note-1] = 0;
         }
         nb_notes = 1;
      }
      // add note to list anyhow
      notes[note] = nb_notes;
      last_notes[nb_notes-1] = note + 1;
   }
   return isNew;
}
