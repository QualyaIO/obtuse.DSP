// oscillator, using this time index of Wavetable to save on RAM (at the cost of CPU). 
// NOTE: code even more duplicated from OSC.vult... and also some from Wavetable to speedup computations


// helper function to morph between wavetable1 and wavetable2 with selected phase_shift (in number of samples here) and wavetable_ratio between them (0: full first wavetable, 1 full second) and retrieve (interpolated) sample "index"
fun getSampleMorph(wavetable1: int, wavetable2: int, wavetable_ratio: real, phase_shift: int, index: real): real {
   // pick actual indices and ratio between them
   val idx1: int = int(index);
   val idx2: int = idx1 + 1;
   // retrieve samples from both wavetables -- we reproduced the fact that Wavetable.getMorph() does not interpolate for phase shift
   val w1_s1: real = Wavetable.getSample(wavetable1, idx1 + phase_shift);
   val w1_s2: real = Wavetable.getSample(wavetable1, idx2 + phase_shift);
   val w2_s1: real = Wavetable.getSample(wavetable2, idx1);
   val w2_s2: real = Wavetable.getSample(wavetable2, idx2);
   // morph between wavetables for first then second sample
   val s1 = w1_s1 + wavetable_ratio * (w2_s1 - w1_s1);
   val s2 = w1_s2 + wavetable_ratio * (w2_s2 - w1_s2);
   // interpolate between samples
   return s1 + (s2 - s1) * (index % 1.0);
}

// non-buffered version
fun process() {
   // audio sampling rate
   mem fs: real;
   // sinus frequency
   mem freq: real;
   // starting point for phase, [0..4k[ in the wavetable
   mem phase_base: real;
   // current phase
   mem phase: real;
   // going that much through wavetable at each call
   mem step: real;
   // absolutely needs init to set that, converted to real to speedup
   mem rsize: real;
   // phase shift of the first wavetable, used upon interpolation. Amount: 0..1
   mem wavetable_phase_shift: int;
   // will morph beween first and second wavetable
   mem wavetable1: int;
   mem wavetable2: int;
   // ratio between first and second wavetable
   mem wavetable_ratio: real;

   // advance time, keep range in check here to maximize precision
   phase = phase + step;
   while (phase > rsize) {
      phase = phase - rsize;
   }

   // let others take care of modulo
   return getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, phase_base + phase);
}


// --> main function actually here, call default() first <--
// buffered version, specify number of elements of the buffer to proceed (will be caped to actual max). 0: all elements
// update the buffer, to be fetch afterward
// env: envelope to apply (0..1)
// phase_shift: specify how to shift the base phase (-1 to 1, 0 center of phase) -- FIXME so that 0 does not change anything?
// phase_env: envelope for phase shift, needed in case for shift_level
// phase_shift_level: by how much we apply phase shift (0..1)
// shift_level: if we should *actually* shift level instead of phase
// oBuffer: output buffer to copy data to
// FIXME: not check for phase_bases size, only use phase_shift, no option to by-pass
and process_bufferTo(nb: int, env, phase_shift, phase_env, phase_shift_level: real, shift_level: bool, oBuffer) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   // base for phase shift -- beware, if OSC > 4096 we might hit fixed point limit
   val max_phase = rsize * 2.0;
   val phase_range = max_phase * phase_shift_level;
   // base for volume shift
   val level_shift_coeff = 0.5 * phase_shift_level;

   val i = 0;

   // duplicate some code with outer loop test to minimize number of tests, here modulate volume
   if (shift_level) {
     while (i < nb) {
        // advance time, keep range in check here to maximize precision
        phase = phase + step;
        // slightly more efficient than the more robust modulo
        while (phase > rsize) {
           phase = phase - rsize;
        }
        // phase shift from -1..1 to 0..1, and don't change if there is no modulation 
        oBuffer[i] = getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, phase) * env[i] * (1.0 - (phase_shift[i] + phase_env[i]) * level_shift_coeff);
        i = i + 1;
     }
   }
   // modulate phase
   else {
     while (i < nb) {
        phase = phase + step;
        while (phase > rsize) {
           phase = phase - rsize;
        } 
        oBuffer[i] = getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, max_phase + phase_range * phase_shift[i] + phase) * env[i];
        i = i + 1;
     }
   }
}

// without phase this one
and process_bufferTo_simple(nb: int, env, oBuffer) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      // slightly more efficient than the more robust modulo
      while (phase > rsize) {
         phase = phase - rsize;
      }
      // loop in sample
      oBuffer[i] = getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, phase_base + phase) * env[i];
      i = i + 1;
   }
}

// with feedback on phase rather than modulation. Note that only here is kept state of last value to apply feedback, do not alternate with other methods.,
and process_bufferTo_feedback(nb: int, env, feedback: real, oBuffer) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }

   // base for phase shift
   val max_phase = rsize * 2.0;
   val phase_range = max_phase * feedback;
   // need to update feedack at n+1
   mem last_val_feedback;
   
   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      // slightly more efficient than the more robust modulo
      while (phase > rsize) {
         phase = phase - rsize;
      }
      // loop in sample
      last_val_feedback = getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, phase_base + max_phase + phase_range * last_val_feedback + phase) * env[i];
      oBuffer[i] = last_val_feedback;
      i = i + 1;
   }
}


// without envelop nor phase this one
and process_bufferTo_simplest(nb: int, oBuffer) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      // slightly more efficient than the more robust modulo
      while (phase > rsize) {
         phase = phase - rsize;
      }
      // loop in sample
      oBuffer[i] = getSampleMorph(wavetable1, wavetable2, wavetable_ratio, wavetable_phase_shift, phase_base + phase);
      i = i + 1;
   }
}

// called internally when Samplerate or frequency is altered
and updateStep() {
    // base for computing step
    mem stepRatio;
    // both for efficiency and because we don't want any result to be outside [1/32767 .. 32767] to avoid fixed float limits we compute step in two... steps
    step = stepRatio*freq;
}
// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
      // update ratio when we update sampling rate
      stepRatio = rsize / fs;
   }
   _ = updateStep();
}
and setFrequency(newFreq:real) {
   freq = newFreq;
   _ = updateStep();
}
// setting *base* phase [0..size[ -- we won't check here, beware!
and setPhase(newPhase: real) {
   phase_base = newPhase;
}

// setting the phase shift of the first wavetable compared to the second for morphed one. value 0..1
and setWavetablePhase(phaseRatio: real) {
   // NOTE: we do not enforce for 0..1 interval as in Wavetable.morphTo()
   wavetable_phase_shift = int(rsize * phaseRatio);
}

// select a wavetable within banks, with the possibility to morph between two adjacent ones
and setWavetable(wavetableIdx: real) {
   // slight duplication to speedup, to sync with code in Wavetable.morphTo() for consistent behavior
   wavetableIdx = clip(wavetableIdx, 0.0, real(Wavetable.getNbWavetables()));
   wavetable1 = int(floor(wavetableIdx));
   wavetable2 = wavetable1 + 1;
   // loop morphing
   if (wavetable2 >= Wavetable.getNbWavetables()) {
      wavetable2 = 0;
   }
   // 100% back to first wavetable at max
   if (wavetable1 >= Wavetable.getNbWavetables()) {
      wavetable1 = 0;
   }
   wavetable_ratio = wavetableIdx % 1.0;
}

// reset both base phase and current phase, typically used upon new note. Also reset value used for feedback.
and resetPhase() {
   phase = 0.0;
   phase_base = 0.0;
   last_val_feedback = 0.0;
}

// size of wavetable
and getSize() {
    return rsize;
}

and default() @[init] {
   rsize = real(Wavetable.bufferSize());
   // default sampling rate (in kHz)
   _ = setSamplerate(44.1);
   // default frequency (in kHz)
   _ = setFrequency(0.440);
   // explicitly select pure sine as first wave
   _ = setWavetable(0.0);
   _ = setWavetablePhase(0.0);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff;
   Buffer.buffer(buff);
   _ = process_bufferTo(0, buff, buff, buff, 0.0, false, buff);
   _ = process_bufferTo_simple(0, buff, buff);
   _ = process_bufferTo_feedback(0, buff, 0.0, buff);
   _ = process_bufferTo_simplest(0, buff);
}
