// Diode ladder filter
// Adapted from Vult examples (with copyright 2017 Leonardo Laguna Ruiz) and MIT Licence
// Note that filter freq will be caped at nyquist (sample rate / 2)

fun heun(input, fh, res) {
   mem p0, p1, p2, p3;

   val wt0 = Util.cubic_clipper(input - 4.0 * res * p3);
   val wt1 = Util.cubic_clipper(p0);
   val dpt0 = (wt0 - wt1) * fh;
   val wt3 = Util.cubic_clipper(p1);
   val dpt1 = (wt1 - wt3) * fh;
   val wt5 = Util.cubic_clipper(p2);
   val dpt2 = (wt3 - wt5) * fh;
   val wt7 = Util.cubic_clipper(p3);
   val dpt3 = (wt5 - wt7) * fh;

   val pt0 = p0 + dpt0;
   val pt1 = p1 + dpt1;
   val pt2 = p2 + dpt2;
   val pt3 = p3 + dpt3;

   val w0 = Util.cubic_clipper(input - 4.0 * res * pt3);
   val w1 = Util.cubic_clipper(pt0);
   val dp0 = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(pt1);
   val dp1 = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(pt2);
   val dp2 = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(pt3);
   val dp3 = (w5 - w7) * fh;

   p0 = p0 + (dp0 + dpt0)/ 2.0;
   p1 = p1 + (dp1 + dpt1)/ 2.0;
   p2 = p2 + (dp2 + dpt2)/ 2.0;
   p3 = p3 + (dp3 + dpt3)/ 2.0;

   return p3;
}



fun euler(input, fh, res) {
   mem p0, p1, p2, p3;
   val w0 = Util.cubic_clipper(input - 4.0 * res * p3);
   val w1 = Util.cubic_clipper(p0);
   val dpt0 = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(p1);
   val dpt1 = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(p2);
   val dpt2 = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(p3);
   val dpt3 = (w5 - w7) * fh;
   p0 = p0 + dpt0;
   p1 = p1 + dpt1;
   p2 = p2 + dpt2;
   p3 = p3 + dpt3;
   return p3;
}


// retrieve value from tune table, with a linear interpolation. Except a frequency below nyquist
// cut-off, in kHz
fun getTune(cut: real) {
   mem fs;
   mem tune_table;
   // to speedup computations
   mem tuneRatio;
   cut = clip(cut, 0.0, fs/2.0);
   val idx = cut * tuneRatio;
   val iIdx = int(idx);
   if (iIdx < size(tune_table) - 1) {
      // interpolate
      return tune_table[iIdx] + (idx % 1.0) * (tune_table[iIdx+1] - tune_table[iIdx]);
   }
   else {
      return tune_table[size(tune_table) - 1];
   }
}


and process_euler(input:real, cut:real, res:real):real{
   mem fh;
   if(Util.change(cut)) {
      fh = getTune(cut);
   }
   /*
    _ = e:euler(input, fh, res);
    _ = e:euler(input, fh, res);
    _ = e:euler(input, fh, res);
    */
    val out = e:euler(input, fh, res);
    return out;
}

and process_heun(input:real, cut:real, res:real):real{
   mem fh;
   if(Util.change(cut)) {
      fh = getTune(cut);
   }
   /*
    _ = h:heun(input, fh, res);
    _ = h:heun(input, fh, res);
    _ = h:heun(input, fh, res);
   */
    val out = h:heun(input, fh, res);
    return out;
}

and process(input:real):real{
  // cutoff fqeuency, in kHz
  mem cut: real;
  // resonance of the filter
  mem res: real;
  mem heun: bool;
  if (heun) {
    return process_heun(input, cut, res);
  } else {
    return process_euler(input, cut, res);
  }
}

and process_bufferTo(nb: int, input, oBuffer) {
  val min_nb = size(input);
  if (size(oBuffer) < min_nb) {
     min_nb = size(oBuffer);
  }
  nb = clip(nb, 0, min_nb);
  if (nb == 0) {
     nb = min_nb;
  }

  val i = 0;
  if (heun) {
    while (i < nb) {
      oBuffer[i] = process_heun(input[i], cut, res);
      i = i + 1;
    }
  } else {
    while (i < nb) {
       oBuffer[i] = process_euler(input[i], cut, res);
      i = i + 1;
    }
  }
}

// fixed buffre, from 0hz to nyquist
and updateTune() {
   // current sampling rate and max possible frequency
   mem fs: real;
   mem fs_nyquist: real;
   // buffer to store frequency tables
   mem tune_table;
   // size of table, to speedup (hence must be init first!)
   mem rsize;

   // frequency in the table to be updated
   val fi;
   val i = 0;
   while (i < size(tune_table)){
     fi = real(i) * fs_nyquist / rsize;
     tune_table[i] = (2.0 * pi()) * fi / (4.0 * fs);
     i = i + 1;
   }
}

// Select method used to approximate the analog filter:
// - 0: Euler (default), 1: Heun less precise but faster than Heun ("false")
and setEstimationMethod(method: int) {
   if (method == 1) {
      heun = true;
   } else {
      heun = false;
   }
}

// set cut-off frequnecy, in kHz, max sampling rate / 2.0
and setCutOff(newCut: real) {
   cut = clip(newCut, 0.0, fs_nyquist);
}

// note that effects will depend on input level
and setResonance(newRes: real) {
   res = newRes;
}

// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
// Will re-compute the tuning table, call will be costly
and setSamplerate(newFs:real) {
   mem tuneRatio;
   if (newFs > 0.0) {
      fs = newFs;
      fs_nyquist = fs/2.0;
      tuneRatio = rsize / fs_nyquist;
      _ = updateTune();
   }
}

and default(){
   // frequency table will be computed ahead of time to save resources
   mem tune_table: array(real, 1024);
   rsize = real(size(tune_table));
   _ = setSamplerate(44.1);
   _ = setEstimationMethod(0);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff =  Buffer.buffer();
   _ = process_bufferTo(0, buff, buff);
}