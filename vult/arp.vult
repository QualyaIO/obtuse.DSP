
// arpeggiator

// chance to update random notes, if any
fun randomize() {
  // how many active notes
  mem nbNotes: int;
  // notes index in the sequence (size of the sequence max)
  mem sequence: array(int, 32);
  // the actual sequence to be played, with possible random notes
  mem playSequence: array(int, 32);
  // size of current sequence
  mem sequenceSize;
  // flag set internally upon change which require randomization
  mem dirty;
  // probability that each note of the sequence is randomly selected
  mem pRandomNotes;
  // proability to re-compute random notes upon new sequence (or reset)
  mem pRandomize;

  // recompute actual sequence to be played if state changed or randomized
  if (dirty || (pRandomize > 0.0 && pRandomNotes > 0.0 && rando:Random.random() <= pRandomize)) {
    val i = 0;
    while (i < sequenceSize) {
      if (pRandomNotes > 0.0 && rando:Random.random() <= pRandomNotes) {
        playSequence[i] = rando:Random.irandom() % nbNotes; 
      }
      else {
        playSequence[i] = sequence[i];
      }
      i = i + 1;
    }
  }
  dirty = false;
}

// for outside: reset sequence to beginning -- and ask for randomization
and reset() {
  // position in current sequence
  mem step;
  _ = randomize();
  step = 0;
}

// main function, return new note, -1 if none
and process(): int {
  // up to 16 notes in the arp. 0..127, -1 if inactive
  mem notes: array(int, 16);
  // type of arp (see setmode)
  mem mode: int;
  // no notes, nothing to see here
  if (sequenceSize <= 0) {
    return -1;
  }
  // reset at the end of the sequence + in case we tried to keep step number but shorter sequence happened
  // note: increment and check beforehand to use only one test for both cases
  step = step + 1;
  if (step >= sequenceSize + 1) {
    _ = reset();
    step = 1;
  }
  val newNote = notes[playSequence[step-1]];
  return newNote;
}


// recompute sequence array
and _updateSequence() {
  // should we try to keep step and current randomization upon changing notes
  mem stepPersist: bool;

  // update number of active step in the sequence
  if (mode == 0 || mode == 1) {
    sequenceSize = nbNotes; 
  }
  else if (mode == 2 || mode == 4) {
    sequenceSize = nbNotes * 2 - 2; 
  }
  else if (mode == 3 || mode == 5) {
    sequenceSize = nbNotes * 2; 
  }
  // update sequence
  // TODO: probably more concise way to do it
  val i = 0;
  while (i < sequenceSize) {
    // up
    if (mode == 0) {
      sequence[i] = i;
    }
    // down
    else if (mode == 1) {
      sequence[i] = nbNotes - 1 - i;
    }
    // up-down no repeat
    else if (mode == 2) {
      if (i < nbNotes) {
        sequence[i] = i;
      }
      else {
        sequence[i] = nbNotes - 2 - (i - nbNotes);
      }
    }
    // up-down repeat
    else if (mode == 3) {
      if (i < nbNotes) {
        sequence[i] = i;
      }
      else {
        sequence[i] = nbNotes - 1 - (i - nbNotes);
      }
    }
    // down-up no repeat
    else if (mode == 4) {
      if (i < nbNotes) {
        sequence[i] = nbNotes - 1 - i;
      }
      else {
        sequence[i] = (i - nbNotes) + 1;
      }
    }
    // up-down repeat
    else if (mode == 5) {
      if (i < nbNotes) {
        sequence[i] = nbNotes - 1 - i;
      }
      else {
        sequence[i] = i - nbNotes;
      }
    }
    i = i + 1;
  }
  // only reset sequence or also reset step depending on option, or leave it to 
  dirty = true;
  if (stepPersist) {
    _ = randomize();
  }
  else {
    _ = reset();
  }
}

// updates notes of the arp, expect increasing order of pitch 0..127. Notes below 0 will not be considered, above 127 will be clipped.
// will reset sequence if the number of notes changes, otherwise left untouched
and setNotes(newNotes: array(int, 16)) {
  val i = 0;
  val j = 0;
  while (i < size(newNotes)){
    if (newNotes[i] >= 0) {
      notes[j] = clip(newNotes[i], 0, 127);
      j = j + 1;
    }
    i = i + 1;
  }
  // check if the number of active notes changed
  if (j <> nbNotes) {
    nbNotes = j;
    _ = _updateSequence();
  }
}

// changing type of sequence -- resetting sequence if changed
// 0: up (1 2 3 1 2 3), sequence size nbNotes
// 1: down (3 2 1 3 2 1), sequence size nbNotes
// 2: up-down no repeat (1 2 3 2 1 2 3 2 1), sequence size nbNotes * 2 - 2
// 3: up-down repeat (1 2 3 3 2 1 1 2 3), sequence size nbNotes * 2
// 4: down-up no repeat (3 2 1 2 3 2 1), sequence size nbNotes * 2 - 2
// 5: down-up repeat (3 2 1 1 2 3 3 2 1), sequence size nbNotes * 2
and setMode(newMode: int) {
  newMode = clip(newMode, 0, 5);
  if (newMode <> mode) {
    mode = newMode;
    _ = _updateSequence();
  }
}

// change probability that each note of the sequence is random. Changing this value will recompute sequence upon reset
and setPRandomNotes(p: real) {
  p = clip(p, 0.0, 1.0);
  if (pRandomNotes <> p) {
    pRandomNotes = p;
    dirty = true;
  }
}

// change probability that random notes would change upon new sequence
and setPRandomize(p: real) {
  pRandomize = clip(p, 0.0, 1.0);
}

// should the step position persist upon sequence change between calls? (false by default)
and setStepPersist(flag: bool) {
  stepPersist = flag;
}

// get number of modes
and getNbModes() : int {
  return 6;
}

// number of current active notes
and getNbNotes() : int {
  return nbNotes;
}

// max number of supported notes -- to keep in sync with setNotes()
and getMaxNbNotes() : int {
  return 16;
}

// length of current sequence
and getSequenceSize() : int {
  return sequenceSize;
}

// pass a seed for the random number generator
and setSeed(seed: int) {
  _ = rando:Random.setSeed(seed);
}
