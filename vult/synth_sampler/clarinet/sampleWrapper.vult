
// wrapping the .wav to give correct information to sampler

external sample(channel:int, index:int) : real @[wave(channels=1, file="wav/clarinet.wav")];

// return value for current wavetable (first channel hard-coded), between [0..sample size[
fun getSample(index: int) {
  return sample(0, index);
}

fun getSampleSize(): int {
  return sample_samples();
}

// passing info from the file
fun getSampleFs(): real {
  return 30.0;
}

fun getSampleNote(): int {
  // here C4
  return 60;
}

// if looping should be enabled

fun isSampleLoop(): bool {
  return true;
}

// start and end shoul be within size
fun getSampleLoopStart(): int {
  return 13054;
}

fun getSampleLoopEnd(): int {
  return 29336;
}
