
// reading samples. Using linear interpolation to adjust pitch.
// Option to loop a section upon a held note WARNING: end loop must be at least two samples after start loop, longer than max used step! Rudimentary cross-fade will be used if there is enough sample before loop start and after loop end to fill the buffer (e.g. 128 on each end, check Util.buffer), which effectiveness will depends on the step size. Sidenote: take into account this crossfade when setting loop points, as some samples will "bleed" outside of bounds during cross-fading.

// TODO: kill on noteOff

fun process() {
  // absolutely needs init to set that
  mem size: int;
  // if we should loop on note held, if so start and end position in samples.
  mem loopy: bool;
  mem loopS: int;
  mem loopE: int;
  mem crossfade: bool;
  mem buffer_cross;
  // using integer "base position" float position to overcome limitation of fixed point
  mem posBase: int;
  mem pos: real;
  // how much we jump each step
  mem step: real;
  // at the moment 0: not playing, 1: playing (eventually looping), 2: cross-fading, 3: stopping
  mem state: int;
  // note held or not
  mem gate: bool;
  // sustain pedal held or not
  mem sustain: bool;
  // there is actually something to sustain
  mem sustaining: bool;
  // we are velocity sensitive
  mem level: real;

  val value = 0.0;

  if (state > 0) {
    // advance time, keep range in check here to maximize precision
    pos = pos + step;
    while (pos >= 1024.0) {
      posBase = posBase + 1024;
      pos = pos - 1024.0;
    }
    val idx = posBase + int(pos);

    // will stop and reset note once reach the end
    if (idx >= size) {
      state = 0;
      posBase = 0;
      pos = 0.0;
    }
    else {
      // first, updating states
      // looping entering cross fade, centered around end loop
      if (state == 1 && (gate || sustaining) && loopy && crossfade && idx >= loopE - size(buffer_cross) / 2 && idx <= loopE + size(buffer_cross) / 2) {
        state = 2;
        // index aligned to position in buffer
        idx = idx - loopE + size(buffer_cross) / 2;
        posBase = idx;
        pos = pos % 1.0;
      }
      // looping without cross fade
      else if (state == 1 && (gate || sustaining) && loopy && idx >= loopE) {
        // reset index and position to left
        idx = loopS + idx - loopE;
        posBase = idx;
        pos = pos % 1.0;
      }
      // out of cross fading (need one sample ahead for interpolation)
      if (state == 2 && idx >= size(buffer_cross) - 1) {
        // back to regular indexes
        idx = loopS - size(buffer_cross) / 2 + idx;
        posBase = idx;
        pos = pos % 1.0;
        // will go to end of signal if gate is off
        if (gate || sustaining) {
          state = 1;
        } else {
          state = 3;
        }
      }

      // compute actual values, with linear interpolation between samples
      if (state == 2) {
        value = (buffer_cross[idx] + (pos % 1.0) * (buffer_cross[idx+1] - buffer_cross[idx])) * level;
      } else {
        value = (SampleWrapper.getSample(idx) + (pos % 1.0) * (SampleWrapper.getSample(idx+1) - SampleWrapper.getSample(idx))) * level;
      }
    }
  }

  return value;
}


and process_bufferTo(nb: int, oBuffer) {
  nb = clip(nb, 0, size(oBuffer));
  if (nb == 0) {
     nb = size(oBuffer);
  }

  val idx = 0;
  val i = 0;
  while (i < nb) {
    if (state > 0) {
      // advance time, keep range in check here to maximize precision
      pos = pos + step;
      while (pos >= 1024.0) {
        posBase = posBase + 1024;
        pos = pos - 1024.0;
      }
      idx = posBase + int(pos);
  
      // will stop and reset note once reach the end
      if (idx > size) {
        state = 0;
        posBase = 0;
        pos = 0.0;
        oBuffer[i] = 0.0;
      }
      else {
        // first, updating states
        // looping entering cross fade, centered around end loop
        if (state == 1 && (gate || sustaining) && loopy && crossfade && idx >= loopE - size(buffer_cross) / 2 && idx <= loopE + size(buffer_cross) / 2) {
        state = 2;
          // index aligned to position in buffer
          idx = idx - loopE + size(buffer_cross) / 2;
          posBase = idx;
          pos = pos % 1.0;
        }
        // looping without cross fade
        else if (state == 1 && (gate || sustaining) && loopy && idx >= loopE) {
          // reset index and position to left
          idx = loopS + idx - loopE;
          posBase = idx;
          pos = pos % 1.0;
        }
        // out of cross fading (need one sample ahead for interpolation)
        if (state == 2 && idx >= size(buffer_cross) - 1) {
          // back to regular indexes
          idx = loopS - size(buffer_cross) / 2 + idx;
          posBase = idx;
          pos = pos % 1.0;
          // will go to end of signal if gate is off
          if (gate || sustaining) {
            state = 1;
          } else {
            state = 3;
          }
        }

        // compute actual values, with linear interpolation between samples
        if (state == 2) {
          oBuffer[i] = (buffer_cross[idx] + (pos % 1.0) * (buffer_cross[idx+1] - buffer_cross[idx])) * level;
        } else {
          oBuffer[i] = (SampleWrapper.getSample(idx) + (pos % 1.0) * (SampleWrapper.getSample(idx+1) - SampleWrapper.getSample(idx))) * level;
        }
      }
    } else {
      oBuffer[i] = 0.0;
    }

    i = i + 1;
  }
}

// retrocompatibility: using inner buffer
and process_buffer(nb: int) {
  mem buffer_o;
  _ = process_bufferTo(nb, buffer_o);
}

// called internally when Samplerate or note is altered
and updateStep() {
  // base for computing step
  mem noteRatio: real;
  mem fsRatio: real;
  // both for efficiency and because we don't want any result to be outside [1/32767 .. 32767] to avoid fixed float limits we compute step in two... steps
  step = noteRatio*fsRatio;
}

// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setSamplerate(newFs:real) {
  // sample rate of the recording
  mem sampleFs;
  // note of the sample
  mem sampleNote;
  // audio sampling rate
  mem fs: real;
   if (newFs > 0.0) {
      fs = newFs;
      // update ratio when we update sampling rate
      fsRatio = sampleFs/fs;
   }
   _ = updateStep();
}

// rudimentary cross-fade
and updateCrossFade() {
  mem buffer_cross;
  mem crossfade;
  // using linear interpolation for equal-voltager crossfade -- see https://dsp.stackexchange.com/a/49989 for some nice explainations
  // (also keeping square root and equal-power just in case)
  // centered around loop points (one extra marging for odd size at the end)
  if (loopS > size(buffer_cross) / 2 && (size - loopE) > (size(buffer_cross) / 2 + 1)) {
    crossfade = true;
    val i = 0;
    // coeff will vary from -1 to 1 as we go through cross-fading
    val k = 0.0;
    // taking samples from end and start of loop
    val idxS = loopS - size(buffer_cross) / 2;
    val idxE = loopE - size(buffer_cross) / 2;
    //val kE, kS;
    while (i < size(buffer_cross)) {
      // for equal-power
      /*k = (real(i) - real(size(buffer_cross) - 1)/2.0) / (real(size(buffer_cross) - 1) / 2.0 );
      kE = sqrt(0.5 *(1.0 - k));
      kS = sqrt(0.5 * (1.0 + k));
      buffer_cross[i] = (kE * SampleWrapper.getSample(idxE + i) + kS * SampleWrapper.getSample(idxS + i)) / (kE + kS);*/
      // equal voltage
      k = real(i) /  real(size(buffer_cross) - 1);
      buffer_cross[i] = (1.0 - k) * SampleWrapper.getSample(idxE + i) + k * SampleWrapper.getSample(idxS + i);
      i = i + 1;
   }
  }
  else {
    crossfade = false;
  }
}

// true for note to loop upon being held, false for one-shot
and setLoop(loop: bool) {
  loopy = loop;
}
// loop point for start (0 to sample size)
and setLoopStart(newLoopS: int) {
  loopS = clip(newLoopS, 0, size);
  _ = updateCrossFade();
}
// loop point for start (0 to sample size)
and setLoopEnd(newLoopE: int) {
  loopE = clip(newLoopE, 0, size);
  _ = updateCrossFade();
}

// if looping is currently enabled
and getLoop(): bool {
  return loopy;
}

// starting point of loop, in sample number -- beware that crossfade "bleed" before
and getLoopStart(): int {
  return loopS;
}

// end point of loop, in sample number -- beware that crossfade "bleed" before
and getLoopEnd(): int {
  return loopE;
}

// number of samples (note: valid once init)
and getSampleSize() {
  return size;
}

// note to be played. Here only handle equal temperament
and setNote(note: int) {
  // use ratio of note rather than freq to be more precise, +1 octave (12 semitones) doubles speed, -1 octave halves it
  val log_two = log10(2.0)/log10(exp(1.0)); // so that vultc replace with result of log(2)
  val semitones = real(note-sampleNote)/12.0;
  noteRatio = exp(log_two * semitones);
  _ = updateStep();
}

// set level of the output [0..1] (applied on the envelop)
and setLevel(newLevel: real) {
    level = newLevel;
}

// Hold gate even after note-off
// Note: do call setSustain(off) at some point to release notes!
and setSustain(flag: bool) {
  sustain = flag;
  // activate sustain if there is already a gate
  if (gate && sustain) {
    sustaining = true;
  }
  // disable upon release
  if (not(sustain)) {
    sustaining = false;
  }
}

// beginning of a note
// return true if note is new, false otherwise
and noteOn(note:int, velocity:int, channel:int): bool {
   // only 128 midi notes
   note = clip(note, 0, 127);
   val isNew = playingnotes:Notes.noteOn(note, velocity, channel);
   // set frequency... should we reset phase somehow? artifacts upon first tests
   _ = setNote(note);
   _ = setLevel(Util.velocityToLevel(velocity));
   // start playing note
   gate = true;
   // update status with sustain pedal
   if (sustain) {
     sustaining = true;
   }
   posBase = 0;
   pos = 0.0;
   state = 1;
   return isNew;
}

// set polpyphonic (true flag) or monophonic (false flag)
// monophonic: will get back to former notes, if any, upon note off
// polyphonic: does try to get back to held notes frequencies
and setPoly(flag: bool) {
   _ = playingnotes:Notes.setPoly(flag);
}

// note off whatever the channel, back to frequency of last still active note if any
and noteOff(note:int, channel:int) {
   // only 128 midi notes
   note = clip(note, 0, 127);
   // only acts if action taken into account
   if (playingnotes:Notes.noteOff(note, channel)) {
      // still gate on-going if there are note held, and switch to last
      if (playingnotes:Notes.nbNotes() > 0){
         val last_played = playingnotes:Notes.lastNote();
	 // check we do have a note -- and that it's in range
         if (last_played > 0 && last_played <= 128) {
	   // FIXME: retrigger note as well (set pos 0)??
	   _ = setNote(last_played - 1);
         }
      } else {
 	 // letting note go
         gate = false;
      }
   }
}

and default() @[init] {
  size = SampleWrapper.getSampleSize();
  // will copy a new array
  Buffer.buffer(buffer_cross);
  crossfade = false;
  // defaults for current sample
  sampleFs = SampleWrapper.getSampleFs();
  sampleNote = SampleWrapper.getSampleNote();
  // looping sample, checking for loop point (even though we need buffer around, that will be checked elsewhere)
  if (SampleWrapper.isSampleLoop()) {
    val lS = SampleWrapper.getSampleLoopStart();
    val lE = SampleWrapper.getSampleLoopEnd();
    // again, more checks will occur afterward, e.g. in updateCrossFade() 
    if (lS  >= 0 && lE < size && lE >= lS) {
       _ = setLoop(true);
       _ = setLoopStart(lS);
       _ = setLoopEnd(lE);
    }
  }
  // will copy a new array
  mem buffer_o;
  Buffer.buffer(buffer_o);
  // default level, waiting for velocity to take over
  _ = setLevel(1.0);
  _ = setSamplerate(44.1);
  // default frequency (in kHz)
  _ = setNote(69);

  // monophonic by default, we allow retrigger
  _ = playingnotes:Notes.default();
  _ = playingnotes:Notes.setAllowDuplicates(true);
  _ = setPoly(false);
}

// to let vult find above the good buffer size
fun dummy() {
   val buff;
   Buffer.buffer(buff);
   _ = process_bufferTo(0, buff);
}
