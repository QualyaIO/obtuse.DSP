
// polyvoice Sampler. To be used with Voice


// retrieve sample from a specific voice
fun getSample(voice: int) {
       if (voice == 0) {
           return voice0:Sampler.process();
       }
       else if (voice == 1) {
            return voice1:Sampler.process();
       }
       else if (voice == 2) {
            return voice2:Sampler.process();
       }
       else if (voice == 3) {
            return voice3:Sampler.process();
       }
   return 0.0;
}

// run buffer for specified voice (buffered version of getSample), filling specified buffer
and runVoice(voice: int, nb: int, buff: array(real, 256)) {
       if (voice == 0) {
           _ = voice0:Sampler.process_bufferTo(nb, buff);
       }
       else if (voice == 1) {
	   _ = voice1:Sampler.process_bufferTo(nb, buff);
       }
       else if (voice == 2) {
           _ = voice2:Sampler.process_bufferTo(nb, buff);
       }
       else if (voice == 3) {
           _ = voice3:Sampler.process_bufferTo(nb, buff);
       }
}

// send note on to selected inactive voice
// Note: should be call internally, DON'T update inner states, only forward info
and sendNoteOn(voice:int, note:int, velocity: int, channel:int) {
       // a tad tedious, as many context as we handle voices, and test all possible synth
       if (voice == 0) {
           _ = voice0:Sampler.noteOn(note, velocity, channel);
       }
       else if (voice == 1) {
           _ = voice1:Sampler.noteOn(note, velocity, channel);
       }
       else if (voice == 2) {
           _ = voice2:Sampler.noteOn(note, velocity, channel);
       }
       else if (voice == 3) {
           _ = voice3:Sampler.noteOn(note, velocity, channel);
       }
}


// send note off to selected active voice
// Note: should be call internally, DON'T update inner states, only forward info
and sendNoteOff(voice:int, note:int, channel:int) {
       // a tad tedious, as many context as we handle voices, and test all possible synth
       if (voice == 0) {
           _ = voice0:Sampler.noteOff(note, channel);
       }
       else if (voice == 1) {
           _ = voice1:Sampler.noteOff(note, channel);
       }
       else if (voice == 2) {
           _ = voice2:Sampler.noteOff(note, channel);
       }
       else if (voice == 3) {
           _ = voice3:Sampler.noteOff(note, channel);
       }
}

// change sampling rate for current synth
and setSamplerate(fs:real) {
  _ = voice0:Sampler.setSamplerate(fs);
  _ = voice1:Sampler.setSamplerate(fs);
  _ = voice2:Sampler.setSamplerate(fs);
  _ = voice3:Sampler.setSamplerate(fs);
}

/* getter/setter passed down to synth, if supported */

// Sampler.setLoop()
and synthSetLoop(flag: bool) {
  _ = voice0:Sampler.setLoop(flag);
  _ = voice1:Sampler.setLoop(flag);
  _ = voice2:Sampler.setLoop(flag);
  _ = voice3:Sampler.setLoop(flag);
}

// Sampler.setLoopStart()
and synthSetLoopStart(value: int) {
  _ = voice0:Sampler.setLoopStart(value);
  _ = voice1:Sampler.setLoopStart(value);
  _ = voice2:Sampler.setLoopStart(value);
  _ = voice3:Sampler.setLoopStart(value);
}

// Sampler.setLoopEnd()
and synthSetLoopEnd(value: int) {
  _ = voice0:Sampler.setLoopEnd(value);
  _ = voice1:Sampler.setLoopEnd(value);
  _ = voice2:Sampler.setLoopEnd(value);
  _ = voice3:Sampler.setLoopEnd(value);
}

// Sampler.getSampleSize()
and synthGetSize(): int {
  return voice0:Sampler.getSampleSize();
}

// Wavetable.getNbWavetables()
and synthGetNbWavetables(): int {
  return 0;
}

// destined to FM modulator oscillator
and synthSetModulatorWavetable(wavetableIdx: real) {
}

// destined to FM modulator oscillator
and synthSetCarrierWavetable(wavetableIdx: real) {
}

// FM.setModulatorRatio()
and synthSetModulatorRatio(ratio: real) {
}

// FM.setCarrierRatio()
and synthSetCarrierRatio(ratio: real) {
}

// FM.setModulatorLevel()
and synthSetModulatorLevel(level: real) {
}

// FM.setModulatorADSR()
and synthSetModulatorADSR(a:real , d: real, s: real, r: real) {
}

// FM.setCarrierADSR()
and synthSetCarrierADSR(a:real , d: real, s: real, r: real) {
}


/* end parameters for synths */

// used by voice to know if this should use leftovers trick to compensate for stealing voice with this synth engine (typically something not wanted for simple waveforms, e.g. from OSC for FM
and shouldLeftOvers(): bool {
  mem should_leftovers;
  return should_leftovers;
}

and default() @[init] {
      should_leftovers = true;
      _ = voice0:Sampler.default();
      _ = voice0:Sampler.setPoly(true);
      _ = voice1:Sampler.default();
      _ = voice1:Sampler.setPoly(true);
      _ = voice2:Sampler.default();
      _ = voice2:Sampler.setPoly(true);
      _ = voice3:Sampler.default();
      _ = voice3:Sampler.setPoly(true);
}
