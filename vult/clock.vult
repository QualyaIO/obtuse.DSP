
// clock with swing and grouping
// use wit setTime(), get ticks, then process() until no more beats (and max ticks for each beat after the first), remaining ticks.

// - . o . - . o . normal
// - o . . - o . .  swing -
// - . . o - . . o swing +
// - . - . - . - . o . o . o . o . normal groupe size 8, ratio group 0.5
// - - - - o . . o . . o . . o . .  swing -


// below 2 would probably crash something (e.g. division by 0 in IBI computation of clock)
fun getMinGroupSize(): int {
  return 2;
}
fun getMaxGroupSize(): int {
  return 128;
}

// inform the whole world about supported BPM and group range
// due to the way IBI are computed, min depends on group size to avoid overflow with fixed float
fun getMinBPM(): real {
  return 0.002 * real(getMaxGroupSize());
}
fun getMaxBPM(): real {
  return 30000.0;
}

// give some info about expected precision for ticks
fun getMinTicks(): int {
  return 1;
}
fun getMaxTicks(): int {
  // max with current implementation due to use of (fixed) float
  return 32765;
}

// compare two times stored as seconds and fraction of seconds
// return 1 if time2 > time 1, -1 if time2 < time 1, 0 if time2 == time1
// FIXM: the whole thing is probably not the most optimized
fun compareTimeFract(time1S: int, time1Fract: real, time2S: int, time2Fract: real): int {
  // tedious normalization
  while (time1Fract < 0.0) {
    time1S = time1S - 1;
    time1Fract = time1Fract + 1.0;
  }
  while (time1Fract >= 1.0) {
    time1S = time1S + 1;
    time1Fract = time1Fract - 1.0;
  }
  while (time2Fract < 0.0) {
    time2S = time2S - 1;
    time2Fract = time2Fract + 1.0;
  }
  while (time2Fract >= 1.0) {
    time2S = time2S + 1;
    time2Fract = time2Fract - 1.0;
  }

  if (time1S == time2S && time1Fract == time2Fract) {
    return 0;
  }
  else if (time1S < time2S || (time1S == time2S && time1Fract <= time2Fract)) {
    return 1;
  }
  else {
    return -1;
  }
}

// to be called after setTime()
// return 1 upon first beat, 2 new beat from first sub-group, 3 for second sub-group (groupped by IBI length afterward), 0 otherwise
// will return trigger upon first call (start with beat)
fun process(): int {
  // check if first run (or if reset), since vult init to false
  mem init: bool;
  mem timeS: int;
  mem timeFract: real;
  // beats per minutes
  mem bpm: real;
  // interval between beats, in seconds, for both sub-groups
  mem ibiA: real;
  mem ibiB: real;
  // interval for next beat
  mem ibi: real;
  // when last beat occurred
  mem lastBeatS: int;
  mem lastBeatFract: real;
  // how many beats to consider for swing.
  mem groupSize: int;
  // proportion belonging to first sub-group
  mem groupRatio: real;
  // size for first subgroup
  mem subSize: int;
  // where we are in the group
  mem pos: int; 
  // tune IBI, within sub-groups
  mem swing: real;
  //should be mix subgroups, even beat subgroup 1, odd subgroup 2
  mem orderMix: bool;
  // make sure we advance time, otherwise we don't redo computations
  mem lastTimeS: int;
  mem lastTimeFract: real;

  val trigger = 0;
  // special case, we overflowed the time, or clock is wrong, consider that we should trigger, reset position
  if (not(init) || compareTimeFract(timeS, timeFract, lastBeatS, lastBeatFract) > 0) {
    init = true;
    lastBeatS = timeS; 
    lastBeatFract = timeFract; 
    trigger = 1;
    pos = 1;
    // starting with group A
    ibi = ibiA;
  }
  // time to clock (time changed and we overshoot ibi)
  else if (compareTimeFract(lastTimeS, lastTimeFract, timeS, timeFract) <> 0 && compareTimeFract(timeS - lastBeatS, timeFract - lastBeatFract, int(ibi), ibi % 1.0) <= 0) {
    // update time
    lastBeatS = lastBeatS + int(ibi);
    lastBeatFract = lastBeatFract + ibi % 1.0;
    // norm
    while (lastBeatFract >= 1.0) {
      lastBeatS = lastBeatS + 1;
      lastBeatFract = lastBeatFract - 1.0;
    }

    if (
        (not(orderMix) && pos < subSize) ||
        // in mix order, alternate between group A and B as long as there is enough group A left
        (orderMix && ((pos/2 < subSize && pos % 2 == 0)  || (pos/2 > groupSize - subSize)) )
        ) {
      // update interval to come
      ibi = ibiA;
      // can accentuate first beat
      if (pos == 0) {
        trigger = 1;
      } else {
        trigger = 2;
      }
    }
    else {
      ibi = ibiB;
      trigger = 3;
    }
    pos = pos + 1;
    pos = pos % groupSize;
  }
  lastTimeS = timeS;
  lastTimeFract = timeFract;
  return trigger;
}

// timeS, timeFract: passing by, in seconds. timeS is integer part (should be positive), timeFract is the remainder. Used to overcome float precision
// NOTE: round part should be >= 0 fract should be 0..1, otherwise will get costly quickly
and setTime(newTimeS: int, newTimeFract: real) {
  timeS = newTimeS;
  timeFract = newTimeFract;
  // norm
  while (timeFract >= 1.0) {
    timeS = timeS + 1;
    timeFract = timeFract - 1.0;
  }
}

// reset position in group, trigger on next call
and reset() {
  init = false;
}

// refresh groups and IBI for both groups. Update next ibi.
and _recompute() {
  // at least one beat in each group (groupSize + 1 for rounding)
  subSize = clip(int(real(groupSize + 1) * groupRatio), 1, groupSize - 1); 
  // check which ibi we have at the moment, to update correctly inner state
  val isIBIA = ibi == ibiA;
  // base IBI
  val bibi = 60.0/bpm;
  // compress first sub-group
  if (swing <= 0.5) {
    // 2ms minimum IBI
    ibiA = clip(bibi * (swing * 2.0), 60.0/getMaxBPM(), bibi);
    // split IBI for the second sub-group
    ibiB = (real(groupSize) * bibi - ibiA * real(subSize)) / real((groupSize - subSize));
  }
  // same algo there
  else {
    ibiB = clip(bibi * ((1.0 - swing) * 2.0), 60.0/getMaxBPM(), bibi);
    ibiA = (real(groupSize) * bibi - ibiB * real(groupSize - subSize)) / real(subSize);
  }
  // update state
  if (isIBIA) {
    ibi = ibiA;
  } else {
    ibi = ibiB;
  }
}

// set how many beats to consider for swing. Typical swing is size 4 (I would say, for 4/4 signature, with a 2 divider) Clip from 2 (one beat in each sub-group) to 128. Can reset group position if we overflowed new group size.
and setGroupSize(newGroupSize: int) {
  newGroupSize = clip(newGroupSize, getMinGroupSize(), getMaxGroupSize());
  if (newGroupSize <> groupSize) {
    groupSize = newGroupSize;
    _recompute();
    // in case went already too far this group size
    pos = pos % groupSize;
  }
}

// how to divide the group, 0: one beat for first, rest for second, 0.5: half/half, 1: all but one for first, 1 for second
and setGroupRatio(newGroupRatio: real) {
  newGroupRatio = clip(newGroupRatio, 0.0, 1.0);
  if (newGroupRatio <> groupRatio) {
    groupRatio = newGroupRatio;
    _ = _recompute();
  }
}
// swing ratio, 0: min IBI (1ms) for first sub-group, 1: min for second sub-group. 0.5: neutral. min IBI: 1ms
and setSwing(newSwing: real) {
  newSwing = clip(newSwing, 0.0, 1.0);
  if (swing <> newSwing) {
    swing = newSwing;
    _ = _recompute();
  }
}

// change sub group order, from all 1, all 2 to 1 on even beats an 2 on odd beats
and setOrderMix(flag: bool) {
  orderMix = flag;
}

// current number of ticks per beat
// carefull to handle shift that will occur upon change in BPM
and getNbTicks(): int {
  mem ticks;
  return ticks;
}

// return number of ticks since last beat, maxed to one beat. Make sure to process until there is no more beat to get accurate ticks.
and getTicks(): int {
  // if we overshoot ibi, max ticks
  if (compareTimeFract(timeS - lastBeatS, timeFract - lastBeatFract, int(ibi), ibi % 1.0) <= 0) {
    return ticks;
  }
  // we should have two normalized values, we might loose some precision to go back to real
  val diffS = real(timeS - lastBeatS) + (timeFract - lastBeatFract);
  // where we are in current ibi
  if (ibi > 0.0) {
    return clip(int((diffS / ibi) * real(ticks)), 0, ticks);
  }
  return 0;
}

// only return number of new ticks since last call -- up to number of ticks per beats, make sense to call up to first beat or when there is no more beats
// TODO: might detect if we changed beat to take that into account if we loop
// FIXME: upon BPM change the max number of ticks could actually be greater than current ticks, see also setBPM
and getNbNewTicks(): int {
  // ticks from last call
  mem lastTicks;
  // pending ticks upon BPM change
  mem pendingTicks;
  val curTicks = getTicks();
  val newTicks = (curTicks - lastTicks) + pendingTicks;
  pendingTicks = 0;
  // we handle up to one beat late (minus one tick) between calls
  while (newTicks < 0) {
    // I should not forget that a % b in C can be negative if a is negative, % is remainder
    newTicks = newTicks + ticks;
  }
  lastTicks = curTicks;
  return newTicks;
}

// define how many ticks there should be per beat
// note: constant even during swing
and setNbTicks(newTicks: int) {
  newTicks = clip(newTicks, getMinTicks(), getMaxTicks());
  if (newTicks <> ticks) {
    // current ticks we might have missed
    pendingTicks = pendingTicks + getNbNewTicks();
    ticks = newTicks;
    // reset ticks with new ticks
    lastTicks = getTicks();
  }
}

// change current BPM, 0.002 to max 30000 bpm (to deal with fixed float range, and because why not).
and setBPM(newBPM: real) {
  newBPM = clip(newBPM, getMinBPM(), getMaxBPM());
  if (newBPM <> bpm){
    // current ticks we might have missed
    pendingTicks = pendingTicks + getNbNewTicks();
    bpm = newBPM;
    _ = _recompute();
    // reset ticks with new BPM
    lastTicks = getTicks();
  }
}



and default() @[init] {
  // good ol' 120 BPM
  _ = setBPM(120.0);
  // one standard MIDI
  _ = setNbTicks(24);
  // classical swing for 4/4, combined with divider 2 to get on second beat
  _ = setGroupSize(4);
  _ = setGroupRatio(0.5);
  // no swing at first
  _ = setSwing(0.5);
}
