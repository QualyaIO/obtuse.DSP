
// midi note to frequency, 440hz base, equal temperament, as per MIDI standard. Return number in kHz to migitate issues with fixed float
// TODO: use a table instead?
fun noteToFrequency(note: int) {
    //0.440 x 2^((note - 69)/12.)
    return 0.008175798915643707 * exp(0.057762265046662105 * real(note)); 
}

// return the coefficient to multiply a frequency by in order to increase (or decrease) it by xxx semitones (12 equal temperament)
fun tonesToCoeff(semitones: real) {
  // we want 2^(tones/12) -- using for vult log10 rather than log to let it compute the actual value before transpiling
  val log_base = log10(2.0)/log10(exp(1.0));
  return exp(log_base * (semitones / 12.0));
}

// from vult examples
fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun cubic_clipper(x) {
   if(x <= -2.0/3.0)
      return -2.0/3.0;
   else if(x >= 2.0/3.0)
      return 2.0/3.0;
   else
      return x - (x * x * x) / 3.0;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

// smooth transition to a value
// coeff: should be ]0..1] from slow to instantaneous
fun smooth(input, coeff:real){
   mem x;
   x = x+(input-x)*coeff;
   return x;
}

// convent velocity (received from midi, exected 0..127) to level 0..1
fun velocityToLevel(velocity: int) {
  velocity = clip(velocity, 0, 127);
  return real(velocity)/127.0;
} 
