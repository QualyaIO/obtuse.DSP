
// probabilistic trigger sequencer, with options to affect length, spread, change over time, or balance (accentuate most a pattern)

// will possibly recompute triggers, to be called after each loop
fun _refresh() {
   // how long should be the loop?
   mem length : int;
   // up to 128 steps
   mem triggers : array(bool, 128);
   // associated probabilities that the step trigger
   mem ptriggers : array(real, 128);
   // probability that we recompute all
   mem evolve : real;
   // magnitude of the change, i.e. probability that each step will be recomputed
   mem magnitude : real;
   // if the state changed in a way that we should recompute triggers no matter what
   mem dirty : bool;

   // we are about to change loop
   if (dirty || evolve > 0.0 && rando:Random.random()  <= evolve) {
      val i = 0;
      while (i < size(triggers) && i < length) {
         // chance that we alter this step
         if (dirty || magnitude > 0.0 && rando:Random.random() <= magnitude) {
            triggers[i] = ptriggers[i] > 0.0 && rando:Random.random() <= ptriggers[i];
         }
         i = i + 1;
      }
   }
   // flag applied
   dirty = false;
}

// to call at each clock beat. Return true upon new trig
// actually we have to return and int for process, 0 (false) and 1 (true) for trigger
// TODO: directly take clock (or even reset) as parameter? Implement buffer?
and process() : int {
   // clock divider, e.g. if 2 will switch to next step every two call
   mem divider : int;
   // how many times we were called
   mem ticks : int;
   // shift trigger compared to clock
   mem shift : int;
   // what is our current step?
   mem n : int;
   // starting position in the loop
   mem position : int;

   // return value
   val trig = 0;

   ticks = ticks + 1;
   if (length > 0) {
      if (divider > 0 && (ticks + shift) % divider == 0) {
         if (triggers[(n + position) % length]) {
            trig = 1;
         }
         n = n + 1;
      }
      // reset clock counter
      if (ticks % divider == 0) {
         ticks = 0;
      }
      
      // new loop, we might change triggers
      if (n % length == 0) {
         _ = _refresh();
         n = 0;
      }
      
   }
   return trig;
}

// manually restart loop (also might refresh triggers)
and restartLoop() {
   n = 0; 
   _ = _refresh();
}
 
// reset both clock ticks and loop position, also refreshing triggers (e.g. for syncing)
and reset() {
   ticks = 0;
   _ = restartLoop();
}

// recompute probabilities
and _recompute() {
   // up to which point triggers should be spread equally (starting with first step). E.g. with a density of 0.5 and balance of 1 will trigger every two steps. max balance deter change in loop.
   mem balance : real;
   // proportion of the steps that should trigger (i.e. base probability of each step)
   mem density : real;
   // which step to tune probability to balance
   val mod = 0.0;

   // compute every which step we should increase or decrease balance
   // (make sure we don't overflow)
   // Note to sync with _getAutolength()
   if (density > 0.0) {
      mod = 1.0 / density;
   }

   // range of probilities for balance
   val max_p = 1.0;
   val min_p = 0.0;
   // now trying to determine the max proba
   if (mod > 1.0 && length > 0) {
      // how many step to (de)accentuate
      val fnbplus = real(length) * density;
      val nbplus = int(fnbplus);
      // round ceil above threshold
      if (fnbplus % 1.0 > 1.0/real(size(triggers))) {
         nbplus = nbplus + 1;
      }
      val nbminus = length - nbplus;

      // density of accentuated steps
      val modp = real(nbplus) / real(length);
      // we have to cap proba for mod or the effective probability will be too high
      if (modp >= density) {
         max_p = density * real(length) / real(nbplus);
      }
      // or set a minimum probability on lower steps probability is not too low
      else {
         min_p = (density * real(length) - real(nbplus)) / real(nbminus);
      }
   }

   // rounded mod, we will go back and forth between this one and + 1 once we accumulate enough float part
   val imod = int(mod);
   val accmod = 0.0;
   // go through all indices
   val i = 0;
   // reset counter periodically for applying modulo
   val ci = 0;
   // are we using imod+1?
   val upmod = false;
   while (i < size(ptriggers) && i < length) {
      // tune probabilities
      if (imod > 0) {
         // enough to use upper mod, with some margin
         if (accmod >= 1.0 - 1.0/real(size(triggers))) {
            imod = int(mod) + 1;
            accmod = accmod - 1.0;
            upmod = true;
         }
         // accentuated step
         if (ci % imod == 0) {
            ptriggers[i] = density + balance * (max_p - density);
            if (upmod) {
               // going back to regular mod
               imod = int(mod);
               upmod = false;
            }
            ci = 0;
            // accumulate for changing mod
            accmod = accmod + mod % 1.0;
         }
         else {
            ptriggers[i] = density - balance * (density - min_p);
         }
      }
      // same probability for all
      else {
         ptriggers[i] = density; 
      }
      ci = ci + 1;
      i = i + 1;
   }
}

// return length computed depending on density -- at least length 1 if density > 0
and _getAutolength() {
   if (density <= 0.0) {
      return 0;
   }
   val mod = 1.0/density;
   val autolength = floor(mod);
   val iautolength = int(autolength);
   val mine = 1.0/real(size(triggers));

   // when the fraction prat is high enough we will increase length to capture a pattern
   if (mod % 1.0 > mine) {
      autolength = 1.0 / (mod % 1.0) * mod;
      // one more step if high enough
      if (autolength % 1.0 > mine) {
         iautolength = int(1.0 + autolength);
      }
      else {
         iautolength = int(autolength);
      }
   }
   return iautolength;
}

// to factorize code between setLength and setDensity. Return true if length has changed
and _applyLength(newLength) : bool {
   newLength = clip(newLength, 0, size(triggers));
   if (newLength <> length) {
      length = newLength;
      _ = _recompute();
      dirty = true;
      // already too advances in steps, reset loop (and refresh there)
      if (length <= n) {
         _ = restartLoop();
      }
      else {
         _ = _refresh();
      }
      return true;
   }
   return false;
}

// change length of loop, recompute probabilities and refresh triggers. Restart loop if shorter than current position, otherwise changes will be applied next loop.
// if set to <= 0, will autocompute length to have one cycle with accentuation -- and length will change automatically upon changing density
// TODO: only change steps that are added upon next loop? (e.g. dirty = previous length and use that in refresh)
and setLength(newLength : int) {
   mem isautolength;
   newLength = clip(newLength, 0, size(triggers));
   // starting to adapt length to density and pattern that wight arise from balance
   if (newLength == 0 && not(isautolength)) {
      isautolength = true;
      newLength = _getAutolength();
   }
   else if (newLength > 0 && isautolength) {
      isautolength = false;
   }
   _ = _applyLength(newLength);
}

// usefull to retrieve effect of autolength (when length set to 0)
and getLength() : int {
   return length;
}

// change clock divider, at least 1
and setDivider(newDivider : int) {
   divider = clip(newDivider, 1, newDivider);
}

// shift in ticks compared to clock
and setShift(newShift : int) {
   shift = clip(newShift, 0, newShift);
}

// change probability that loop will change next time
and setEvolve(newEvolve : real) {
   evolve = clip(newEvolve, 0.0, 1.0);
}

// upon changing loop, proportion of the steps that will be affected (implemented as a probability that each step is recomputed)
and setMagnitude(newMagnitude : real) {
   magnitude = clip(newMagnitude, 0.0, 1.0);
}

// change repartition of triggers, recompute probabilities, apply changes immediately (change loop).
and setBalance(newBalance : real) {
   newBalance = clip(newBalance, 0.0, 1.0);
   if (newBalance <> balance) {
      balance = newBalance;
      _ = _recompute();
      dirty = true;
      _ = _refresh();
   }
}

// change the proportion of active steps, recompute probabilities, apply changes immediately (change loop).
// Note: if autolength is set, might restart loop and the new length is shorter than current step, will srestart loop
and setDensity(newDensity : real) {
   newDensity = clip(newDensity, 0.0, 1.0);
   if (newDensity <> density) {
      density = newDensity;
      // should we recompute/refresh
      val update = true;
      // apply autolength if set
      if (isautolength) {
         // tuning length might avoid us new calls to refresh state
         update = not(_applyLength(_getAutolength()));
      }
      // at least recompute and refresh here
      if (update) {
         _ = _recompute();
         dirty = true;
         _ = _refresh();
      }
   }
}

// starting position of the loop, can be used to shift accentuation when balance is set
and setPosition(newPosition : int) {
   position = clip(newPosition, 0, size(triggers));
}

and setSeed(seed: int) {
  _ = rando:Random.setSeed(seed);
}

and default() @[init] {
   // by default beat each clock
   divider = 1;
   // pattern of 16, 50% chance trigger accentuated on odd steps
   length = 16;
   density = 0.5;
   balance = 0.5;
   // change about every 5 loops, about one of the step
   evolve = 0.2;
   magnitude = 0.25;
   // compute all of that
   _ = _recompute();
   dirty = true;
   _ = _refresh();
}
