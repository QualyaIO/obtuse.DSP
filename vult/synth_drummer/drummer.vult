
// reading slices of samples for drums. Using linear interpolation to adjust for sampling rate and pitch.
// 12 slices, normal speed at C4-G5, then adjust each slice an octave up or down. Each new note replace immediately the previous one.

// TODO: kill on noteOff
// TODO: implement monophony mode similar to sampler?


// called internally when Samplerate or note is altered
fun updateStep() {
  // how much we jump each step
  mem step: real;
  // pitch bend to apply
  mem bend: real;
  // base for computing step
  mem noteRatio: real;
  mem fsRatio: real;
  // both for efficiency and because we don't want any result to be outside [1/32767 .. 32767] to avoid fixed float limits we compute step in two... steps
  step = noteRatio*fsRatio;
  if (bend <> 0.0) {
    step = step * Util.tonesToCoeff(bend);
  }
}

// bend the pitch by + or minus semitones. Apply changes to step
and pitchBend(semitones: real) {
  if (semitones <> bend) {
    bend = semitones;
    _ = updateStep();
  }
}

// called internally, note to be played
and setNote(note: int) {
  // start and end positions for slices
  mem slices_start, slices_end;
  // current slice playing [0..11], out of bound to stop playing
  mem slice: int;
  // using integer "base position" float position to overcome limitation of fixed point
  mem posBase: int;
  mem pos: real;
  // root note for the 12 slices: C4
  val root = 60;
  slice = note % 12;
  // set starting position
  if (slice >= 0 && slice < size(slices_start)) {
    posBase = slices_start[slice];
    pos = 0.0;
  }

  // find octave compared to root note, 
  val slice_root = note - slice;
  // use ratio of note rather than freq to be more precise, +1 octave (12 semitones) doubles speed, -1 octave halves it
  val log_two = log10(2.0)/log10(exp(1.0)); // so that vultc replace with result of log(2)
  val octave = real(slice_root-root)/12.0;
  noteRatio = exp(log_two * octave);
  _ = updateStep();
}

// set level of the output [0..1] (applied on the envelop)
and setLevel(newLevel: real) {
  // we are velocity sensitive
  mem level: real;
  level = newLevel;
}

and process() {
  // absolutely needs init to set that
  mem size: int;
  // should we terminate quickly the note? Used to avoid pops upon stealing voice
  mem quickKill: bool;
  // linear decrease of level for quick kill
  mem qkStep: real;
  // in case of quick kill, the note and velocity to play
  mem nextNote: int;
  mem nextVelocity: int;

  val value = 0.0;

  if (slice >= 0 && slice <= size(slices_start)) {

    // advance time, keep range in check here to maximize precision
    pos = pos + step;
    while (pos >= 1024.0) {
      posBase = posBase + 1024;
      pos = pos - 1024.0;
    }

    val idx = posBase + int(pos);
    // will stop and reset note once reach the end of file or end of sample -- one sample early due to interpolation
    if (idx >= size - 1 || idx >= slices_end[slice] - 1) {
      slice = -1;
      posBase = 0;
      pos = 0.0;
    }

    // adjust level for emergency release
    if (quickKill) {
      level = level - qkStep;
      if (level < 0.0) {
        level = 0.0;
      }
    }

    if (slice >= 0) {
      value = (DrummerWrapper.getSample(idx) + (pos % 1.0) * (DrummerWrapper.getSample(idx+1) - DrummerWrapper.getSample(idx))) * level;
    }

    // reached the end, either killed or we finished to play the note before the kill, time to go to next note
    if (quickKill && (level <= 0.0 || slice < 0)) {
      quickKill = false;
      // we might have missed a note while quick killing, just read the last one to date
      _ = setNote(nextNote);
      _ = setLevel(Util.velocityToLevel(nextVelocity));
    }
  }

  return value;
}


and process_bufferTo(nb: int, oBuffer) {
  nb = clip(nb, 0, size(oBuffer));
  if (nb == 0) {
     nb = size(oBuffer);
  }

  val value;
  val i = 0;

  while (i < nb) {
    value = 0.0;

    if (slice >= 0 && slice <= size(slices_start)) {
      // advance time, keep range in check here to maximize precision
      pos = pos + step;
      while (pos >= 1024.0) {
        posBase = posBase + 1024;
        pos = pos - 1024.0;
      }
  
      val idx = posBase + int(pos);
      // will stop and reset note once reach the end of file or end of sample -- one sample early due to interpolation
      if (idx >= size - 1 || idx >= slices_end[slice] - 1) {
        slice = -1;
        posBase = 0;
        pos = 0.0;
      }

      // adjust level for emergency release
      if (quickKill) {
        level = level - qkStep;
        if (level < 0.0) {
          level = 0.0;
        }
      }
      
      if (slice >= 0) {
        value = (DrummerWrapper.getSample(idx) + (pos % 1.0) * (DrummerWrapper.getSample(idx+1) - DrummerWrapper.getSample(idx))) * level;
      }

      // reached the end, either killed or we finished to play the note before the kill, time to go to next note
      if (quickKill && (level <= 0.0 || slice < 0)) {
        quickKill = false;
        // we might have missed a note while quick killing, just read the last one to date
        _ = setNote(nextNote);
        _ = setLevel(Util.velocityToLevel(nextVelocity));
      }
    }
    
    oBuffer[i] = value;
    i = i + 1;
  }
}

// retrocompatibility: using inner buffer
and process_buffer(nb: int) {
  mem buffer_o;
  _ = process_bufferTo(nb, buffer_o);
}

// passes start and stop arrays for slices. arrays must have same size, and same size as inner slices_start and slices_end arrays. For a slice to be updated indices must be within sample size range, and for each slice start pos must be before end pos.
and setSlices(newSlicesStart: array(int, 12), newSlicesEnd: array(int, 12)) {
  if (size(newSlicesStart) == size(newSlicesEnd) && size(newSlicesStart) == size(slices_start) && size(newSlicesEnd) == size(slices_end)) {
    val i = 0;
    val s, e;
    while (i < size(newSlicesStart)) {
      s = clip(newSlicesStart[i], 0, size - 1);
      e = clip(newSlicesEnd[i], 0, size - 1);
      if (s <= e) {
        slices_start[i] = s;
        slices_end[i] = e;
      }
      i = i + 1;
    }
  }
}

// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setSamplerate(newFs:real) {
  // sample rate of the recording
  mem sampleFs;
  // audio sampling rate
  mem fs: real;
   if (newFs > 0.0) {
      fs = newFs;
      // update ratio when we update sampling rate
      fsRatio = sampleFs/fs;
   }
   _ = updateStep();
   // during quick kill, expects to go from 0 to 1 between levels in 5ms to avoid clicks
   qkStep = 1.0/(fs * 5.0);
}

// number of samples (note: valid once init)
and getSampleSize() {
  return size;
}

// No effect of sustain at the moment since there is no gate nor noteOff
and setSustain(flag: bool) {
}

// beginning of a note
// return true if was not playing, false otherwise
and noteOn(note:int, velocity:int, channel:int): bool {
  val isNew = slice < 0;
  // only 128 midi notes
  note = clip(note, 0, 127);

  // not playing, car start right away
  if (slice < 0) {
    _ = setNote(note);
    _ = setLevel(Util.velocityToLevel(velocity));
  }
  // delay for quick kill
  else {
    quickKill = true;
    nextNote = note;
    nextVelocity = velocity;
  }

  return isNew;
}

and noteOff(note:int, channel:int) {
}

and default() @[init] {
  size = DrummerWrapper.getSampleSize();
  // keep track of slices, both inclusive
  mem slices_start: array(int, 12);
  mem slices_end: array(int, 12);
  // defaults for current sample and DSP
  _ = setLevel(1.0);
  sampleFs = DrummerWrapper.getSampleFs();
  _ = setSamplerate(44.1);
  // set default slices
  // note: need to use explicit temp variables to make c++ happy (would otherwise mix const array with non-const)
  val kit_slices_start = DrummerWrapper.getSlicesStart();
  val kit_slices_end = DrummerWrapper.getSlicesEnd();
  _ = setSlices(kit_slices_start, kit_slices_end);
  // will copy a new array
  mem buffer_o;
  Buffer.buffer(buffer_o);
  // start with nothing
  slice = -1;
  quickKill = false;
}

// to let vult find above the good buffer size
fun dummy() {
  val buff;
  Buffer.buffer(buff);
   _ = process_bufferTo(0, buff);
}
