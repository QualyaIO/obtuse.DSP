
// oscillator, using waveables, to be passed as parameter for flexibility
// TODO: duplicate code here as well between process and process_buffer (and "simpler" versions! for sake of efficiency)


// non-buffered version
// wavetable: array containing samples to retrieve
fun process(wavetable) {
   // audio sampling rate
   mem fs: real;
   // sinus frequency
   mem freq: real;
   // starting point for phase, [0..8k[ in the wavetable
   mem phase_base: real;
   // current phase
   mem phase: real;
   // going that much through wavetable at each call
   mem step: real;
   // absolutely needs init to set that, converted to real to speedup
   mem rsize: real;

   // advance time, keep range in check here to maximize precision
   phase = phase + step;
   while (phase > rsize) {
      phase = phase - rsize;
   }
   // let others take care of modulo
   return Wavetable.getSampleFrom(wavetable, int(phase_base + phase));
}


// --> main function actually here, call default() first <--
// buffered version, specify number of elements of the buffer to proceed (will be caped to acual max). 0: all elements
// update the buffer, to be fetch afterward, returns last sample
// env: envelope to apply (0..1)
// phase shift: specify how to shift the base phase (-1 to 1, 0 center of phase) -- FIXME so that 0 does not change anything?
// phase_shift_level: by how much we apply phase shift (0..1)
// shift_level: if we should *actually* shift level instead of phase
// oBuffer: output buffer to copy data to
// FIXME: not check for phase_bases size, no option to by-pass
and process_bufferTo(wavetable, nb: int, env: array(real, 256), phase_shift: array(real, 256), phase_shift_level: real, shift_level: bool, oBuffer: array(real, 256)) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   // base for phase shift
   val half_phase = rsize / 2.0;
   val phase_range = half_phase * phase_shift_level;
   // base for volume shift
   val level_shift_coeff = 0.5 * phase_shift_level;

   val i = 0;

   // duplicate some code with outer loop test to minimize number of tests, here modulate volume
   if (shift_level) {
     while (i < nb) {
        // advance time, keep range in check here to maximize precision
        phase = phase + step;
        // slightly more efficient than the more robust modulo
        while (phase > rsize) {
           phase = phase - rsize;
        }
        // phase shift from -1..1 to 0..1, and don't change if there is no modulation 
        oBuffer[i]  = Wavetable.getSampleFrom(wavetable, int(phase)) * env[i] * (1.0 - (phase_shift[i] + 1.0) * level_shift_coeff);
        i = i + 1;
     }
   }
   // modulate phase
   else {
     while (i < nb) {
        phase = phase + step;
        while (phase > rsize) {
           phase = phase - rsize;
        }
        oBuffer[i]  = Wavetable.getSampleFrom(wavetable, int(half_phase + phase_range *   phase_shift[i]  + phase)) * env[i];
        i = i + 1;
     }
   }
}

// without phase this one
and process_bufferTo_simple(wavetable, nb: int, env: array(real, 256), oBuffer: array(real, 256)) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      // slightly more efficient than the more robust modulo
      while (phase > rsize) {
         phase = phase - rsize;
      }
      // loop in sample
      //v = getSample(int(phase_base + phase));
      oBuffer[i]  = Wavetable.getSampleFrom(wavetable, int(phase_base + phase)) * env[i];
      i = i + 1;
   }
}

// without envelop nor phase this one
and process_bufferTo_simplest(wavetable, nb: int, oBuffer: array(real, 256)) {
   nb = clip(nb, 0, size(oBuffer));
   if (nb == 0) {
      nb = size(oBuffer);
   }
   
   val i = 0;
   while (i < nb) {
      // advance time, keep range in check here to maximize precision
      phase = phase + step;
      // slightly more efficient than the more robust modulo
      while (phase > rsize) {
         phase = phase - rsize;
      }
      // loop in sample
      //v = getSample(int(phase_base + phase));
      oBuffer[i]  = Wavetable.getSampleFrom(wavetable, int(phase_base + phase));
      i = i + 1;
   }
}

// called internally when Samplerate or frequency is altered
and updateStep() {
    // base for computing step
    mem stepRatio;
    // both for efficiency and because we don't want any result to be outside [1/32767 .. 32767] to avoid fixed float limits we compute step in two... steps
    step = stepRatio*freq;
}
// seter for parameters. expect values of desired frequency and current sampling rate in kHz to avoid fixed float limits ([1/32767 ..32767]... probably)
and setSamplerate(newFs:real) {
   if (newFs > 0.0) {
      fs = newFs;
      // update ratio when we update sampling rate
      stepRatio = rsize / fs;
   }
   _ = updateStep();
}
and setFrequency(newFreq:real) {
   freq = newFreq;
   _ = updateStep();
}
// setting *base* phase [0..size[ -- we won't check here, beware!
and setPhase(newPhase: real) {
   phase_base = newPhase;
}
// reset both base phase and current phase, typically used upon new note
and resetPhase() {
   phase = 0.0;
   phase_base = 0.0;
}

// size of wavetable
and getSize() {
    return rsize;
}

and default() @[init] {
   rsize = real(Wavetable.bufferSize());
   // default sampling rate (in kHz)
   _ = setSamplerate(44.1);
   // default frequency (in kHz)
   _ = setFrequency(0.440);
}
